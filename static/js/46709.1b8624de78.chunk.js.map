{"version":3,"file":"static/js/46709.1b8624de78.chunk.js","mappings":"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","sources":["webpack://web/../../node_modules/@solana/buffer-layout/lib/Layout.js","webpack://web/../../node_modules/@solana/web3.js/node_modules/@noble/curves/node_modules/@noble/hashes/esm/_assert.js","webpack://web/../../node_modules/@solana/web3.js/node_modules/@noble/curves/node_modules/@noble/hashes/esm/crypto.js","webpack://web/../../node_modules/@solana/web3.js/node_modules/@noble/curves/node_modules/@noble/hashes/esm/utils.js","webpack://web/../../node_modules/@solana/web3.js/node_modules/@noble/curves/node_modules/@noble/hashes/esm/_md.js","webpack://web/../../node_modules/@solana/web3.js/node_modules/@noble/curves/node_modules/@noble/hashes/esm/_u64.js","webpack://web/../../node_modules/@solana/web3.js/node_modules/@noble/curves/node_modules/@noble/hashes/esm/sha512.js","webpack://web/../../node_modules/@solana/web3.js/node_modules/@noble/curves/esm/abstract/utils.js","webpack://web/../../node_modules/@solana/web3.js/node_modules/@noble/curves/esm/abstract/modular.js","webpack://web/../../node_modules/@solana/web3.js/node_modules/@noble/curves/esm/abstract/curve.js","webpack://web/../../node_modules/@solana/web3.js/node_modules/@noble/curves/esm/abstract/edwards.js","webpack://web/../../node_modules/@solana/web3.js/node_modules/@noble/curves/esm/ed25519.js","webpack://web/../../node_modules/@solana/web3.js/node_modules/@noble/curves/node_modules/@noble/hashes/esm/sha256.js","webpack://web/../../node_modules/@solana/web3.js/node_modules/@noble/curves/node_modules/@noble/hashes/esm/hmac.js","webpack://web/../../node_modules/@solana/web3.js/node_modules/@noble/curves/esm/abstract/weierstrass.js","webpack://web/../../node_modules/@solana/web3.js/node_modules/@noble/curves/esm/_shortw_utils.js","webpack://web/../../node_modules/@solana/web3.js/node_modules/@noble/curves/esm/secp256k1.js","webpack://web/../../node_modules/@solana/web3.js/lib/index.browser.esm.js","webpack://web/../../node_modules/bigint-buffer/dist/browser.js","webpack://web/../../node_modules/coinselect/utils.js","webpack://web/../../node_modules/jayson/lib/client/browser/index.js","webpack://web/../../node_modules/jayson/lib/generateRequest.js","webpack://web/../../node_modules/jayson/node_modules/uuid/dist/esm-browser/rng.js","webpack://web/../../node_modules/jayson/node_modules/uuid/dist/esm-browser/regex.js","webpack://web/../../node_modules/jayson/node_modules/uuid/dist/esm-browser/validate.js","webpack://web/../../node_modules/jayson/node_modules/uuid/dist/esm-browser/stringify.js","webpack://web/../../node_modules/jayson/node_modules/uuid/dist/esm-browser/v4.js","webpack://web/../../node_modules/rpc-websockets/dist/lib/client.js","webpack://web/../../node_modules/rpc-websockets/dist/lib/client/websocket.browser.js","webpack://web/../../node_modules/rpc-websockets/dist/lib/utils.js","webpack://web/../../node_modules/@babel/runtime/helpers/interopRequireDefault.js","webpack://web/../../node_modules/superstruct/lib/index.es.js"],"sourcesContent":["/* The MIT License (MIT)\n *\n * Copyright 2015-2018 Peter A. Bigot\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n/**\n * Support for translating between Uint8Array instances and JavaScript\n * native types.\n *\n * {@link module:Layout~Layout|Layout} is the basis of a class\n * hierarchy that associates property names with sequences of encoded\n * bytes.\n *\n * Layouts are supported for these scalar (numeric) types:\n * * {@link module:Layout~UInt|Unsigned integers in little-endian\n *   format} with {@link module:Layout.u8|8-bit}, {@link\n *   module:Layout.u16|16-bit}, {@link module:Layout.u24|24-bit},\n *   {@link module:Layout.u32|32-bit}, {@link\n *   module:Layout.u40|40-bit}, and {@link module:Layout.u48|48-bit}\n *   representation ranges;\n * * {@link module:Layout~UIntBE|Unsigned integers in big-endian\n *   format} with {@link module:Layout.u16be|16-bit}, {@link\n *   module:Layout.u24be|24-bit}, {@link module:Layout.u32be|32-bit},\n *   {@link module:Layout.u40be|40-bit}, and {@link\n *   module:Layout.u48be|48-bit} representation ranges;\n * * {@link module:Layout~Int|Signed integers in little-endian\n *   format} with {@link module:Layout.s8|8-bit}, {@link\n *   module:Layout.s16|16-bit}, {@link module:Layout.s24|24-bit},\n *   {@link module:Layout.s32|32-bit}, {@link\n *   module:Layout.s40|40-bit}, and {@link module:Layout.s48|48-bit}\n *   representation ranges;\n * * {@link module:Layout~IntBE|Signed integers in big-endian format}\n *   with {@link module:Layout.s16be|16-bit}, {@link\n *   module:Layout.s24be|24-bit}, {@link module:Layout.s32be|32-bit},\n *   {@link module:Layout.s40be|40-bit}, and {@link\n *   module:Layout.s48be|48-bit} representation ranges;\n * * 64-bit integral values that decode to an exact (if magnitude is\n *   less than 2^53) or nearby integral Number in {@link\n *   module:Layout.nu64|unsigned little-endian}, {@link\n *   module:Layout.nu64be|unsigned big-endian}, {@link\n *   module:Layout.ns64|signed little-endian}, and {@link\n *   module:Layout.ns64be|unsigned big-endian} encodings;\n * * 32-bit floating point values with {@link\n *   module:Layout.f32|little-endian} and {@link\n *   module:Layout.f32be|big-endian} representations;\n * * 64-bit floating point values with {@link\n *   module:Layout.f64|little-endian} and {@link\n *   module:Layout.f64be|big-endian} representations;\n * * {@link module:Layout.const|Constants} that take no space in the\n *   encoded expression.\n *\n * and for these aggregate types:\n * * {@link module:Layout.seq|Sequence}s of instances of a {@link\n *   module:Layout~Layout|Layout}, with JavaScript representation as\n *   an Array and constant or data-dependent {@link\n *   module:Layout~Sequence#count|length};\n * * {@link module:Layout.struct|Structure}s that aggregate a\n *   heterogeneous sequence of {@link module:Layout~Layout|Layout}\n *   instances, with JavaScript representation as an Object;\n * * {@link module:Layout.union|Union}s that support multiple {@link\n *   module:Layout~VariantLayout|variant layouts} over a fixed\n *   (padded) or variable (not padded) span of bytes, using an\n *   unsigned integer at the start of the data or a separate {@link\n *   module:Layout.unionLayoutDiscriminator|layout element} to\n *   determine which layout to use when interpreting the buffer\n *   contents;\n * * {@link module:Layout.bits|BitStructure}s that contain a sequence\n *   of individual {@link\n *   module:Layout~BitStructure#addField|BitField}s packed into an 8,\n *   16, 24, or 32-bit unsigned integer starting at the least- or\n *   most-significant bit;\n * * {@link module:Layout.cstr|C strings} of varying length;\n * * {@link module:Layout.blob|Blobs} of fixed- or variable-{@link\n *   module:Layout~Blob#length|length} raw data.\n *\n * All {@link module:Layout~Layout|Layout} instances are immutable\n * after construction, to prevent internal state from becoming\n * inconsistent.\n *\n * @local Layout\n * @local ExternalLayout\n * @local GreedyCount\n * @local OffsetLayout\n * @local UInt\n * @local UIntBE\n * @local Int\n * @local IntBE\n * @local NearUInt64\n * @local NearUInt64BE\n * @local NearInt64\n * @local NearInt64BE\n * @local Float\n * @local FloatBE\n * @local Double\n * @local DoubleBE\n * @local Sequence\n * @local Structure\n * @local UnionDiscriminator\n * @local UnionLayoutDiscriminator\n * @local Union\n * @local VariantLayout\n * @local BitStructure\n * @local BitField\n * @local Boolean\n * @local Blob\n * @local CString\n * @local Constant\n * @local bindConstructorLayout\n * @module Layout\n * @license MIT\n * @author Peter A. Bigot\n * @see {@link https://github.com/pabigot/buffer-layout|buffer-layout on GitHub}\n */\n'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.s16 = exports.s8 = exports.nu64be = exports.u48be = exports.u40be = exports.u32be = exports.u24be = exports.u16be = exports.nu64 = exports.u48 = exports.u40 = exports.u32 = exports.u24 = exports.u16 = exports.u8 = exports.offset = exports.greedy = exports.Constant = exports.UTF8 = exports.CString = exports.Blob = exports.Boolean = exports.BitField = exports.BitStructure = exports.VariantLayout = exports.Union = exports.UnionLayoutDiscriminator = exports.UnionDiscriminator = exports.Structure = exports.Sequence = exports.DoubleBE = exports.Double = exports.FloatBE = exports.Float = exports.NearInt64BE = exports.NearInt64 = exports.NearUInt64BE = exports.NearUInt64 = exports.IntBE = exports.Int = exports.UIntBE = exports.UInt = exports.OffsetLayout = exports.GreedyCount = exports.ExternalLayout = exports.bindConstructorLayout = exports.nameWithProperty = exports.Layout = exports.uint8ArrayToBuffer = exports.checkUint8Array = void 0;\nexports.constant = exports.utf8 = exports.cstr = exports.blob = exports.unionLayoutDiscriminator = exports.union = exports.seq = exports.bits = exports.struct = exports.f64be = exports.f64 = exports.f32be = exports.f32 = exports.ns64be = exports.s48be = exports.s40be = exports.s32be = exports.s24be = exports.s16be = exports.ns64 = exports.s48 = exports.s40 = exports.s32 = exports.s24 = void 0;\nconst buffer_1 = require(\"buffer\");\n/* Check if a value is a Uint8Array.\n *\n * @ignore */\nfunction checkUint8Array(b) {\n    if (!(b instanceof Uint8Array)) {\n        throw new TypeError('b must be a Uint8Array');\n    }\n}\nexports.checkUint8Array = checkUint8Array;\n/* Create a Buffer instance from a Uint8Array.\n *\n * @ignore */\nfunction uint8ArrayToBuffer(b) {\n    checkUint8Array(b);\n    return buffer_1.Buffer.from(b.buffer, b.byteOffset, b.length);\n}\nexports.uint8ArrayToBuffer = uint8ArrayToBuffer;\n/**\n * Base class for layout objects.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * Layout#encode|encode} or {@link Layout#decode|decode} functions.\n *\n * @param {Number} span - Initializer for {@link Layout#span|span}.  The\n * parameter must be an integer; a negative value signifies that the\n * span is {@link Layout#getSpan|value-specific}.\n *\n * @param {string} [property] - Initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n */\nclass Layout {\n    constructor(span, property) {\n        if (!Number.isInteger(span)) {\n            throw new TypeError('span must be an integer');\n        }\n        /** The span of the layout in bytes.\n         *\n         * Positive values are generally expected.\n         *\n         * Zero will only appear in {@link Constant}s and in {@link\n         * Sequence}s where the {@link Sequence#count|count} is zero.\n         *\n         * A negative value indicates that the span is value-specific, and\n         * must be obtained using {@link Layout#getSpan|getSpan}. */\n        this.span = span;\n        /** The property name used when this layout is represented in an\n         * Object.\n         *\n         * Used only for layouts that {@link Layout#decode|decode} to Object\n         * instances.  If left undefined the span of the unnamed layout will\n         * be treated as padding: it will not be mutated by {@link\n         * Layout#encode|encode} nor represented as a property in the\n         * decoded Object. */\n        this.property = property;\n    }\n    /** Function to create an Object into which decoded properties will\n     * be written.\n     *\n     * Used only for layouts that {@link Layout#decode|decode} to Object\n     * instances, which means:\n     * * {@link Structure}\n     * * {@link Union}\n     * * {@link VariantLayout}\n     * * {@link BitStructure}\n     *\n     * If left undefined the JavaScript representation of these layouts\n     * will be Object instances.\n     *\n     * See {@link bindConstructorLayout}.\n     */\n    makeDestinationObject() {\n        return {};\n    }\n    /**\n     * Calculate the span of a specific instance of a layout.\n     *\n     * @param {Uint8Array} b - the buffer that contains an encoded instance.\n     *\n     * @param {Number} [offset] - the offset at which the encoded instance\n     * starts.  If absent a zero offset is inferred.\n     *\n     * @return {Number} - the number of bytes covered by the layout\n     * instance.  If this method is not overridden in a subclass the\n     * definition-time constant {@link Layout#span|span} will be\n     * returned.\n     *\n     * @throws {RangeError} - if the length of the value cannot be\n     * determined.\n     */\n    getSpan(b, offset) {\n        if (0 > this.span) {\n            throw new RangeError('indeterminate span');\n        }\n        return this.span;\n    }\n    /**\n     * Replicate the layout using a new property.\n     *\n     * This function must be used to get a structurally-equivalent layout\n     * with a different name since all {@link Layout} instances are\n     * immutable.\n     *\n     * **NOTE** This is a shallow copy.  All fields except {@link\n     * Layout#property|property} are strictly equal to the origin layout.\n     *\n     * @param {String} property - the value for {@link\n     * Layout#property|property} in the replica.\n     *\n     * @returns {Layout} - the copy with {@link Layout#property|property}\n     * set to `property`.\n     */\n    replicate(property) {\n        const rv = Object.create(this.constructor.prototype);\n        Object.assign(rv, this);\n        rv.property = property;\n        return rv;\n    }\n    /**\n     * Create an object from layout properties and an array of values.\n     *\n     * **NOTE** This function returns `undefined` if invoked on a layout\n     * that does not return its value as an Object.  Objects are\n     * returned for things that are a {@link Structure}, which includes\n     * {@link VariantLayout|variant layouts} if they are structures, and\n     * excludes {@link Union}s.  If you want this feature for a union\n     * you must use {@link Union.getVariant|getVariant} to select the\n     * desired layout.\n     *\n     * @param {Array} values - an array of values that correspond to the\n     * default order for properties.  As with {@link Layout#decode|decode}\n     * layout elements that have no property name are skipped when\n     * iterating over the array values.  Only the top-level properties are\n     * assigned; arguments are not assigned to properties of contained\n     * layouts.  Any unused values are ignored.\n     *\n     * @return {(Object|undefined)}\n     */\n    fromArray(values) {\n        return undefined;\n    }\n}\nexports.Layout = Layout;\n/* Provide text that carries a name (such as for a function that will\n * be throwing an error) annotated with the property of a given layout\n * (such as one for which the value was unacceptable).\n *\n * @ignore */\nfunction nameWithProperty(name, lo) {\n    if (lo.property) {\n        return name + '[' + lo.property + ']';\n    }\n    return name;\n}\nexports.nameWithProperty = nameWithProperty;\n/**\n * Augment a class so that instances can be encoded/decoded using a\n * given layout.\n *\n * Calling this function couples `Class` with `layout` in several ways:\n *\n * * `Class.layout_` becomes a static member property equal to `layout`;\n * * `layout.boundConstructor_` becomes a static member property equal\n *    to `Class`;\n * * The {@link Layout#makeDestinationObject|makeDestinationObject()}\n *   property of `layout` is set to a function that returns a `new\n *   Class()`;\n * * `Class.decode(b, offset)` becomes a static member function that\n *   delegates to {@link Layout#decode|layout.decode}.  The\n *   synthesized function may be captured and extended.\n * * `Class.prototype.encode(b, offset)` provides an instance member\n *   function that delegates to {@link Layout#encode|layout.encode}\n *   with `src` set to `this`.  The synthesized function may be\n *   captured and extended, but when the extension is invoked `this`\n *   must be explicitly bound to the instance.\n *\n * @param {class} Class - a JavaScript class with a nullary\n * constructor.\n *\n * @param {Layout} layout - the {@link Layout} instance used to encode\n * instances of `Class`.\n */\n// `Class` must be a constructor Function, but the assignment of a `layout_` property to it makes it difficult to type\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction bindConstructorLayout(Class, layout) {\n    if ('function' !== typeof Class) {\n        throw new TypeError('Class must be constructor');\n    }\n    if (Object.prototype.hasOwnProperty.call(Class, 'layout_')) {\n        throw new Error('Class is already bound to a layout');\n    }\n    if (!(layout && (layout instanceof Layout))) {\n        throw new TypeError('layout must be a Layout');\n    }\n    if (Object.prototype.hasOwnProperty.call(layout, 'boundConstructor_')) {\n        throw new Error('layout is already bound to a constructor');\n    }\n    Class.layout_ = layout;\n    layout.boundConstructor_ = Class;\n    layout.makeDestinationObject = (() => new Class());\n    Object.defineProperty(Class.prototype, 'encode', {\n        value(b, offset) {\n            return layout.encode(this, b, offset);\n        },\n        writable: true,\n    });\n    Object.defineProperty(Class, 'decode', {\n        value(b, offset) {\n            return layout.decode(b, offset);\n        },\n        writable: true,\n    });\n}\nexports.bindConstructorLayout = bindConstructorLayout;\n/**\n * An object that behaves like a layout but does not consume space\n * within its containing layout.\n *\n * This is primarily used to obtain metadata about a member, such as a\n * {@link OffsetLayout} that can provide data about a {@link\n * Layout#getSpan|value-specific span}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support {@link\n * ExternalLayout#isCount|isCount} or other {@link Layout} functions.\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n * @augments {Layout}\n */\nclass ExternalLayout extends Layout {\n    /**\n     * Return `true` iff the external layout decodes to an unsigned\n     * integer layout.\n     *\n     * In that case it can be used as the source of {@link\n     * Sequence#count|Sequence counts}, {@link Blob#length|Blob lengths},\n     * or as {@link UnionLayoutDiscriminator#layout|external union\n     * discriminators}.\n     *\n     * @abstract\n     */\n    isCount() {\n        throw new Error('ExternalLayout is abstract');\n    }\n}\nexports.ExternalLayout = ExternalLayout;\n/**\n * An {@link ExternalLayout} that determines its {@link\n * Layout#decode|value} based on offset into and length of the buffer\n * on which it is invoked.\n *\n * *Factory*: {@link module:Layout.greedy|greedy}\n *\n * @param {Number} [elementSpan] - initializer for {@link\n * GreedyCount#elementSpan|elementSpan}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {ExternalLayout}\n */\nclass GreedyCount extends ExternalLayout {\n    constructor(elementSpan = 1, property) {\n        if ((!Number.isInteger(elementSpan)) || (0 >= elementSpan)) {\n            throw new TypeError('elementSpan must be a (positive) integer');\n        }\n        super(-1, property);\n        /** The layout for individual elements of the sequence.  The value\n         * must be a positive integer.  If not provided, the value will be\n         * 1. */\n        this.elementSpan = elementSpan;\n    }\n    /** @override */\n    isCount() {\n        return true;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        checkUint8Array(b);\n        const rem = b.length - offset;\n        return Math.floor(rem / this.elementSpan);\n    }\n    /** @override */\n    encode(src, b, offset) {\n        return 0;\n    }\n}\nexports.GreedyCount = GreedyCount;\n/**\n * An {@link ExternalLayout} that supports accessing a {@link Layout}\n * at a fixed offset from the start of another Layout.  The offset may\n * be before, within, or after the base layout.\n *\n * *Factory*: {@link module:Layout.offset|offset}\n *\n * @param {Layout} layout - initializer for {@link\n * OffsetLayout#layout|layout}, modulo `property`.\n *\n * @param {Number} [offset] - Initializes {@link\n * OffsetLayout#offset|offset}.  Defaults to zero.\n *\n * @param {string} [property] - Optional new property name for a\n * {@link Layout#replicate| replica} of `layout` to be used as {@link\n * OffsetLayout#layout|layout}.  If not provided the `layout` is used\n * unchanged.\n *\n * @augments {Layout}\n */\nclass OffsetLayout extends ExternalLayout {\n    constructor(layout, offset = 0, property) {\n        if (!(layout instanceof Layout)) {\n            throw new TypeError('layout must be a Layout');\n        }\n        if (!Number.isInteger(offset)) {\n            throw new TypeError('offset must be integer or undefined');\n        }\n        super(layout.span, property || layout.property);\n        /** The subordinated layout. */\n        this.layout = layout;\n        /** The location of {@link OffsetLayout#layout} relative to the\n         * start of another layout.\n         *\n         * The value may be positive or negative, but an error will thrown\n         * if at the point of use it goes outside the span of the Uint8Array\n         * being accessed.  */\n        this.offset = offset;\n    }\n    /** @override */\n    isCount() {\n        return ((this.layout instanceof UInt)\n            || (this.layout instanceof UIntBE));\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return this.layout.decode(b, offset + this.offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        return this.layout.encode(src, b, offset + this.offset);\n    }\n}\nexports.OffsetLayout = OffsetLayout;\n/**\n * Represent an unsigned integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.u8|u8}, {@link\n *  module:Layout.u16|u16}, {@link module:Layout.u24|u24}, {@link\n *  module:Layout.u32|u32}, {@link module:Layout.u40|u40}, {@link\n *  module:Layout.u48|u48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UInt extends Layout {\n    constructor(span, property) {\n        super(span, property);\n        if (6 < this.span) {\n            throw new RangeError('span must not exceed 6 bytes');\n        }\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readUIntLE(offset, this.span);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeUIntLE(src, offset, this.span);\n        return this.span;\n    }\n}\nexports.UInt = UInt;\n/**\n * Represent an unsigned integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.u8be|u8be}, {@link\n * module:Layout.u16be|u16be}, {@link module:Layout.u24be|u24be},\n * {@link module:Layout.u32be|u32be}, {@link\n * module:Layout.u40be|u40be}, {@link module:Layout.u48be|u48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UIntBE extends Layout {\n    constructor(span, property) {\n        super(span, property);\n        if (6 < this.span) {\n            throw new RangeError('span must not exceed 6 bytes');\n        }\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readUIntBE(offset, this.span);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeUIntBE(src, offset, this.span);\n        return this.span;\n    }\n}\nexports.UIntBE = UIntBE;\n/**\n * Represent a signed integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.s8|s8}, {@link\n *  module:Layout.s16|s16}, {@link module:Layout.s24|s24}, {@link\n *  module:Layout.s32|s32}, {@link module:Layout.s40|s40}, {@link\n *  module:Layout.s48|s48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Int extends Layout {\n    constructor(span, property) {\n        super(span, property);\n        if (6 < this.span) {\n            throw new RangeError('span must not exceed 6 bytes');\n        }\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readIntLE(offset, this.span);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeIntLE(src, offset, this.span);\n        return this.span;\n    }\n}\nexports.Int = Int;\n/**\n * Represent a signed integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.s8be|s8be}, {@link\n * module:Layout.s16be|s16be}, {@link module:Layout.s24be|s24be},\n * {@link module:Layout.s32be|s32be}, {@link\n * module:Layout.s40be|s40be}, {@link module:Layout.s48be|s48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass IntBE extends Layout {\n    constructor(span, property) {\n        super(span, property);\n        if (6 < this.span) {\n            throw new RangeError('span must not exceed 6 bytes');\n        }\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readIntBE(offset, this.span);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeIntBE(src, offset, this.span);\n        return this.span;\n    }\n}\nexports.IntBE = IntBE;\nconst V2E32 = Math.pow(2, 32);\n/* True modulus high and low 32-bit words, where low word is always\n * non-negative. */\nfunction divmodInt64(src) {\n    const hi32 = Math.floor(src / V2E32);\n    const lo32 = src - (hi32 * V2E32);\n    return { hi32, lo32 };\n}\n/* Reconstruct Number from quotient and non-negative remainder */\nfunction roundedInt64(hi32, lo32) {\n    return hi32 * V2E32 + lo32;\n}\n/**\n * Represent an unsigned 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64|nu64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearUInt64 extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const buffer = uint8ArrayToBuffer(b);\n        const lo32 = buffer.readUInt32LE(offset);\n        const hi32 = buffer.readUInt32LE(offset + 4);\n        return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        const split = divmodInt64(src);\n        const buffer = uint8ArrayToBuffer(b);\n        buffer.writeUInt32LE(split.lo32, offset);\n        buffer.writeUInt32LE(split.hi32, offset + 4);\n        return 8;\n    }\n}\nexports.NearUInt64 = NearUInt64;\n/**\n * Represent an unsigned 64-bit integer in big-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64be|nu64be}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearUInt64BE extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const buffer = uint8ArrayToBuffer(b);\n        const hi32 = buffer.readUInt32BE(offset);\n        const lo32 = buffer.readUInt32BE(offset + 4);\n        return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        const split = divmodInt64(src);\n        const buffer = uint8ArrayToBuffer(b);\n        buffer.writeUInt32BE(split.hi32, offset);\n        buffer.writeUInt32BE(split.lo32, offset + 4);\n        return 8;\n    }\n}\nexports.NearUInt64BE = NearUInt64BE;\n/**\n * Represent a signed 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64|ns64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearInt64 extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const buffer = uint8ArrayToBuffer(b);\n        const lo32 = buffer.readUInt32LE(offset);\n        const hi32 = buffer.readInt32LE(offset + 4);\n        return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        const split = divmodInt64(src);\n        const buffer = uint8ArrayToBuffer(b);\n        buffer.writeUInt32LE(split.lo32, offset);\n        buffer.writeInt32LE(split.hi32, offset + 4);\n        return 8;\n    }\n}\nexports.NearInt64 = NearInt64;\n/**\n * Represent a signed 64-bit integer in big-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64be|ns64be}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearInt64BE extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const buffer = uint8ArrayToBuffer(b);\n        const hi32 = buffer.readInt32BE(offset);\n        const lo32 = buffer.readUInt32BE(offset + 4);\n        return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        const split = divmodInt64(src);\n        const buffer = uint8ArrayToBuffer(b);\n        buffer.writeInt32BE(split.hi32, offset);\n        buffer.writeUInt32BE(split.lo32, offset + 4);\n        return 8;\n    }\n}\nexports.NearInt64BE = NearInt64BE;\n/**\n * Represent a 32-bit floating point number in little-endian format.\n *\n * *Factory*: {@link module:Layout.f32|f32}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Float extends Layout {\n    constructor(property) {\n        super(4, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readFloatLE(offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeFloatLE(src, offset);\n        return 4;\n    }\n}\nexports.Float = Float;\n/**\n * Represent a 32-bit floating point number in big-endian format.\n *\n * *Factory*: {@link module:Layout.f32be|f32be}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass FloatBE extends Layout {\n    constructor(property) {\n        super(4, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readFloatBE(offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeFloatBE(src, offset);\n        return 4;\n    }\n}\nexports.FloatBE = FloatBE;\n/**\n * Represent a 64-bit floating point number in little-endian format.\n *\n * *Factory*: {@link module:Layout.f64|f64}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Double extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readDoubleLE(offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeDoubleLE(src, offset);\n        return 8;\n    }\n}\nexports.Double = Double;\n/**\n * Represent a 64-bit floating point number in big-endian format.\n *\n * *Factory*: {@link module:Layout.f64be|f64be}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass DoubleBE extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readDoubleBE(offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeDoubleBE(src, offset);\n        return 8;\n    }\n}\nexports.DoubleBE = DoubleBE;\n/**\n * Represent a contiguous sequence of a specific layout as an Array.\n *\n * *Factory*: {@link module:Layout.seq|seq}\n *\n * @param {Layout} elementLayout - initializer for {@link\n * Sequence#elementLayout|elementLayout}.\n *\n * @param {(Number|ExternalLayout)} count - initializer for {@link\n * Sequence#count|count}.  The parameter must be either a positive\n * integer or an instance of {@link ExternalLayout}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Sequence extends Layout {\n    constructor(elementLayout, count, property) {\n        if (!(elementLayout instanceof Layout)) {\n            throw new TypeError('elementLayout must be a Layout');\n        }\n        if (!(((count instanceof ExternalLayout) && count.isCount())\n            || (Number.isInteger(count) && (0 <= count)))) {\n            throw new TypeError('count must be non-negative integer '\n                + 'or an unsigned integer ExternalLayout');\n        }\n        let span = -1;\n        if ((!(count instanceof ExternalLayout))\n            && (0 < elementLayout.span)) {\n            span = count * elementLayout.span;\n        }\n        super(span, property);\n        /** The layout for individual elements of the sequence. */\n        this.elementLayout = elementLayout;\n        /** The number of elements in the sequence.\n         *\n         * This will be either a non-negative integer or an instance of\n         * {@link ExternalLayout} for which {@link\n         * ExternalLayout#isCount|isCount()} is `true`. */\n        this.count = count;\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        if (0 <= this.span) {\n            return this.span;\n        }\n        let span = 0;\n        let count = this.count;\n        if (count instanceof ExternalLayout) {\n            count = count.decode(b, offset);\n        }\n        if (0 < this.elementLayout.span) {\n            span = count * this.elementLayout.span;\n        }\n        else {\n            let idx = 0;\n            while (idx < count) {\n                span += this.elementLayout.getSpan(b, offset + span);\n                ++idx;\n            }\n        }\n        return span;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const rv = [];\n        let i = 0;\n        let count = this.count;\n        if (count instanceof ExternalLayout) {\n            count = count.decode(b, offset);\n        }\n        while (i < count) {\n            rv.push(this.elementLayout.decode(b, offset));\n            offset += this.elementLayout.getSpan(b, offset);\n            i += 1;\n        }\n        return rv;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Sequence}.\n     *\n     * **NOTE** If `src` is shorter than {@link Sequence#count|count} then\n     * the unused space in the buffer is left unchanged.  If `src` is\n     * longer than {@link Sequence#count|count} the unneeded elements are\n     * ignored.\n     *\n     * **NOTE** If {@link Layout#count|count} is an instance of {@link\n     * ExternalLayout} then the length of `src` will be encoded as the\n     * count after `src` is encoded. */\n    encode(src, b, offset = 0) {\n        const elo = this.elementLayout;\n        const span = src.reduce((span, v) => {\n            return span + elo.encode(v, b, offset + span);\n        }, 0);\n        if (this.count instanceof ExternalLayout) {\n            this.count.encode(src.length, b, offset);\n        }\n        return span;\n    }\n}\nexports.Sequence = Sequence;\n/**\n * Represent a contiguous sequence of arbitrary layout elements as an\n * Object.\n *\n * *Factory*: {@link module:Layout.struct|struct}\n *\n * **NOTE** The {@link Layout#span|span} of the structure is variable\n * if any layout in {@link Structure#fields|fields} has a variable\n * span.  When {@link Layout#encode|encoding} we must have a value for\n * all variable-length fields, or we wouldn't be able to figure out\n * how much space to use for storage.  We can only identify the value\n * for a field when it has a {@link Layout#property|property}.  As\n * such, although a structure may contain both unnamed fields and\n * variable-length fields, it cannot contain an unnamed\n * variable-length field.\n *\n * @param {Layout[]} fields - initializer for {@link\n * Structure#fields|fields}.  An error is raised if this contains a\n * variable-length field for which a {@link Layout#property|property}\n * is not defined.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @param {Boolean} [decodePrefixes] - initializer for {@link\n * Structure#decodePrefixes|property}.\n *\n * @throws {Error} - if `fields` contains an unnamed variable-length\n * layout.\n *\n * @augments {Layout}\n */\nclass Structure extends Layout {\n    constructor(fields, property, decodePrefixes) {\n        if (!(Array.isArray(fields)\n            && fields.reduce((acc, v) => acc && (v instanceof Layout), true))) {\n            throw new TypeError('fields must be array of Layout instances');\n        }\n        if (('boolean' === typeof property)\n            && (undefined === decodePrefixes)) {\n            decodePrefixes = property;\n            property = undefined;\n        }\n        /* Verify absence of unnamed variable-length fields. */\n        for (const fd of fields) {\n            if ((0 > fd.span)\n                && (undefined === fd.property)) {\n                throw new Error('fields cannot contain unnamed variable-length layout');\n            }\n        }\n        let span = -1;\n        try {\n            span = fields.reduce((span, fd) => span + fd.getSpan(), 0);\n        }\n        catch (e) {\n            // ignore error\n        }\n        super(span, property);\n        /** The sequence of {@link Layout} values that comprise the\n         * structure.\n         *\n         * The individual elements need not be the same type, and may be\n         * either scalar or aggregate layouts.  If a member layout leaves\n         * its {@link Layout#property|property} undefined the\n         * corresponding region of the buffer associated with the element\n         * will not be mutated.\n         *\n         * @type {Layout[]} */\n        this.fields = fields;\n        /** Control behavior of {@link Layout#decode|decode()} given short\n         * buffers.\n         *\n         * In some situations a structure many be extended with additional\n         * fields over time, with older installations providing only a\n         * prefix of the full structure.  If this property is `true`\n         * decoding will accept those buffers and leave subsequent fields\n         * undefined, as long as the buffer ends at a field boundary.\n         * Defaults to `false`. */\n        this.decodePrefixes = !!decodePrefixes;\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        if (0 <= this.span) {\n            return this.span;\n        }\n        let span = 0;\n        try {\n            span = this.fields.reduce((span, fd) => {\n                const fsp = fd.getSpan(b, offset);\n                offset += fsp;\n                return span + fsp;\n            }, 0);\n        }\n        catch (e) {\n            throw new RangeError('indeterminate span');\n        }\n        return span;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        checkUint8Array(b);\n        const dest = this.makeDestinationObject();\n        for (const fd of this.fields) {\n            if (undefined !== fd.property) {\n                dest[fd.property] = fd.decode(b, offset);\n            }\n            offset += fd.getSpan(b, offset);\n            if (this.decodePrefixes\n                && (b.length === offset)) {\n                break;\n            }\n        }\n        return dest;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Structure}.\n     *\n     * If `src` is missing a property for a member with a defined {@link\n     * Layout#property|property} the corresponding region of the buffer is\n     * left unmodified. */\n    encode(src, b, offset = 0) {\n        const firstOffset = offset;\n        let lastOffset = 0;\n        let lastWrote = 0;\n        for (const fd of this.fields) {\n            let span = fd.span;\n            lastWrote = (0 < span) ? span : 0;\n            if (undefined !== fd.property) {\n                const fv = src[fd.property];\n                if (undefined !== fv) {\n                    lastWrote = fd.encode(fv, b, offset);\n                    if (0 > span) {\n                        /* Read the as-encoded span, which is not necessarily the\n                         * same as what we wrote. */\n                        span = fd.getSpan(b, offset);\n                    }\n                }\n            }\n            lastOffset = offset;\n            offset += span;\n        }\n        /* Use (lastOffset + lastWrote) instead of offset because the last\n         * item may have had a dynamic length and we don't want to include\n         * the padding between it and the end of the space reserved for\n         * it. */\n        return (lastOffset + lastWrote) - firstOffset;\n    }\n    /** @override */\n    fromArray(values) {\n        const dest = this.makeDestinationObject();\n        for (const fd of this.fields) {\n            if ((undefined !== fd.property)\n                && (0 < values.length)) {\n                dest[fd.property] = values.shift();\n            }\n        }\n        return dest;\n    }\n    /**\n     * Get access to the layout of a given property.\n     *\n     * @param {String} property - the structure member of interest.\n     *\n     * @return {Layout} - the layout associated with `property`, or\n     * undefined if there is no such property.\n     */\n    layoutFor(property) {\n        if ('string' !== typeof property) {\n            throw new TypeError('property must be string');\n        }\n        for (const fd of this.fields) {\n            if (fd.property === property) {\n                return fd;\n            }\n        }\n        return undefined;\n    }\n    /**\n     * Get the offset of a structure member.\n     *\n     * @param {String} property - the structure member of interest.\n     *\n     * @return {Number} - the offset in bytes to the start of `property`\n     * within the structure, or undefined if `property` is not a field\n     * within the structure.  If the property is a member but follows a\n     * variable-length structure member a negative number will be\n     * returned.\n     */\n    offsetOf(property) {\n        if ('string' !== typeof property) {\n            throw new TypeError('property must be string');\n        }\n        let offset = 0;\n        for (const fd of this.fields) {\n            if (fd.property === property) {\n                return offset;\n            }\n            if (0 > fd.span) {\n                offset = -1;\n            }\n            else if (0 <= offset) {\n                offset += fd.span;\n            }\n        }\n        return undefined;\n    }\n}\nexports.Structure = Structure;\n/**\n * An object that can provide a {@link\n * Union#discriminator|discriminator} API for {@link Union}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * UnionDiscriminator#encode|encode} or {@link\n * UnionDiscriminator#decode|decode} functions.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}.\n *\n * @abstract\n */\nclass UnionDiscriminator {\n    constructor(property) {\n        /** The {@link Layout#property|property} to be used when the\n         * discriminator is referenced in isolation (generally when {@link\n         * Union#decode|Union decode} cannot delegate to a specific\n         * variant). */\n        this.property = property;\n    }\n    /** Analog to {@link Layout#decode|Layout decode} for union discriminators.\n     *\n     * The implementation of this method need not reference the buffer if\n     * variant information is available through other means. */\n    decode(b, offset) {\n        throw new Error('UnionDiscriminator is abstract');\n    }\n    /** Analog to {@link Layout#decode|Layout encode} for union discriminators.\n     *\n     * The implementation of this method need not store the value if\n     * variant information is maintained through other means. */\n    encode(src, b, offset) {\n        throw new Error('UnionDiscriminator is abstract');\n    }\n}\nexports.UnionDiscriminator = UnionDiscriminator;\n/**\n * An object that can provide a {@link\n * UnionDiscriminator|discriminator API} for {@link Union} using an\n * unsigned integral {@link Layout} instance located either inside or\n * outside the union.\n *\n * @param {ExternalLayout} layout - initializes {@link\n * UnionLayoutDiscriminator#layout|layout}.  Must satisfy {@link\n * ExternalLayout#isCount|isCount()}.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}, superseding the property\n * from `layout`, but defaulting to `variant` if neither `property`\n * nor layout provide a property name.\n *\n * @augments {UnionDiscriminator}\n */\nclass UnionLayoutDiscriminator extends UnionDiscriminator {\n    constructor(layout, property) {\n        if (!((layout instanceof ExternalLayout)\n            && layout.isCount())) {\n            throw new TypeError('layout must be an unsigned integer ExternalLayout');\n        }\n        super(property || layout.property || 'variant');\n        /** The {@link ExternalLayout} used to access the discriminator\n         * value. */\n        this.layout = layout;\n    }\n    /** Delegate decoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n    decode(b, offset) {\n        return this.layout.decode(b, offset);\n    }\n    /** Delegate encoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n    encode(src, b, offset) {\n        return this.layout.encode(src, b, offset);\n    }\n}\nexports.UnionLayoutDiscriminator = UnionLayoutDiscriminator;\n/**\n * Represent any number of span-compatible layouts.\n *\n * *Factory*: {@link module:Layout.union|union}\n *\n * If the union has a {@link Union#defaultLayout|default layout} that\n * layout must have a non-negative {@link Layout#span|span}.  The span\n * of a fixed-span union includes its {@link\n * Union#discriminator|discriminator} if the variant is a {@link\n * Union#usesPrefixDiscriminator|prefix of the union}, plus the span\n * of its {@link Union#defaultLayout|default layout}.\n *\n * If the union does not have a default layout then the encoded span\n * of the union depends on the encoded span of its variant (which may\n * be fixed or variable).\n *\n * {@link VariantLayout#layout|Variant layout}s are added through\n * {@link Union#addVariant|addVariant}.  If the union has a default\n * layout, the span of the {@link VariantLayout#layout|layout\n * contained by the variant} must not exceed the span of the {@link\n * Union#defaultLayout|default layout} (minus the span of a {@link\n * Union#usesPrefixDiscriminator|prefix disriminator}, if used).  The\n * span of the variant will equal the span of the union itself.\n *\n * The variant for a buffer can only be identified from the {@link\n * Union#discriminator|discriminator} {@link\n * UnionDiscriminator#property|property} (in the case of the {@link\n * Union#defaultLayout|default layout}), or by using {@link\n * Union#getVariant|getVariant} and examining the resulting {@link\n * VariantLayout} instance.\n *\n * A variant compatible with a JavaScript object can be identified\n * using {@link Union#getSourceVariant|getSourceVariant}.\n *\n * @param {(UnionDiscriminator|ExternalLayout|Layout)} discr - How to\n * identify the layout used to interpret the union contents.  The\n * parameter must be an instance of {@link UnionDiscriminator}, an\n * {@link ExternalLayout} that satisfies {@link\n * ExternalLayout#isCount|isCount()}, or {@link UInt} (or {@link\n * UIntBE}).  When a non-external layout element is passed the layout\n * appears at the start of the union.  In all cases the (synthesized)\n * {@link UnionDiscriminator} instance is recorded as {@link\n * Union#discriminator|discriminator}.\n *\n * @param {(Layout|null)} defaultLayout - initializer for {@link\n * Union#defaultLayout|defaultLayout}.  If absent defaults to `null`.\n * If `null` there is no default layout: the union has data-dependent\n * length and attempts to decode or encode unrecognized variants will\n * throw an exception.  A {@link Layout} instance must have a\n * non-negative {@link Layout#span|span}, and if it lacks a {@link\n * Layout#property|property} the {@link\n * Union#defaultLayout|defaultLayout} will be a {@link\n * Layout#replicate|replica} with property `content`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Union extends Layout {\n    constructor(discr, defaultLayout, property) {\n        let discriminator;\n        if ((discr instanceof UInt)\n            || (discr instanceof UIntBE)) {\n            discriminator = new UnionLayoutDiscriminator(new OffsetLayout(discr));\n        }\n        else if ((discr instanceof ExternalLayout)\n            && discr.isCount()) {\n            discriminator = new UnionLayoutDiscriminator(discr);\n        }\n        else if (!(discr instanceof UnionDiscriminator)) {\n            throw new TypeError('discr must be a UnionDiscriminator '\n                + 'or an unsigned integer layout');\n        }\n        else {\n            discriminator = discr;\n        }\n        if (undefined === defaultLayout) {\n            defaultLayout = null;\n        }\n        if (!((null === defaultLayout)\n            || (defaultLayout instanceof Layout))) {\n            throw new TypeError('defaultLayout must be null or a Layout');\n        }\n        if (null !== defaultLayout) {\n            if (0 > defaultLayout.span) {\n                throw new Error('defaultLayout must have constant span');\n            }\n            if (undefined === defaultLayout.property) {\n                defaultLayout = defaultLayout.replicate('content');\n            }\n        }\n        /* The union span can be estimated only if there's a default\n         * layout.  The union spans its default layout, plus any prefix\n         * variant layout.  By construction both layouts, if present, have\n         * non-negative span. */\n        let span = -1;\n        if (defaultLayout) {\n            span = defaultLayout.span;\n            if ((0 <= span) && ((discr instanceof UInt)\n                || (discr instanceof UIntBE))) {\n                span += discriminator.layout.span;\n            }\n        }\n        super(span, property);\n        /** The interface for the discriminator value in isolation.\n         *\n         * This a {@link UnionDiscriminator} either passed to the\n         * constructor or synthesized from the `discr` constructor\n         * argument.  {@link\n         * Union#usesPrefixDiscriminator|usesPrefixDiscriminator} will be\n         * `true` iff the `discr` parameter was a non-offset {@link\n         * Layout} instance. */\n        this.discriminator = discriminator;\n        /** `true` if the {@link Union#discriminator|discriminator} is the\n         * first field in the union.\n         *\n         * If `false` the discriminator is obtained from somewhere\n         * else. */\n        this.usesPrefixDiscriminator = (discr instanceof UInt)\n            || (discr instanceof UIntBE);\n        /** The layout for non-discriminator content when the value of the\n         * discriminator is not recognized.\n         *\n         * This is the value passed to the constructor.  It is\n         * structurally equivalent to the second component of {@link\n         * Union#layout|layout} but may have a different property\n         * name. */\n        this.defaultLayout = defaultLayout;\n        /** A registry of allowed variants.\n         *\n         * The keys are unsigned integers which should be compatible with\n         * {@link Union.discriminator|discriminator}.  The property value\n         * is the corresponding {@link VariantLayout} instances assigned\n         * to this union by {@link Union#addVariant|addVariant}.\n         *\n         * **NOTE** The registry remains mutable so that variants can be\n         * {@link Union#addVariant|added} at any time.  Users should not\n         * manipulate the content of this property. */\n        this.registry = {};\n        /* Private variable used when invoking getSourceVariant */\n        let boundGetSourceVariant = this.defaultGetSourceVariant.bind(this);\n        /** Function to infer the variant selected by a source object.\n         *\n         * Defaults to {@link\n         * Union#defaultGetSourceVariant|defaultGetSourceVariant} but may\n         * be overridden using {@link\n         * Union#configGetSourceVariant|configGetSourceVariant}.\n         *\n         * @param {Object} src - as with {@link\n         * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n         *\n         * @returns {(undefined|VariantLayout)} The default variant\n         * (`undefined`) or first registered variant that uses a property\n         * available in `src`. */\n        this.getSourceVariant = function (src) {\n            return boundGetSourceVariant(src);\n        };\n        /** Function to override the implementation of {@link\n         * Union#getSourceVariant|getSourceVariant}.\n         *\n         * Use this if the desired variant cannot be identified using the\n         * algorithm of {@link\n         * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n         *\n         * **NOTE** The provided function will be invoked bound to this\n         * Union instance, providing local access to {@link\n         * Union#registry|registry}.\n         *\n         * @param {Function} gsv - a function that follows the API of\n         * {@link Union#defaultGetSourceVariant|defaultGetSourceVariant}. */\n        this.configGetSourceVariant = function (gsv) {\n            boundGetSourceVariant = gsv.bind(this);\n        };\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        if (0 <= this.span) {\n            return this.span;\n        }\n        /* Default layouts always have non-negative span, so we don't have\n         * one and we have to recognize the variant which will in turn\n         * determine the span. */\n        const vlo = this.getVariant(b, offset);\n        if (!vlo) {\n            throw new Error('unable to determine span for unrecognized variant');\n        }\n        return vlo.getSpan(b, offset);\n    }\n    /**\n     * Method to infer a registered Union variant compatible with `src`.\n     *\n     * The first satisfied rule in the following sequence defines the\n     * return value:\n     * * If `src` has properties matching the Union discriminator and\n     *   the default layout, `undefined` is returned regardless of the\n     *   value of the discriminator property (this ensures the default\n     *   layout will be used);\n     * * If `src` has a property matching the Union discriminator, the\n     *   value of the discriminator identifies a registered variant, and\n     *   either (a) the variant has no layout, or (b) `src` has the\n     *   variant's property, then the variant is returned (because the\n     *   source satisfies the constraints of the variant it identifies);\n     * * If `src` does not have a property matching the Union\n     *   discriminator, but does have a property matching a registered\n     *   variant, then the variant is returned (because the source\n     *   matches a variant without an explicit conflict);\n     * * An error is thrown (because we either can't identify a variant,\n     *   or we were explicitly told the variant but can't satisfy it).\n     *\n     * @param {Object} src - an object presumed to be compatible with\n     * the content of the Union.\n     *\n     * @return {(undefined|VariantLayout)} - as described above.\n     *\n     * @throws {Error} - if `src` cannot be associated with a default or\n     * registered variant.\n     */\n    defaultGetSourceVariant(src) {\n        if (Object.prototype.hasOwnProperty.call(src, this.discriminator.property)) {\n            if (this.defaultLayout && this.defaultLayout.property\n                && Object.prototype.hasOwnProperty.call(src, this.defaultLayout.property)) {\n                return undefined;\n            }\n            const vlo = this.registry[src[this.discriminator.property]];\n            if (vlo\n                && ((!vlo.layout)\n                    || (vlo.property && Object.prototype.hasOwnProperty.call(src, vlo.property)))) {\n                return vlo;\n            }\n        }\n        else {\n            for (const tag in this.registry) {\n                const vlo = this.registry[tag];\n                if (vlo.property && Object.prototype.hasOwnProperty.call(src, vlo.property)) {\n                    return vlo;\n                }\n            }\n        }\n        throw new Error('unable to infer src variant');\n    }\n    /** Implement {@link Layout#decode|decode} for {@link Union}.\n     *\n     * If the variant is {@link Union#addVariant|registered} the return\n     * value is an instance of that variant, with no explicit\n     * discriminator.  Otherwise the {@link Union#defaultLayout|default\n     * layout} is used to decode the content. */\n    decode(b, offset = 0) {\n        let dest;\n        const dlo = this.discriminator;\n        const discr = dlo.decode(b, offset);\n        const clo = this.registry[discr];\n        if (undefined === clo) {\n            const defaultLayout = this.defaultLayout;\n            let contentOffset = 0;\n            if (this.usesPrefixDiscriminator) {\n                contentOffset = dlo.layout.span;\n            }\n            dest = this.makeDestinationObject();\n            dest[dlo.property] = discr;\n            // defaultLayout.property can be undefined, but this is allowed by buffer-layout\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            dest[defaultLayout.property] = defaultLayout.decode(b, offset + contentOffset);\n        }\n        else {\n            dest = clo.decode(b, offset);\n        }\n        return dest;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Union}.\n     *\n     * This API assumes the `src` object is consistent with the union's\n     * {@link Union#defaultLayout|default layout}.  To encode variants\n     * use the appropriate variant-specific {@link VariantLayout#encode}\n     * method. */\n    encode(src, b, offset = 0) {\n        const vlo = this.getSourceVariant(src);\n        if (undefined === vlo) {\n            const dlo = this.discriminator;\n            // this.defaultLayout is not undefined when vlo is undefined\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const clo = this.defaultLayout;\n            let contentOffset = 0;\n            if (this.usesPrefixDiscriminator) {\n                contentOffset = dlo.layout.span;\n            }\n            dlo.encode(src[dlo.property], b, offset);\n            // clo.property is not undefined when vlo is undefined\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            return contentOffset + clo.encode(src[clo.property], b, offset + contentOffset);\n        }\n        return vlo.encode(src, b, offset);\n    }\n    /** Register a new variant structure within a union.  The newly\n     * created variant is returned.\n     *\n     * @param {Number} variant - initializer for {@link\n     * VariantLayout#variant|variant}.\n     *\n     * @param {Layout} layout - initializer for {@link\n     * VariantLayout#layout|layout}.\n     *\n     * @param {String} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {VariantLayout} */\n    addVariant(variant, layout, property) {\n        const rv = new VariantLayout(this, variant, layout, property);\n        this.registry[variant] = rv;\n        return rv;\n    }\n    /**\n     * Get the layout associated with a registered variant.\n     *\n     * If `vb` does not produce a registered variant the function returns\n     * `undefined`.\n     *\n     * @param {(Number|Uint8Array)} vb - either the variant number, or a\n     * buffer from which the discriminator is to be read.\n     *\n     * @param {Number} offset - offset into `vb` for the start of the\n     * union.  Used only when `vb` is an instance of {Uint8Array}.\n     *\n     * @return {({VariantLayout}|undefined)}\n     */\n    getVariant(vb, offset = 0) {\n        let variant;\n        if (vb instanceof Uint8Array) {\n            variant = this.discriminator.decode(vb, offset);\n        }\n        else {\n            variant = vb;\n        }\n        return this.registry[variant];\n    }\n}\nexports.Union = Union;\n/**\n * Represent a specific variant within a containing union.\n *\n * **NOTE** The {@link Layout#span|span} of the variant may include\n * the span of the {@link Union#discriminator|discriminator} used to\n * identify it, but values read and written using the variant strictly\n * conform to the content of {@link VariantLayout#layout|layout}.\n *\n * **NOTE** User code should not invoke this constructor directly.  Use\n * the union {@link Union#addVariant|addVariant} helper method.\n *\n * @param {Union} union - initializer for {@link\n * VariantLayout#union|union}.\n *\n * @param {Number} variant - initializer for {@link\n * VariantLayout#variant|variant}.\n *\n * @param {Layout} [layout] - initializer for {@link\n * VariantLayout#layout|layout}.  If absent the variant carries no\n * data.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.  Unlike many other layouts, variant\n * layouts normally include a property name so they can be identified\n * within their containing {@link Union}.  The property identifier may\n * be absent only if `layout` is is absent.\n *\n * @augments {Layout}\n */\nclass VariantLayout extends Layout {\n    constructor(union, variant, layout, property) {\n        if (!(union instanceof Union)) {\n            throw new TypeError('union must be a Union');\n        }\n        if ((!Number.isInteger(variant)) || (0 > variant)) {\n            throw new TypeError('variant must be a (non-negative) integer');\n        }\n        if (('string' === typeof layout)\n            && (undefined === property)) {\n            property = layout;\n            layout = null;\n        }\n        if (layout) {\n            if (!(layout instanceof Layout)) {\n                throw new TypeError('layout must be a Layout');\n            }\n            if ((null !== union.defaultLayout)\n                && (0 <= layout.span)\n                && (layout.span > union.defaultLayout.span)) {\n                throw new Error('variant span exceeds span of containing union');\n            }\n            if ('string' !== typeof property) {\n                throw new TypeError('variant must have a String property');\n            }\n        }\n        let span = union.span;\n        if (0 > union.span) {\n            span = layout ? layout.span : 0;\n            if ((0 <= span) && union.usesPrefixDiscriminator) {\n                span += union.discriminator.layout.span;\n            }\n        }\n        super(span, property);\n        /** The {@link Union} to which this variant belongs. */\n        this.union = union;\n        /** The unsigned integral value identifying this variant within\n         * the {@link Union#discriminator|discriminator} of the containing\n         * union. */\n        this.variant = variant;\n        /** The {@link Layout} to be used when reading/writing the\n         * non-discriminator part of the {@link\n         * VariantLayout#union|union}.  If `null` the variant carries no\n         * data. */\n        this.layout = layout || null;\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        if (0 <= this.span) {\n            /* Will be equal to the containing union span if that is not\n             * variable. */\n            return this.span;\n        }\n        let contentOffset = 0;\n        if (this.union.usesPrefixDiscriminator) {\n            contentOffset = this.union.discriminator.layout.span;\n        }\n        /* Span is defined solely by the variant (and prefix discriminator) */\n        let span = 0;\n        if (this.layout) {\n            span = this.layout.getSpan(b, offset + contentOffset);\n        }\n        return contentOffset + span;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const dest = this.makeDestinationObject();\n        if (this !== this.union.getVariant(b, offset)) {\n            throw new Error('variant mismatch');\n        }\n        let contentOffset = 0;\n        if (this.union.usesPrefixDiscriminator) {\n            contentOffset = this.union.discriminator.layout.span;\n        }\n        if (this.layout) {\n            dest[this.property] = this.layout.decode(b, offset + contentOffset);\n        }\n        else if (this.property) {\n            dest[this.property] = true;\n        }\n        else if (this.union.usesPrefixDiscriminator) {\n            dest[this.union.discriminator.property] = this.variant;\n        }\n        return dest;\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        let contentOffset = 0;\n        if (this.union.usesPrefixDiscriminator) {\n            contentOffset = this.union.discriminator.layout.span;\n        }\n        if (this.layout\n            && (!Object.prototype.hasOwnProperty.call(src, this.property))) {\n            throw new TypeError('variant lacks property ' + this.property);\n        }\n        this.union.discriminator.encode(this.variant, b, offset);\n        let span = contentOffset;\n        if (this.layout) {\n            this.layout.encode(src[this.property], b, offset + contentOffset);\n            span += this.layout.getSpan(b, offset + contentOffset);\n            if ((0 <= this.union.span)\n                && (span > this.union.span)) {\n                throw new Error('encoded variant overruns containing union');\n            }\n        }\n        return span;\n    }\n    /** Delegate {@link Layout#fromArray|fromArray} to {@link\n     * VariantLayout#layout|layout}. */\n    fromArray(values) {\n        if (this.layout) {\n            return this.layout.fromArray(values);\n        }\n        return undefined;\n    }\n}\nexports.VariantLayout = VariantLayout;\n/** JavaScript chose to define bitwise operations as operating on\n * signed 32-bit values in 2's complement form, meaning any integer\n * with bit 31 set is going to look negative.  For right shifts that's\n * not a problem, because `>>>` is a logical shift, but for every\n * other bitwise operator we have to compensate for possible negative\n * results. */\nfunction fixBitwiseResult(v) {\n    if (0 > v) {\n        v += 0x100000000;\n    }\n    return v;\n}\n/**\n * Contain a sequence of bit fields as an unsigned integer.\n *\n * *Factory*: {@link module:Layout.bits|bits}\n *\n * This is a container element; within it there are {@link BitField}\n * instances that provide the extracted properties.  The container\n * simply defines the aggregate representation and its bit ordering.\n * The representation is an object containing properties with numeric\n * or {@link Boolean} values.\n *\n * {@link BitField}s are added with the {@link\n * BitStructure#addField|addField} and {@link\n * BitStructure#addBoolean|addBoolean} methods.\n\n * @param {Layout} word - initializer for {@link\n * BitStructure#word|word}.  The parameter must be an instance of\n * {@link UInt} (or {@link UIntBE}) that is no more than 4 bytes wide.\n *\n * @param {bool} [msb] - `true` if the bit numbering starts at the\n * most significant bit of the containing word; `false` (default) if\n * it starts at the least significant bit of the containing word.  If\n * the parameter at this position is a string and `property` is\n * `undefined` the value of this argument will instead be used as the\n * value of `property`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass BitStructure extends Layout {\n    constructor(word, msb, property) {\n        if (!((word instanceof UInt)\n            || (word instanceof UIntBE))) {\n            throw new TypeError('word must be a UInt or UIntBE layout');\n        }\n        if (('string' === typeof msb)\n            && (undefined === property)) {\n            property = msb;\n            msb = false;\n        }\n        if (4 < word.span) {\n            throw new RangeError('word cannot exceed 32 bits');\n        }\n        super(word.span, property);\n        /** The layout used for the packed value.  {@link BitField}\n         * instances are packed sequentially depending on {@link\n         * BitStructure#msb|msb}. */\n        this.word = word;\n        /** Whether the bit sequences are packed starting at the most\n         * significant bit growing down (`true`), or the least significant\n         * bit growing up (`false`).\n         *\n         * **NOTE** Regardless of this value, the least significant bit of\n         * any {@link BitField} value is the least significant bit of the\n         * corresponding section of the packed value. */\n        this.msb = !!msb;\n        /** The sequence of {@link BitField} layouts that comprise the\n         * packed structure.\n         *\n         * **NOTE** The array remains mutable to allow fields to be {@link\n         * BitStructure#addField|added} after construction.  Users should\n         * not manipulate the content of this property.*/\n        this.fields = [];\n        /* Storage for the value.  Capture a variable instead of using an\n         * instance property because we don't want anything to change the\n         * value without going through the mutator. */\n        let value = 0;\n        this._packedSetValue = function (v) {\n            value = fixBitwiseResult(v);\n            return this;\n        };\n        this._packedGetValue = function () {\n            return value;\n        };\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const dest = this.makeDestinationObject();\n        const value = this.word.decode(b, offset);\n        this._packedSetValue(value);\n        for (const fd of this.fields) {\n            if (undefined !== fd.property) {\n                dest[fd.property] = fd.decode(b);\n            }\n        }\n        return dest;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link BitStructure}.\n     *\n     * If `src` is missing a property for a member with a defined {@link\n     * Layout#property|property} the corresponding region of the packed\n     * value is left unmodified.  Unused bits are also left unmodified. */\n    encode(src, b, offset = 0) {\n        const value = this.word.decode(b, offset);\n        this._packedSetValue(value);\n        for (const fd of this.fields) {\n            if (undefined !== fd.property) {\n                const fv = src[fd.property];\n                if (undefined !== fv) {\n                    fd.encode(fv);\n                }\n            }\n        }\n        return this.word.encode(this._packedGetValue(), b, offset);\n    }\n    /** Register a new bitfield with a containing bit structure.  The\n     * resulting bitfield is returned.\n     *\n     * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n     *\n     * @param {string} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {BitField} */\n    addField(bits, property) {\n        const bf = new BitField(this, bits, property);\n        this.fields.push(bf);\n        return bf;\n    }\n    /** As with {@link BitStructure#addField|addField} for single-bit\n     * fields with `boolean` value representation.\n     *\n     * @param {string} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {Boolean} */\n    // `Boolean` conflicts with the native primitive type\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    addBoolean(property) {\n        // This is my Boolean, not the Javascript one.\n        const bf = new Boolean(this, property);\n        this.fields.push(bf);\n        return bf;\n    }\n    /**\n     * Get access to the bit field for a given property.\n     *\n     * @param {String} property - the bit field of interest.\n     *\n     * @return {BitField} - the field associated with `property`, or\n     * undefined if there is no such property.\n     */\n    fieldFor(property) {\n        if ('string' !== typeof property) {\n            throw new TypeError('property must be string');\n        }\n        for (const fd of this.fields) {\n            if (fd.property === property) {\n                return fd;\n            }\n        }\n        return undefined;\n    }\n}\nexports.BitStructure = BitStructure;\n/**\n * Represent a sequence of bits within a {@link BitStructure}.\n *\n * All bit field values are represented as unsigned integers.\n *\n * **NOTE** User code should not invoke this constructor directly.\n * Use the container {@link BitStructure#addField|addField} helper\n * method.\n *\n * **NOTE** BitField instances are not instances of {@link Layout}\n * since {@link Layout#span|span} measures 8-bit units.\n *\n * @param {BitStructure} container - initializer for {@link\n * BitField#container|container}.\n *\n * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n */\nclass BitField {\n    constructor(container, bits, property) {\n        if (!(container instanceof BitStructure)) {\n            throw new TypeError('container must be a BitStructure');\n        }\n        if ((!Number.isInteger(bits)) || (0 >= bits)) {\n            throw new TypeError('bits must be positive integer');\n        }\n        const totalBits = 8 * container.span;\n        const usedBits = container.fields.reduce((sum, fd) => sum + fd.bits, 0);\n        if ((bits + usedBits) > totalBits) {\n            throw new Error('bits too long for span remainder ('\n                + (totalBits - usedBits) + ' of '\n                + totalBits + ' remain)');\n        }\n        /** The {@link BitStructure} instance to which this bit field\n         * belongs. */\n        this.container = container;\n        /** The span of this value in bits. */\n        this.bits = bits;\n        /** A mask of {@link BitField#bits|bits} bits isolating value bits\n         * that fit within the field.\n         *\n         * That is, it masks a value that has not yet been shifted into\n         * position within its containing packed integer. */\n        this.valueMask = (1 << bits) - 1;\n        if (32 === bits) { // shifted value out of range\n            this.valueMask = 0xFFFFFFFF;\n        }\n        /** The offset of the value within the containing packed unsigned\n         * integer.  The least significant bit of the packed value is at\n         * offset zero, regardless of bit ordering used. */\n        this.start = usedBits;\n        if (this.container.msb) {\n            this.start = totalBits - usedBits - bits;\n        }\n        /** A mask of {@link BitField#bits|bits} isolating the field value\n         * within the containing packed unsigned integer. */\n        this.wordMask = fixBitwiseResult(this.valueMask << this.start);\n        /** The property name used when this bitfield is represented in an\n         * Object.\n         *\n         * Intended to be functionally equivalent to {@link\n         * Layout#property}.\n         *\n         * If left undefined the corresponding span of bits will be\n         * treated as padding: it will not be mutated by {@link\n         * Layout#encode|encode} nor represented as a property in the\n         * decoded Object. */\n        this.property = property;\n    }\n    /** Store a value into the corresponding subsequence of the containing\n     * bit field. */\n    decode(b, offset) {\n        const word = this.container._packedGetValue();\n        const wordValue = fixBitwiseResult(word & this.wordMask);\n        const value = wordValue >>> this.start;\n        return value;\n    }\n    /** Store a value into the corresponding subsequence of the containing\n     * bit field.\n     *\n     * **NOTE** This is not a specialization of {@link\n     * Layout#encode|Layout.encode} and there is no return value. */\n    encode(value) {\n        if ('number' !== typeof value\n            || !Number.isInteger(value)\n            || (value !== fixBitwiseResult(value & this.valueMask))) {\n            throw new TypeError(nameWithProperty('BitField.encode', this)\n                + ' value must be integer not exceeding ' + this.valueMask);\n        }\n        const word = this.container._packedGetValue();\n        const wordValue = fixBitwiseResult(value << this.start);\n        this.container._packedSetValue(fixBitwiseResult(word & ~this.wordMask)\n            | wordValue);\n    }\n}\nexports.BitField = BitField;\n/**\n * Represent a single bit within a {@link BitStructure} as a\n * JavaScript boolean.\n *\n * **NOTE** User code should not invoke this constructor directly.\n * Use the container {@link BitStructure#addBoolean|addBoolean} helper\n * method.\n *\n * @param {BitStructure} container - initializer for {@link\n * BitField#container|container}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {BitField}\n */\n/* eslint-disable no-extend-native */\nclass Boolean extends BitField {\n    constructor(container, property) {\n        super(container, 1, property);\n    }\n    /** Override {@link BitField#decode|decode} for {@link Boolean|Boolean}.\n     *\n     * @returns {boolean} */\n    decode(b, offset) {\n        return !!super.decode(b, offset);\n    }\n    /** @override */\n    encode(value) {\n        if ('boolean' === typeof value) {\n            // BitField requires integer values\n            value = +value;\n        }\n        super.encode(value);\n    }\n}\nexports.Boolean = Boolean;\n/* eslint-enable no-extend-native */\n/**\n * Contain a fixed-length block of arbitrary data, represented as a\n * Uint8Array.\n *\n * *Factory*: {@link module:Layout.blob|blob}\n *\n * @param {(Number|ExternalLayout)} length - initializes {@link\n * Blob#length|length}.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Blob extends Layout {\n    constructor(length, property) {\n        if (!(((length instanceof ExternalLayout) && length.isCount())\n            || (Number.isInteger(length) && (0 <= length)))) {\n            throw new TypeError('length must be positive integer '\n                + 'or an unsigned integer ExternalLayout');\n        }\n        let span = -1;\n        if (!(length instanceof ExternalLayout)) {\n            span = length;\n        }\n        super(span, property);\n        /** The number of bytes in the blob.\n         *\n         * This may be a non-negative integer, or an instance of {@link\n         * ExternalLayout} that satisfies {@link\n         * ExternalLayout#isCount|isCount()}. */\n        this.length = length;\n    }\n    /** @override */\n    getSpan(b, offset) {\n        let span = this.span;\n        if (0 > span) {\n            span = this.length.decode(b, offset);\n        }\n        return span;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        let span = this.span;\n        if (0 > span) {\n            span = this.length.decode(b, offset);\n        }\n        return uint8ArrayToBuffer(b).slice(offset, offset + span);\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Blob}.\n     *\n     * **NOTE** If {@link Layout#count|count} is an instance of {@link\n     * ExternalLayout} then the length of `src` will be encoded as the\n     * count after `src` is encoded. */\n    encode(src, b, offset) {\n        let span = this.length;\n        if (this.length instanceof ExternalLayout) {\n            span = src.length;\n        }\n        if (!(src instanceof Uint8Array && span === src.length)) {\n            throw new TypeError(nameWithProperty('Blob.encode', this)\n                + ' requires (length ' + span + ') Uint8Array as src');\n        }\n        if ((offset + span) > b.length) {\n            throw new RangeError('encoding overruns Uint8Array');\n        }\n        const srcBuffer = uint8ArrayToBuffer(src);\n        uint8ArrayToBuffer(b).write(srcBuffer.toString('hex'), offset, span, 'hex');\n        if (this.length instanceof ExternalLayout) {\n            this.length.encode(span, b, offset);\n        }\n        return span;\n    }\n}\nexports.Blob = Blob;\n/**\n * Contain a `NUL`-terminated UTF8 string.\n *\n * *Factory*: {@link module:Layout.cstr|cstr}\n *\n * **NOTE** Any UTF8 string that incorporates a zero-valued byte will\n * not be correctly decoded by this layout.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass CString extends Layout {\n    constructor(property) {\n        super(-1, property);\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        checkUint8Array(b);\n        let idx = offset;\n        while ((idx < b.length) && (0 !== b[idx])) {\n            idx += 1;\n        }\n        return 1 + idx - offset;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const span = this.getSpan(b, offset);\n        return uint8ArrayToBuffer(b).slice(offset, offset + span - 1).toString('utf-8');\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        /* Must force this to a string, lest it be a number and the\n         * \"utf8-encoding\" below actually allocate a buffer of length\n         * src */\n        if ('string' !== typeof src) {\n            src = String(src);\n        }\n        const srcb = buffer_1.Buffer.from(src, 'utf8');\n        const span = srcb.length;\n        if ((offset + span) > b.length) {\n            throw new RangeError('encoding overruns Buffer');\n        }\n        const buffer = uint8ArrayToBuffer(b);\n        srcb.copy(buffer, offset);\n        buffer[offset + span] = 0;\n        return span + 1;\n    }\n}\nexports.CString = CString;\n/**\n * Contain a UTF8 string with implicit length.\n *\n * *Factory*: {@link module:Layout.utf8|utf8}\n *\n * **NOTE** Because the length is implicit in the size of the buffer\n * this layout should be used only in isolation, or in a situation\n * where the length can be expressed by operating on a slice of the\n * containing buffer.\n *\n * @param {Number} [maxSpan] - the maximum length allowed for encoded\n * string content.  If not provided there is no bound on the allowed\n * content.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UTF8 extends Layout {\n    constructor(maxSpan, property) {\n        if (('string' === typeof maxSpan) && (undefined === property)) {\n            property = maxSpan;\n            maxSpan = undefined;\n        }\n        if (undefined === maxSpan) {\n            maxSpan = -1;\n        }\n        else if (!Number.isInteger(maxSpan)) {\n            throw new TypeError('maxSpan must be an integer');\n        }\n        super(-1, property);\n        /** The maximum span of the layout in bytes.\n         *\n         * Positive values are generally expected.  Zero is abnormal.\n         * Attempts to encode or decode a value that exceeds this length\n         * will throw a `RangeError`.\n         *\n         * A negative value indicates that there is no bound on the length\n         * of the content. */\n        this.maxSpan = maxSpan;\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        checkUint8Array(b);\n        return b.length - offset;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const span = this.getSpan(b, offset);\n        if ((0 <= this.maxSpan)\n            && (this.maxSpan < span)) {\n            throw new RangeError('text length exceeds maxSpan');\n        }\n        return uint8ArrayToBuffer(b).slice(offset, offset + span).toString('utf-8');\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        /* Must force this to a string, lest it be a number and the\n         * \"utf8-encoding\" below actually allocate a buffer of length\n         * src */\n        if ('string' !== typeof src) {\n            src = String(src);\n        }\n        const srcb = buffer_1.Buffer.from(src, 'utf8');\n        const span = srcb.length;\n        if ((0 <= this.maxSpan)\n            && (this.maxSpan < span)) {\n            throw new RangeError('text length exceeds maxSpan');\n        }\n        if ((offset + span) > b.length) {\n            throw new RangeError('encoding overruns Buffer');\n        }\n        srcb.copy(uint8ArrayToBuffer(b), offset);\n        return span;\n    }\n}\nexports.UTF8 = UTF8;\n/**\n * Contain a constant value.\n *\n * This layout may be used in cases where a JavaScript value can be\n * inferred without an expression in the binary encoding.  An example\n * would be a {@link VariantLayout|variant layout} where the content\n * is implied by the union {@link Union#discriminator|discriminator}.\n *\n * @param {Object|Number|String} value - initializer for {@link\n * Constant#value|value}.  If the value is an object (or array) and\n * the application intends the object to remain unchanged regardless\n * of what is done to values decoded by this layout, the value should\n * be frozen prior passing it to this constructor.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Constant extends Layout {\n    constructor(value, property) {\n        super(0, property);\n        /** The value produced by this constant when the layout is {@link\n         * Constant#decode|decoded}.\n         *\n         * Any JavaScript value including `null` and `undefined` is\n         * permitted.\n         *\n         * **WARNING** If `value` passed in the constructor was not\n         * frozen, it is possible for users of decoded values to change\n         * the content of the value. */\n        this.value = value;\n    }\n    /** @override */\n    decode(b, offset) {\n        return this.value;\n    }\n    /** @override */\n    encode(src, b, offset) {\n        /* Constants take no space */\n        return 0;\n    }\n}\nexports.Constant = Constant;\n/** Factory for {@link GreedyCount}. */\nexports.greedy = ((elementSpan, property) => new GreedyCount(elementSpan, property));\n/** Factory for {@link OffsetLayout}. */\nexports.offset = ((layout, offset, property) => new OffsetLayout(layout, offset, property));\n/** Factory for {@link UInt|unsigned int layouts} spanning one\n * byte. */\nexports.u8 = ((property) => new UInt(1, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning two bytes. */\nexports.u16 = ((property) => new UInt(2, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning three bytes. */\nexports.u24 = ((property) => new UInt(3, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning four bytes. */\nexports.u32 = ((property) => new UInt(4, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning five bytes. */\nexports.u40 = ((property) => new UInt(5, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning six bytes. */\nexports.u48 = ((property) => new UInt(6, property));\n/** Factory for {@link NearUInt64|little-endian unsigned int\n * layouts} interpreted as Numbers. */\nexports.nu64 = ((property) => new NearUInt64(property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning two bytes. */\nexports.u16be = ((property) => new UIntBE(2, property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning three bytes. */\nexports.u24be = ((property) => new UIntBE(3, property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning four bytes. */\nexports.u32be = ((property) => new UIntBE(4, property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning five bytes. */\nexports.u40be = ((property) => new UIntBE(5, property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning six bytes. */\nexports.u48be = ((property) => new UIntBE(6, property));\n/** Factory for {@link NearUInt64BE|big-endian unsigned int\n * layouts} interpreted as Numbers. */\nexports.nu64be = ((property) => new NearUInt64BE(property));\n/** Factory for {@link Int|signed int layouts} spanning one\n * byte. */\nexports.s8 = ((property) => new Int(1, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning two bytes. */\nexports.s16 = ((property) => new Int(2, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning three bytes. */\nexports.s24 = ((property) => new Int(3, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning four bytes. */\nexports.s32 = ((property) => new Int(4, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning five bytes. */\nexports.s40 = ((property) => new Int(5, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning six bytes. */\nexports.s48 = ((property) => new Int(6, property));\n/** Factory for {@link NearInt64|little-endian signed int layouts}\n * interpreted as Numbers. */\nexports.ns64 = ((property) => new NearInt64(property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning two bytes. */\nexports.s16be = ((property) => new IntBE(2, property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning three bytes. */\nexports.s24be = ((property) => new IntBE(3, property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning four bytes. */\nexports.s32be = ((property) => new IntBE(4, property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning five bytes. */\nexports.s40be = ((property) => new IntBE(5, property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning six bytes. */\nexports.s48be = ((property) => new IntBE(6, property));\n/** Factory for {@link NearInt64BE|big-endian signed int layouts}\n * interpreted as Numbers. */\nexports.ns64be = ((property) => new NearInt64BE(property));\n/** Factory for {@link Float|little-endian 32-bit floating point} values. */\nexports.f32 = ((property) => new Float(property));\n/** Factory for {@link FloatBE|big-endian 32-bit floating point} values. */\nexports.f32be = ((property) => new FloatBE(property));\n/** Factory for {@link Double|little-endian 64-bit floating point} values. */\nexports.f64 = ((property) => new Double(property));\n/** Factory for {@link DoubleBE|big-endian 64-bit floating point} values. */\nexports.f64be = ((property) => new DoubleBE(property));\n/** Factory for {@link Structure} values. */\nexports.struct = ((fields, property, decodePrefixes) => new Structure(fields, property, decodePrefixes));\n/** Factory for {@link BitStructure} values. */\nexports.bits = ((word, msb, property) => new BitStructure(word, msb, property));\n/** Factory for {@link Sequence} values. */\nexports.seq = ((elementLayout, count, property) => new Sequence(elementLayout, count, property));\n/** Factory for {@link Union} values. */\nexports.union = ((discr, defaultLayout, property) => new Union(discr, defaultLayout, property));\n/** Factory for {@link UnionLayoutDiscriminator} values. */\nexports.unionLayoutDiscriminator = ((layout, property) => new UnionLayoutDiscriminator(layout, property));\n/** Factory for {@link Blob} values. */\nexports.blob = ((length, property) => new Blob(length, property));\n/** Factory for {@link CString} values. */\nexports.cstr = ((property) => new CString(property));\n/** Factory for {@link UTF8} values. */\nexports.utf8 = ((maxSpan, property) => new UTF8(maxSpan, property));\n/** Factory for {@link Constant} values. */\nexports.constant = ((value, property) => new Constant(value, property));\n//# sourceMappingURL=Layout.js.map","function number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`positive integer expected, not ${n}`);\n}\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`boolean expected, not ${b}`);\n}\n// copied from utils\nexport function isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\nfunction bytes(b, ...lengths) {\n    if (!isBytes(b))\n        throw new Error('Uint8Array expected');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);\n}\nfunction hash(h) {\n    if (typeof h !== 'function' || typeof h.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(h.outputLen);\n    number(h.blockLen);\n}\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nexport { number, bool, bytes, hash, exists, output };\nconst assert = { number, bool, bytes, hash, exists, output };\nexport default assert;\n//# sourceMappingURL=_assert.js.map","export const crypto = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n//# sourceMappingURL=crypto.js.map","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\nimport { bytes as abytes } from './_assert.js';\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nexport function isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\n// Cast array to different type\nexport const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nexport const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\n// The rotate left (circular left shift) operation for uint32\nexport const rotl = (word, shift) => (word << shift) | ((word >>> (32 - shift)) >>> 0);\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// The byte swap operation for uint32\nexport const byteSwap = (word) => ((word << 24) & 0xff000000) |\n    ((word << 8) & 0xff0000) |\n    ((word >>> 8) & 0xff00) |\n    ((word >>> 24) & 0xff);\n// Conditionally byte swap if on a big-endian platform\nexport const byteSwapIfBE = isLE ? (n) => n : (n) => byteSwap(n);\n// In place byte swap for Uint32Array\nexport function byteSwap32(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        arr[i] = byteSwap(arr[i]);\n    }\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    abytes(bytes);\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };\nfunction asciiToBase16(char) {\n    if (char >= asciis._0 && char <= asciis._9)\n        return char - asciis._0;\n    if (char >= asciis._A && char <= asciis._F)\n        return char - (asciis._A - 10);\n    if (char >= asciis._a && char <= asciis._f)\n        return char - (asciis._a - 10);\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    abytes(data);\n    return data;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// For runtime check if class implements interface\nexport class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nconst toStr = {}.toString;\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n        throw new Error('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexport function wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nexport function wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexport function wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto && typeof crypto.getRandomValues === 'function') {\n        return crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map","import { exists, output } from './_assert.js';\nimport { Hash, createView, toBytes } from './utils.js';\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Choice: a ? b : c\nexport const Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nexport const Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport class HashMD extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        exists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        exists(this);\n        output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in\n        // current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n//# sourceMappingURL=_md.js.map","const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nconst rotr32L = (h, _l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nexport { fromBig, split, toBig, shrSH, shrSL, rotrSH, rotrSL, rotrBH, rotrBL, rotr32H, rotr32L, rotlSH, rotlSL, rotlBH, rotlBL, add, add3L, add3H, add4L, add4H, add5H, add5L, };\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n//# sourceMappingURL=_u64.js.map","import { HashMD } from './_md.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (() => u64.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n))))();\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\nexport class SHA512 extends HashMD {\n    constructor() {\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n            const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n            const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n            const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n            const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64.add3L(T1l, sigma0l, MAJl);\n            Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nclass SHA512_224 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x8c3d37c8 | 0;\n        this.Al = 0x19544da2 | 0;\n        this.Bh = 0x73e19966 | 0;\n        this.Bl = 0x89dcd4d6 | 0;\n        this.Ch = 0x1dfab7ae | 0;\n        this.Cl = 0x32ff9c82 | 0;\n        this.Dh = 0x679dd514 | 0;\n        this.Dl = 0x582f9fcf | 0;\n        this.Eh = 0x0f6d2b69 | 0;\n        this.El = 0x7bd44da8 | 0;\n        this.Fh = 0x77e36f73 | 0;\n        this.Fl = 0x04c48942 | 0;\n        this.Gh = 0x3f9d85a8 | 0;\n        this.Gl = 0x6a1d36c8 | 0;\n        this.Hh = 0x1112e6ad | 0;\n        this.Hl = 0x91d692a1 | 0;\n        this.outputLen = 28;\n    }\n}\nclass SHA512_256 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nclass SHA384 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nexport const sha512 = /* @__PURE__ */ wrapConstructor(() => new SHA512());\nexport const sha512_224 = /* @__PURE__ */ wrapConstructor(() => new SHA512_224());\nexport const sha512_256 = /* @__PURE__ */ wrapConstructor(() => new SHA512_256());\nexport const sha384 = /* @__PURE__ */ wrapConstructor(() => new SHA384());\n//# sourceMappingURL=sha512.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nexport function isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\nexport function abytes(item) {\n    if (!isBytes(item))\n        throw new Error('Uint8Array expected');\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    abytes(bytes);\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\nexport function numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nexport function hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    // Big Endian\n    return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };\nfunction asciiToBase16(char) {\n    if (char >= asciis._0 && char <= asciis._9)\n        return char - asciis._0;\n    if (char >= asciis._A && char <= asciis._F)\n        return char - (asciis._A - 10);\n    if (char >= asciis._a && char <= asciis._f)\n        return char - (asciis._a - 10);\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2;\n    }\n    return array;\n}\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes) {\n    abytes(bytes);\n    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\nexport function numberToBytesBE(n, len) {\n    return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n) {\n    return hexToBytes(numberToHexUnpadded(n));\n}\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === 'string') {\n        try {\n            res = hexToBytes(hex);\n        }\n        catch (e) {\n            throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n        }\n    }\n    else if (isBytes(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    }\n    else {\n        throw new Error(`${title} must be hex string or Uint8Array`);\n    }\n    const len = res.length;\n    if (typeof expectedLength === 'number' && len !== expectedLength)\n        throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n    return res;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a, b) {\n    if (a.length !== b.length)\n        return false;\n    let diff = 0;\n    for (let i = 0; i < a.length; i++)\n        diff |= a[i] ^ b[i];\n    return diff === 0;\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n) {\n    let len;\n    for (len = 0; n > _0n; n >>= _1n, len += 1)\n        ;\n    return len;\n}\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n, pos) {\n    return (n >> BigInt(pos)) & _1n;\n}\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n, pos, value) {\n    return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n) => (_2n << BigInt(n - 1)) - _1n;\n// DRBG\nconst u8n = (data) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr) => Uint8Array.from(arr); // another shortcut\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== 'number' || hashLen < 2)\n        throw new Error('hashLen must be a number');\n    if (typeof qByteLen !== 'number' || qByteLen < 2)\n        throw new Error('qByteLen must be a number');\n    if (typeof hmacFn !== 'function')\n        throw new Error('hmacFn must be a function');\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = () => {\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n()) => {\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0)\n            return;\n        k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = () => {\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000)\n            throw new Error('drbg: tried 1000 values');\n        let len = 0;\n        const out = [];\n        while (len < qByteLen) {\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes(...out);\n    };\n    const genUntil = (seed, pred) => {\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while (!(res = pred(gen())))\n            reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val) => typeof val === 'bigint',\n    function: (val) => typeof val === 'function',\n    boolean: (val) => typeof val === 'boolean',\n    string: (val) => typeof val === 'string',\n    stringOrUint8Array: (val) => typeof val === 'string' || isBytes(val),\n    isSafeInteger: (val) => Number.isSafeInteger(val),\n    array: (val) => Array.isArray(val),\n    field: (val, object) => object.Fp.isValid(val),\n    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nexport function validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional) => {\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== 'function')\n            throw new Error(`Invalid validator \"${type}\", expected function`);\n        const val = object[fieldName];\n        if (isOptional && val === undefined)\n            return;\n        if (!checkVal(val, object)) {\n            throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))\n        checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))\n        checkField(fieldName, type, true);\n    return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n//# sourceMappingURL=utils.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport { bitMask, numberToBytesBE, numberToBytesLE, bytesToNumberBE, bytesToNumberLE, ensureBytes, validateObject, } from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n// Calculates a modulo b\nexport function mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num, power, modulo) {\n    if (modulo <= _0n || power < _0n)\n        throw new Error('Expected power/modulo > 0');\n    if (modulo === _1n)\n        return _0n;\n    let res = _1n;\n    while (power > _0n) {\n        if (power & _1n)\n            res = (res * num) % modulo;\n        num = (num * num) % modulo;\n        power >>= _1n;\n    }\n    return res;\n}\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x, power, modulo) {\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\n// Inverses number over modulo\nexport function invert(number, modulo) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        // prettier-ignore\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P) {\n    // Legendre constant: used to calculate Legendre symbol (a | p),\n    // which denotes the value of a^((p-1)/2) (mod p).\n    // (a | p) ≡ 1    if a is a square (mod p)\n    // (a | p) ≡ -1   if a is not a square (mod p)\n    // (a | p) ≡ 0    if a ≡ 0 (mod p)\n    const legendreC = (P - _1n) / _2n;\n    let Q, S, Z;\n    // Step 1: By factoring out powers of 2 from p - 1,\n    // find q and s such that p - 1 = q*(2^s) with q odd\n    for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++)\n        ;\n    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n    for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++)\n        ;\n    // Fast-path\n    if (S === 1) {\n        const p1div4 = (P + _1n) / _4n;\n        return function tonelliFast(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Slow-path\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))\n            throw new Error('Cannot find square root');\n        let r = S;\n        // TODO: will fail at Fp2/etc\n        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n        let x = Fp.pow(n, Q1div2); // first guess at the square root\n        let b = Fp.pow(n, Q); // first guess at the fudge factor\n        while (!Fp.eql(b, Fp.ONE)) {\n            if (Fp.eql(b, Fp.ZERO))\n                return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n            // Find m such b^(2^m)==1\n            let m = 1;\n            for (let t2 = Fp.sqr(b); m < r; m++) {\n                if (Fp.eql(t2, Fp.ONE))\n                    break;\n                t2 = Fp.sqr(t2); // t2 *= t2\n            }\n            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n            const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n            g = Fp.sqr(ge); // g = ge * ge\n            x = Fp.mul(x, ge); // x *= ge\n            b = Fp.mul(b, g); // b *= g\n            r = m;\n        }\n        return x;\n    };\n}\nexport function FpSqrt(P) {\n    // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n    // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n    // P ≡ 3 (mod 4)\n    // √n = n^((P+1)/4)\n    if (P % _4n === _3n) {\n        // Not all roots possible!\n        // const ORDER =\n        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n        // const NUM = 72057594037927816n;\n        const p1div4 = (P + _1n) / _4n;\n        return function sqrt3mod4(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            // Throw if root**2 != n\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n    if (P % _8n === _5n) {\n        const c1 = (P - _5n) / _8n;\n        return function sqrt5mod8(Fp, n) {\n            const n2 = Fp.mul(n, _2n);\n            const v = Fp.pow(n2, c1);\n            const nv = Fp.mul(n, v);\n            const i = Fp.mul(Fp.mul(nv, _2n), v);\n            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // P ≡ 9 (mod 16)\n    if (P % _16n === _9n) {\n        // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n        // Means we cannot use sqrt for constants at all!\n        //\n        // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n        // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n        // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n        // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n        // sqrt = (x) => {\n        //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n        //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n        //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n        //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n        //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n        //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n        //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n        //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n        //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n        //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n        // }\n    }\n    // Other cases: Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n}\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\n// prettier-ignore\nconst FIELD_FIELDS = [\n    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n    'eql', 'add', 'sub', 'mul', 'pow', 'div',\n    'addN', 'subN', 'mulN', 'sqrN'\n];\nexport function validateField(field) {\n    const initial = {\n        ORDER: 'bigint',\n        MASK: 'bigint',\n        BYTES: 'isSafeInteger',\n        BITS: 'isSafeInteger',\n    };\n    const opts = FIELD_FIELDS.reduce((map, val) => {\n        map[val] = 'function';\n        return map;\n    }, initial);\n    return validateObject(field, opts);\n}\n// Generic field functions\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow(f, num, power) {\n    // Should have same speed as pow for bigints\n    // TODO: benchmark!\n    if (power < _0n)\n        throw new Error('Expected power > 0');\n    if (power === _0n)\n        return f.ONE;\n    if (power === _1n)\n        return num;\n    let p = f.ONE;\n    let d = num;\n    while (power > _0n) {\n        if (power & _1n)\n            p = f.mul(p, d);\n        d = f.sqr(d);\n        power >>= _1n;\n    }\n    return p;\n}\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch(f, nums) {\n    const tmp = new Array(nums.length);\n    // Walk from first to last, multiply them by each other MOD p\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = acc;\n        return f.mul(acc, num);\n    }, f.ONE);\n    // Invert last element\n    const inverted = f.inv(lastMultiplied);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = f.mul(acc, tmp[i]);\n        return f.mul(acc, num);\n    }, inverted);\n    return tmp;\n}\nexport function FpDiv(f, lhs, rhs) {\n    return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare(f) {\n    const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n    return (x) => {\n        const p = f.pow(x, legendreConst);\n        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n    };\n}\n// CURVE.n lengths\nexport function nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return { nBitLength: _nBitLength, nByteLength };\n}\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(ORDER, bitLen, isLE = false, redef = {}) {\n    if (ORDER <= _0n)\n        throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n    if (BYTES > 2048)\n        throw new Error('Field lengths over 2048 bytes are not supported');\n    const sqrtP = FpSqrt(ORDER);\n    const f = Object.freeze({\n        ORDER,\n        BITS,\n        BYTES,\n        MASK: bitMask(BITS),\n        ZERO: _0n,\n        ONE: _1n,\n        create: (num) => mod(num, ORDER),\n        isValid: (num) => {\n            if (typeof num !== 'bigint')\n                throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num) => num === _0n,\n        isOdd: (num) => (num & _1n) === _1n,\n        neg: (num) => mod(-num, ORDER),\n        eql: (lhs, rhs) => lhs === rhs,\n        sqr: (num) => mod(num * num, ORDER),\n        add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n        pow: (num, power) => FpPow(f, num, power),\n        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num) => num * num,\n        addN: (lhs, rhs) => lhs + rhs,\n        subN: (lhs, rhs) => lhs - rhs,\n        mulN: (lhs, rhs) => lhs * rhs,\n        inv: (num) => invert(num, ORDER),\n        sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n        invertBatch: (lst) => FpInvertBatch(f, lst),\n        // TODO: do we really need constant cmov?\n        // We don't have const-time bigints anyway, so probably will be not very useful\n        cmov: (a, b, c) => (c ? b : a),\n        toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n        fromBytes: (bytes) => {\n            if (bytes.length !== BYTES)\n                throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n            return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n        },\n    });\n    return Object.freeze(f);\n}\nexport function FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nexport function FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nexport function hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = ensureBytes('privateHash', hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n        throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n    const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n}\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder) {\n    if (typeof fieldOrder !== 'bigint')\n        throw new Error('field order must be bigint');\n    const bitLength = fieldOrder.toString(2).length;\n    return Math.ceil(bitLength / 8);\n}\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder) {\n    const length = getFieldBytesLength(fieldOrder);\n    return length + Math.ceil(length / 2);\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key, fieldOrder, isLE = false) {\n    const len = key.length;\n    const fieldLen = getFieldBytesLength(fieldOrder);\n    const minLen = getMinHashLength(fieldOrder);\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n    if (len < 16 || len < minLen || len > 1024)\n        throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n    const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n    const reduced = mod(num, fieldOrder - _1n) + _1n;\n    return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n//# sourceMappingURL=modular.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { validateField, nLength } from './modular.js';\nimport { validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF(c, bits) {\n    const constTimeNegate = (condition, item) => {\n        const neg = item.negate();\n        return condition ? neg : item;\n    };\n    const opts = (W) => {\n        const windows = Math.ceil(bits / W) + 1; // +1, because\n        const windowSize = 2 ** (W - 1); // -1 because we skip zero\n        return { windows, windowSize };\n    };\n    return {\n        constTimeNegate,\n        // non-const time multiplication ladder\n        unsafeLadder(elm, n) {\n            let p = c.ZERO;\n            let d = elm;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        },\n        /**\n         * Creates a wNAF precomputation window. Used for caching.\n         * Default window size is set by `utils.precompute()` and is equal to 8.\n         * Number of precomputed points depends on the curve size:\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n         * - 𝑊 is the window size\n         * - 𝑛 is the bitlength of the curve order.\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n         * @returns precomputed point tables flattened to a single array\n         */\n        precomputeWindow(elm, W) {\n            const { windows, windowSize } = opts(W);\n            const points = [];\n            let p = elm;\n            let base = p;\n            for (let window = 0; window < windows; window++) {\n                base = p;\n                points.push(base);\n                // =1, because we skip zero\n                for (let i = 1; i < windowSize; i++) {\n                    base = base.add(p);\n                    points.push(base);\n                }\n                p = base.double();\n            }\n            return points;\n        },\n        /**\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @returns real and fake (for const-time) points\n         */\n        wNAF(W, precomputes, n) {\n            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n            // But need to carefully remove other checks before wNAF. ORDER == bits here\n            const { windows, windowSize } = opts(W);\n            let p = c.ZERO;\n            let f = c.BASE;\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n            const maxNumber = 2 ** W;\n            const shiftBy = BigInt(W);\n            for (let window = 0; window < windows; window++) {\n                const offset = window * windowSize;\n                // Extract W bits.\n                let wbits = Number(n & mask);\n                // Shift number by W bits.\n                n >>= shiftBy;\n                // If the bits are bigger than max size, we'll split those.\n                // +224 => 256 - 32\n                if (wbits > windowSize) {\n                    wbits -= maxNumber;\n                    n += _1n;\n                }\n                // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n                // there is negate now: it is possible that negated element from low value\n                // would be the same as high element, which will create carry into next window.\n                // It's not obvious how this can fail, but still worth investigating later.\n                // Check if we're onto Zero point.\n                // Add random point inside current window to f.\n                const offset1 = offset;\n                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n                const cond1 = window % 2 !== 0;\n                const cond2 = wbits < 0;\n                if (wbits === 0) {\n                    // The most important part for const-time getPublicKey\n                    f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n                }\n                else {\n                    p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n                }\n            }\n            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n            // Even if the variable is still unused, there are some checks which will\n            // throw an exception, so compiler needs to prove they won't happen, which is hard.\n            // At this point there is a way to F be infinity-point even if p is not,\n            // which makes it less const-time: around 1 bigint multiply.\n            return { p, f };\n        },\n        wNAFCached(P, precomputesMap, n, transform) {\n            // @ts-ignore\n            const W = P._WINDOW_SIZE || 1;\n            // Calculate precomputes on a first run, reuse them after\n            let comp = precomputesMap.get(P);\n            if (!comp) {\n                comp = this.precomputeWindow(P, W);\n                if (W !== 1) {\n                    precomputesMap.set(P, transform(comp));\n                }\n            }\n            return this.wNAF(W, comp, n);\n        },\n    };\n}\nexport function validateBasic(curve) {\n    validateField(curve.Fp);\n    validateObject(curve, {\n        n: 'bigint',\n        h: 'bigint',\n        Gx: 'field',\n        Gy: 'field',\n    }, {\n        nBitLength: 'isSafeInteger',\n        nByteLength: 'isSafeInteger',\n    });\n    // Set defaults\n    return Object.freeze({\n        ...nLength(curve.n, curve.nBitLength),\n        ...curve,\n        ...{ p: curve.Fp.ORDER },\n    });\n}\n//# sourceMappingURL=curve.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Twisted Edwards curve. The formula is: ax² + y² = 1 + dx²y²\nimport { mod } from './modular.js';\nimport * as ut from './utils.js';\nimport { ensureBytes } from './utils.js';\nimport { wNAF, validateBasic } from './curve.js';\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _8n = BigInt(8);\n// verification rule is either zip215 or rfc8032 / nist186-5. Consult fromHex:\nconst VERIFY_DEFAULT = { zip215: true };\nfunction validateOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(curve, {\n        hash: 'function',\n        a: 'bigint',\n        d: 'bigint',\n        randomBytes: 'function',\n    }, {\n        adjustScalarBytes: 'function',\n        domain: 'function',\n        uvRatio: 'function',\n        mapToCurve: 'function',\n    });\n    // Set defaults\n    return Object.freeze({ ...opts });\n}\n// It is not generic twisted curve for now, but ed25519/ed448 generic implementation\nexport function twistedEdwards(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER, prehash: prehash, hash: cHash, randomBytes, nByteLength, h: cofactor, } = CURVE;\n    const MASK = _2n << (BigInt(nByteLength * 8) - _1n);\n    const modP = Fp.create; // Function overrides\n    // sqrt(u/v)\n    const uvRatio = CURVE.uvRatio ||\n        ((u, v) => {\n            try {\n                return { isValid: true, value: Fp.sqrt(u * Fp.inv(v)) };\n            }\n            catch (e) {\n                return { isValid: false, value: _0n };\n            }\n        });\n    const adjustScalarBytes = CURVE.adjustScalarBytes || ((bytes) => bytes); // NOOP\n    const domain = CURVE.domain ||\n        ((data, ctx, phflag) => {\n            if (ctx.length || phflag)\n                throw new Error('Contexts/pre-hash are not supported');\n            return data;\n        }); // NOOP\n    const inBig = (n) => typeof n === 'bigint' && _0n < n; // n in [1..]\n    const inRange = (n, max) => inBig(n) && inBig(max) && n < max; // n in [1..max-1]\n    const in0MaskRange = (n) => n === _0n || inRange(n, MASK); // n in [0..MASK-1]\n    function assertInRange(n, max) {\n        // n in [1..max-1]\n        if (inRange(n, max))\n            return n;\n        throw new Error(`Expected valid scalar < ${max}, got ${typeof n} ${n}`);\n    }\n    function assertGE0(n) {\n        // n in [0..CURVE_ORDER-1]\n        return n === _0n ? n : assertInRange(n, CURVE_ORDER); // GE = prime subgroup, not full group\n    }\n    const pointPrecomputes = new Map();\n    function isPoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ExtendedPoint expected');\n    }\n    // Extended Point works in extended coordinates: (x, y, z, t) ∋ (x=x/z, y=y/z, t=xy).\n    // https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates\n    class Point {\n        constructor(ex, ey, ez, et) {\n            this.ex = ex;\n            this.ey = ey;\n            this.ez = ez;\n            this.et = et;\n            if (!in0MaskRange(ex))\n                throw new Error('x required');\n            if (!in0MaskRange(ey))\n                throw new Error('y required');\n            if (!in0MaskRange(ez))\n                throw new Error('z required');\n            if (!in0MaskRange(et))\n                throw new Error('t required');\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        static fromAffine(p) {\n            if (p instanceof Point)\n                throw new Error('extended point not allowed');\n            const { x, y } = p || {};\n            if (!in0MaskRange(x) || !in0MaskRange(y))\n                throw new Error('invalid affine point');\n            return new Point(x, y, _1n, modP(x * y));\n        }\n        static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p) => p.ez));\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            this._WINDOW_SIZE = windowSize;\n            pointPrecomputes.delete(this);\n        }\n        // Not required for fromHex(), which always creates valid points.\n        // Could be useful for fromAffine().\n        assertValidity() {\n            const { a, d } = CURVE;\n            if (this.is0())\n                throw new Error('bad point: ZERO'); // TODO: optimize, with vars below?\n            // Equation in affine coordinates: ax² + y² = 1 + dx²y²\n            // Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²\n            const { ex: X, ey: Y, ez: Z, et: T } = this;\n            const X2 = modP(X * X); // X²\n            const Y2 = modP(Y * Y); // Y²\n            const Z2 = modP(Z * Z); // Z²\n            const Z4 = modP(Z2 * Z2); // Z⁴\n            const aX2 = modP(X2 * a); // aX²\n            const left = modP(Z2 * modP(aX2 + Y2)); // (aX² + Y²)Z²\n            const right = modP(Z4 + modP(d * modP(X2 * Y2))); // Z⁴ + dX²Y²\n            if (left !== right)\n                throw new Error('bad point: equation left != right (1)');\n            // In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T\n            const XY = modP(X * Y);\n            const ZT = modP(Z * T);\n            if (XY !== ZT)\n                throw new Error('bad point: equation left != right (2)');\n        }\n        // Compare one point to another.\n        equals(other) {\n            isPoint(other);\n            const { ex: X1, ey: Y1, ez: Z1 } = this;\n            const { ex: X2, ey: Y2, ez: Z2 } = other;\n            const X1Z2 = modP(X1 * Z2);\n            const X2Z1 = modP(X2 * Z1);\n            const Y1Z2 = modP(Y1 * Z2);\n            const Y2Z1 = modP(Y2 * Z1);\n            return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        negate() {\n            // Flips point sign to a negative one (-x, y in affine coords)\n            return new Point(modP(-this.ex), this.ey, this.ez, modP(-this.et));\n        }\n        // Fast algo for doubling Extended Point.\n        // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n        // Cost: 4M + 4S + 1*a + 6add + 1*2.\n        double() {\n            const { a } = CURVE;\n            const { ex: X1, ey: Y1, ez: Z1 } = this;\n            const A = modP(X1 * X1); // A = X12\n            const B = modP(Y1 * Y1); // B = Y12\n            const C = modP(_2n * modP(Z1 * Z1)); // C = 2*Z12\n            const D = modP(a * A); // D = a*A\n            const x1y1 = X1 + Y1;\n            const E = modP(modP(x1y1 * x1y1) - A - B); // E = (X1+Y1)2-A-B\n            const G = D + B; // G = D+B\n            const F = G - C; // F = G-C\n            const H = D - B; // H = D-B\n            const X3 = modP(E * F); // X3 = E*F\n            const Y3 = modP(G * H); // Y3 = G*H\n            const T3 = modP(E * H); // T3 = E*H\n            const Z3 = modP(F * G); // Z3 = F*G\n            return new Point(X3, Y3, Z3, T3);\n        }\n        // Fast algo for adding 2 Extended Points.\n        // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd\n        // Cost: 9M + 1*a + 1*d + 7add.\n        add(other) {\n            isPoint(other);\n            const { a, d } = CURVE;\n            const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this;\n            const { ex: X2, ey: Y2, ez: Z2, et: T2 } = other;\n            // Faster algo for adding 2 Extended Points when curve's a=-1.\n            // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-4\n            // Cost: 8M + 8add + 2*2.\n            // Note: It does not check whether the `other` point is valid.\n            if (a === BigInt(-1)) {\n                const A = modP((Y1 - X1) * (Y2 + X2));\n                const B = modP((Y1 + X1) * (Y2 - X2));\n                const F = modP(B - A);\n                if (F === _0n)\n                    return this.double(); // Same point. Tests say it doesn't affect timing\n                const C = modP(Z1 * _2n * T2);\n                const D = modP(T1 * _2n * Z2);\n                const E = D + C;\n                const G = B + A;\n                const H = D - C;\n                const X3 = modP(E * F);\n                const Y3 = modP(G * H);\n                const T3 = modP(E * H);\n                const Z3 = modP(F * G);\n                return new Point(X3, Y3, Z3, T3);\n            }\n            const A = modP(X1 * X2); // A = X1*X2\n            const B = modP(Y1 * Y2); // B = Y1*Y2\n            const C = modP(T1 * d * T2); // C = T1*d*T2\n            const D = modP(Z1 * Z2); // D = Z1*Z2\n            const E = modP((X1 + Y1) * (X2 + Y2) - A - B); // E = (X1+Y1)*(X2+Y2)-A-B\n            const F = D - C; // F = D-C\n            const G = D + C; // G = D+C\n            const H = modP(B - a * A); // H = B-a*A\n            const X3 = modP(E * F); // X3 = E*F\n            const Y3 = modP(G * H); // Y3 = G*H\n            const T3 = modP(E * H); // T3 = E*H\n            const Z3 = modP(F * G); // Z3 = F*G\n            return new Point(X3, Y3, Z3, T3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, pointPrecomputes, n, Point.normalizeZ);\n        }\n        // Constant-time multiplication.\n        multiply(scalar) {\n            const { p, f } = this.wNAF(assertInRange(scalar, CURVE_ORDER));\n            return Point.normalizeZ([p, f])[0];\n        }\n        // Non-constant-time multiplication. Uses double-and-add algorithm.\n        // It's faster, but should only be used when you don't care about\n        // an exposed private key e.g. sig verification.\n        // Does NOT allow scalars higher than CURVE.n.\n        multiplyUnsafe(scalar) {\n            let n = assertGE0(scalar); // 0 <= scalar < CURVE.n\n            if (n === _0n)\n                return I;\n            if (this.equals(I) || n === _1n)\n                return this;\n            if (this.equals(G))\n                return this.wNAF(n).p;\n            return wnaf.unsafeLadder(this, n);\n        }\n        // Checks if point is of small order.\n        // If you add something to small order point, you will have \"dirty\"\n        // point with torsion component.\n        // Multiplies point by cofactor and checks if the result is 0.\n        isSmallOrder() {\n            return this.multiplyUnsafe(cofactor).is0();\n        }\n        // Multiplies point by curve order and checks if the result is 0.\n        // Returns `false` is the point is dirty.\n        isTorsionFree() {\n            return wnaf.unsafeLadder(this, CURVE_ORDER).is0();\n        }\n        // Converts Extended point to default (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        toAffine(iz) {\n            const { ex: x, ey: y, ez: z } = this;\n            const is0 = this.is0();\n            if (iz == null)\n                iz = is0 ? _8n : Fp.inv(z); // 8 was chosen arbitrarily\n            const ax = modP(x * iz);\n            const ay = modP(y * iz);\n            const zz = modP(z * iz);\n            if (is0)\n                return { x: _0n, y: _1n };\n            if (zz !== _1n)\n                throw new Error('invZ was invalid');\n            return { x: ax, y: ay };\n        }\n        clearCofactor() {\n            const { h: cofactor } = CURVE;\n            if (cofactor === _1n)\n                return this;\n            return this.multiplyUnsafe(cofactor);\n        }\n        // Converts hash string or Uint8Array to Point.\n        // Uses algo from RFC8032 5.1.3.\n        static fromHex(hex, zip215 = false) {\n            const { d, a } = CURVE;\n            const len = Fp.BYTES;\n            hex = ensureBytes('pointHex', hex, len); // copy hex to a new array\n            const normed = hex.slice(); // copy again, we'll manipulate it\n            const lastByte = hex[len - 1]; // select last byte\n            normed[len - 1] = lastByte & ~0x80; // clear last bit\n            const y = ut.bytesToNumberLE(normed);\n            if (y === _0n) {\n                // y=0 is allowed\n            }\n            else {\n                // RFC8032 prohibits >= p, but ZIP215 doesn't\n                if (zip215)\n                    assertInRange(y, MASK); // zip215=true [1..P-1] (2^255-19-1 for ed25519)\n                else\n                    assertInRange(y, Fp.ORDER); // zip215=false [1..MASK-1] (2^256-1 for ed25519)\n            }\n            // Ed25519: x² = (y²-1)/(dy²+1) mod p. Ed448: x² = (y²-1)/(dy²-1) mod p. Generic case:\n            // ax²+y²=1+dx²y² => y²-1=dx²y²-ax² => y²-1=x²(dy²-a) => x²=(y²-1)/(dy²-a)\n            const y2 = modP(y * y); // denominator is always non-0 mod p.\n            const u = modP(y2 - _1n); // u = y² - 1\n            const v = modP(d * y2 - a); // v = d y² + 1.\n            let { isValid, value: x } = uvRatio(u, v); // √(u/v)\n            if (!isValid)\n                throw new Error('Point.fromHex: invalid y coordinate');\n            const isXOdd = (x & _1n) === _1n; // There are 2 square roots. Use x_0 bit to select proper\n            const isLastByteOdd = (lastByte & 0x80) !== 0; // x_0, last bit\n            if (!zip215 && x === _0n && isLastByteOdd)\n                // if x=0 and x_0 = 1, fail\n                throw new Error('Point.fromHex: x=0 and x_0=1');\n            if (isLastByteOdd !== isXOdd)\n                x = modP(-x); // if x_0 != x mod 2, set x = p-x\n            return Point.fromAffine({ x, y });\n        }\n        static fromPrivateKey(privKey) {\n            return getExtendedPublicKey(privKey).point;\n        }\n        toRawBytes() {\n            const { x, y } = this.toAffine();\n            const bytes = ut.numberToBytesLE(y, Fp.BYTES); // each y has 2 x values (x, -y)\n            bytes[bytes.length - 1] |= x & _1n ? 0x80 : 0; // when compressing, it's enough to store y\n            return bytes; // and use the last byte to encode sign of x\n        }\n        toHex() {\n            return ut.bytesToHex(this.toRawBytes()); // Same as toRawBytes, but returns string.\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, _1n, modP(CURVE.Gx * CURVE.Gy));\n    Point.ZERO = new Point(_0n, _1n, _1n, _0n); // 0, 1, 1, 0\n    const { BASE: G, ZERO: I } = Point;\n    const wnaf = wNAF(Point, nByteLength * 8);\n    function modN(a) {\n        return mod(a, CURVE_ORDER);\n    }\n    // Little-endian SHA512 with modulo n\n    function modN_LE(hash) {\n        return modN(ut.bytesToNumberLE(hash));\n    }\n    /** Convenience method that creates public key and other stuff. RFC8032 5.1.5 */\n    function getExtendedPublicKey(key) {\n        const len = nByteLength;\n        key = ensureBytes('private key', key, len);\n        // Hash private key with curve's hash function to produce uniformingly random input\n        // Check byte lengths: ensure(64, h(ensure(32, key)))\n        const hashed = ensureBytes('hashed private key', cHash(key), 2 * len);\n        const head = adjustScalarBytes(hashed.slice(0, len)); // clear first half bits, produce FE\n        const prefix = hashed.slice(len, 2 * len); // second half is called key prefix (5.1.6)\n        const scalar = modN_LE(head); // The actual private scalar\n        const point = G.multiply(scalar); // Point on Edwards curve aka public key\n        const pointBytes = point.toRawBytes(); // Uint8Array representation\n        return { head, prefix, scalar, point, pointBytes };\n    }\n    // Calculates EdDSA pub key. RFC8032 5.1.5. Privkey is hashed. Use first half with 3 bits cleared\n    function getPublicKey(privKey) {\n        return getExtendedPublicKey(privKey).pointBytes;\n    }\n    // int('LE', SHA512(dom2(F, C) || msgs)) mod N\n    function hashDomainToScalar(context = new Uint8Array(), ...msgs) {\n        const msg = ut.concatBytes(...msgs);\n        return modN_LE(cHash(domain(msg, ensureBytes('context', context), !!prehash)));\n    }\n    /** Signs message with privateKey. RFC8032 5.1.6 */\n    function sign(msg, privKey, options = {}) {\n        msg = ensureBytes('message', msg);\n        if (prehash)\n            msg = prehash(msg); // for ed25519ph etc.\n        const { prefix, scalar, pointBytes } = getExtendedPublicKey(privKey);\n        const r = hashDomainToScalar(options.context, prefix, msg); // r = dom2(F, C) || prefix || PH(M)\n        const R = G.multiply(r).toRawBytes(); // R = rG\n        const k = hashDomainToScalar(options.context, R, pointBytes, msg); // R || A || PH(M)\n        const s = modN(r + k * scalar); // S = (r + k * s) mod L\n        assertGE0(s); // 0 <= s < l\n        const res = ut.concatBytes(R, ut.numberToBytesLE(s, Fp.BYTES));\n        return ensureBytes('result', res, nByteLength * 2); // 64-byte signature\n    }\n    const verifyOpts = VERIFY_DEFAULT;\n    function verify(sig, msg, publicKey, options = verifyOpts) {\n        const { context, zip215 } = options;\n        const len = Fp.BYTES; // Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n        sig = ensureBytes('signature', sig, 2 * len); // An extended group equation is checked.\n        msg = ensureBytes('message', msg);\n        if (prehash)\n            msg = prehash(msg); // for ed25519ph, etc\n        const s = ut.bytesToNumberLE(sig.slice(len, 2 * len));\n        // zip215: true is good for consensus-critical apps and allows points < 2^256\n        // zip215: false follows RFC8032 / NIST186-5 and restricts points to CURVE.p\n        let A, R, SB;\n        try {\n            A = Point.fromHex(publicKey, zip215);\n            R = Point.fromHex(sig.slice(0, len), zip215);\n            SB = G.multiplyUnsafe(s); // 0 <= s < l is done inside\n        }\n        catch (error) {\n            return false;\n        }\n        if (!zip215 && A.isSmallOrder())\n            return false;\n        const k = hashDomainToScalar(context, R.toRawBytes(), A.toRawBytes(), msg);\n        const RkA = R.add(A.multiplyUnsafe(k));\n        // [8][S]B = [8]R + [8][k]A'\n        return RkA.subtract(SB).clearCofactor().equals(Point.ZERO);\n    }\n    G._setWindowSize(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\n    const utils = {\n        getExtendedPublicKey,\n        // ed25519 private keys are uniform 32b. No need to check for modulo bias, like in secp256k1.\n        randomPrivateKey: () => randomBytes(Fp.BYTES),\n        /**\n         * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT\n         * values. This slows down first getPublicKey() by milliseconds (see Speed section),\n         * but allows to speed-up subsequent getPublicKey() calls up to 20x.\n         * @param windowSize 2, 4, 8, 16\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3));\n            return point;\n        },\n    };\n    return {\n        CURVE,\n        getPublicKey,\n        sign,\n        verify,\n        ExtendedPoint: Point,\n        utils,\n    };\n}\n//# sourceMappingURL=edwards.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha512 } from '@noble/hashes/sha512';\nimport { concatBytes, randomBytes, utf8ToBytes } from '@noble/hashes/utils';\nimport { twistedEdwards } from './abstract/edwards.js';\nimport { montgomery } from './abstract/montgomery.js';\nimport { Field, FpSqrtEven, isNegativeLE, mod, pow2 } from './abstract/modular.js';\nimport { bytesToHex, bytesToNumberLE, ensureBytes, equalBytes, numberToBytesLE, } from './abstract/utils.js';\nimport { createHasher, expand_message_xmd } from './abstract/hash-to-curve.js';\n/**\n * ed25519 Twisted Edwards curve with following addons:\n * - X25519 ECDH\n * - Ristretto cofactor elimination\n * - Elligator hash-to-group / point indistinguishability\n */\nconst ED25519_P = BigInt('57896044618658097711785492504343953926634992332820282019728792003956564819949');\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst ED25519_SQRT_M1 = BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _5n = BigInt(5);\n// prettier-ignore\nconst _10n = BigInt(10), _20n = BigInt(20), _40n = BigInt(40), _80n = BigInt(80);\nfunction ed25519_pow_2_252_3(x) {\n    const P = ED25519_P;\n    const x2 = (x * x) % P;\n    const b2 = (x2 * x) % P; // x^3, 11\n    const b4 = (pow2(b2, _2n, P) * b2) % P; // x^15, 1111\n    const b5 = (pow2(b4, _1n, P) * x) % P; // x^31\n    const b10 = (pow2(b5, _5n, P) * b5) % P;\n    const b20 = (pow2(b10, _10n, P) * b10) % P;\n    const b40 = (pow2(b20, _20n, P) * b20) % P;\n    const b80 = (pow2(b40, _40n, P) * b40) % P;\n    const b160 = (pow2(b80, _80n, P) * b80) % P;\n    const b240 = (pow2(b160, _80n, P) * b80) % P;\n    const b250 = (pow2(b240, _10n, P) * b10) % P;\n    const pow_p_5_8 = (pow2(b250, _2n, P) * x) % P;\n    // ^ To pow to (p+3)/8, multiply it by x.\n    return { pow_p_5_8, b2 };\n}\nfunction adjustScalarBytes(bytes) {\n    // Section 5: For X25519, in order to decode 32 random bytes as an integer scalar,\n    // set the three least significant bits of the first byte\n    bytes[0] &= 248; // 0b1111_1000\n    // and the most significant bit of the last to zero,\n    bytes[31] &= 127; // 0b0111_1111\n    // set the second most significant bit of the last byte to 1\n    bytes[31] |= 64; // 0b0100_0000\n    return bytes;\n}\n// sqrt(u/v)\nfunction uvRatio(u, v) {\n    const P = ED25519_P;\n    const v3 = mod(v * v * v, P); // v³\n    const v7 = mod(v3 * v3 * v, P); // v⁷\n    // (p+3)/8 and (p-5)/8\n    const pow = ed25519_pow_2_252_3(u * v7).pow_p_5_8;\n    let x = mod(u * v3 * pow, P); // (uv³)(uv⁷)^(p-5)/8\n    const vx2 = mod(v * x * x, P); // vx²\n    const root1 = x; // First root candidate\n    const root2 = mod(x * ED25519_SQRT_M1, P); // Second root candidate\n    const useRoot1 = vx2 === u; // If vx² = u (mod p), x is a square root\n    const useRoot2 = vx2 === mod(-u, P); // If vx² = -u, set x <-- x * 2^((p-1)/4)\n    const noRoot = vx2 === mod(-u * ED25519_SQRT_M1, P); // There is no valid root, vx² = -u√(-1)\n    if (useRoot1)\n        x = root1;\n    if (useRoot2 || noRoot)\n        x = root2; // We return root2 anyway, for const-time\n    if (isNegativeLE(x, P))\n        x = mod(-x, P);\n    return { isValid: useRoot1 || useRoot2, value: x };\n}\n// Just in case\nexport const ED25519_TORSION_SUBGROUP = [\n    '0100000000000000000000000000000000000000000000000000000000000000',\n    'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n    '0000000000000000000000000000000000000000000000000000000000000080',\n    '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n    'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n    '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n    '0000000000000000000000000000000000000000000000000000000000000000',\n    'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n];\nconst Fp = Field(ED25519_P, undefined, true);\nconst ed25519Defaults = {\n    // Param: a\n    a: BigInt(-1), // Fp.create(-1) is proper; our way still works and is faster\n    // d is equal to -121665/121666 over finite field.\n    // Negative number is P - number, and division is invert(number, P)\n    d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n    // Finite field 𝔽p over which we'll do calculations; 2n**255n - 19n\n    Fp,\n    // Subgroup order: how many points curve has\n    // 2n**252n + 27742317777372353535851937790883648493n;\n    n: BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989'),\n    // Cofactor\n    h: BigInt(8),\n    // Base point (x, y) aka generator point\n    Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n    Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n    hash: sha512,\n    randomBytes,\n    adjustScalarBytes,\n    // dom2\n    // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.\n    // Constant-time, u/√v\n    uvRatio,\n};\nexport const ed25519 = /* @__PURE__ */ twistedEdwards(ed25519Defaults);\nfunction ed25519_domain(data, ctx, phflag) {\n    if (ctx.length > 255)\n        throw new Error('Context is too big');\n    return concatBytes(utf8ToBytes('SigEd25519 no Ed25519 collisions'), new Uint8Array([phflag ? 1 : 0, ctx.length]), ctx, data);\n}\nexport const ed25519ctx = /* @__PURE__ */ twistedEdwards({\n    ...ed25519Defaults,\n    domain: ed25519_domain,\n});\nexport const ed25519ph = /* @__PURE__ */ twistedEdwards({\n    ...ed25519Defaults,\n    domain: ed25519_domain,\n    prehash: sha512,\n});\nexport const x25519 = /* @__PURE__ */ (() => montgomery({\n    P: ED25519_P,\n    a: BigInt(486662),\n    montgomeryBits: 255, // n is 253 bits\n    nByteLength: 32,\n    Gu: BigInt(9),\n    powPminus2: (x) => {\n        const P = ED25519_P;\n        // x^(p-2) aka x^(2^255-21)\n        const { pow_p_5_8, b2 } = ed25519_pow_2_252_3(x);\n        return mod(pow2(pow_p_5_8, BigInt(3), P) * b2, P);\n    },\n    adjustScalarBytes,\n    randomBytes,\n}))();\n/**\n * Converts ed25519 public key to x25519 public key. Uses formula:\n * * `(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)`\n * * `(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))`\n * @example\n *   const someonesPub = ed25519.getPublicKey(ed25519.utils.randomPrivateKey());\n *   const aPriv = x25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(aPriv, edwardsToMontgomeryPub(someonesPub))\n */\nexport function edwardsToMontgomeryPub(edwardsPub) {\n    const { y } = ed25519.ExtendedPoint.fromHex(edwardsPub);\n    const _1n = BigInt(1);\n    return Fp.toBytes(Fp.create((_1n + y) * Fp.inv(_1n - y)));\n}\nexport const edwardsToMontgomery = edwardsToMontgomeryPub; // deprecated\n/**\n * Converts ed25519 secret key to x25519 secret key.\n * @example\n *   const someonesPub = x25519.getPublicKey(x25519.utils.randomPrivateKey());\n *   const aPriv = ed25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(edwardsToMontgomeryPriv(aPriv), someonesPub)\n */\nexport function edwardsToMontgomeryPriv(edwardsPriv) {\n    const hashed = ed25519Defaults.hash(edwardsPriv.subarray(0, 32));\n    return ed25519Defaults.adjustScalarBytes(hashed).subarray(0, 32);\n}\n// Hash To Curve Elligator2 Map (NOTE: different from ristretto255 elligator)\n// NOTE: very important part is usage of FpSqrtEven for ELL2_C1_EDWARDS, since\n// SageMath returns different root first and everything falls apart\nconst ELL2_C1 = (Fp.ORDER + BigInt(3)) / BigInt(8); // 1. c1 = (q + 3) / 8       # Integer arithmetic\nconst ELL2_C2 = Fp.pow(_2n, ELL2_C1); // 2. c2 = 2^c1\nconst ELL2_C3 = Fp.sqrt(Fp.neg(Fp.ONE)); // 3. c3 = sqrt(-1)\nconst ELL2_C4 = (Fp.ORDER - BigInt(5)) / BigInt(8); // 4. c4 = (q - 5) / 8       # Integer arithmetic\nconst ELL2_J = BigInt(486662);\n// prettier-ignore\nfunction map_to_curve_elligator2_curve25519(u) {\n    let tv1 = Fp.sqr(u); //  1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, _2n); //  2.  tv1 = 2 * tv1\n    let xd = Fp.add(tv1, Fp.ONE); //  3.   xd = tv1 + 1         # Nonzero: -1 is square (mod p), tv1 is not\n    let x1n = Fp.neg(ELL2_J); //  4.  x1n = -J              # x1 = x1n / xd = -J / (1 + 2 * u^2)\n    let tv2 = Fp.sqr(xd); //  5.  tv2 = xd^2\n    let gxd = Fp.mul(tv2, xd); //  6.  gxd = tv2 * xd        # gxd = xd^3\n    let gx1 = Fp.mul(tv1, ELL2_J); //  7.  gx1 = J * tv1         # x1n + J * xd\n    gx1 = Fp.mul(gx1, x1n); //  8.  gx1 = gx1 * x1n       # x1n^2 + J * x1n * xd\n    gx1 = Fp.add(gx1, tv2); //  9.  gx1 = gx1 + tv2       # x1n^2 + J * x1n * xd + xd^2\n    gx1 = Fp.mul(gx1, x1n); //  10. gx1 = gx1 * x1n       # x1n^3 + J * x1n^2 * xd + x1n * xd^2\n    let tv3 = Fp.sqr(gxd); //  11. tv3 = gxd^2\n    tv2 = Fp.sqr(tv3); //  12. tv2 = tv3^2           # gxd^4\n    tv3 = Fp.mul(tv3, gxd); //  13. tv3 = tv3 * gxd       # gxd^3\n    tv3 = Fp.mul(tv3, gx1); //  14. tv3 = tv3 * gx1       # gx1 * gxd^3\n    tv2 = Fp.mul(tv2, tv3); //  15. tv2 = tv2 * tv3       # gx1 * gxd^7\n    let y11 = Fp.pow(tv2, ELL2_C4); //  16. y11 = tv2^c4        # (gx1 * gxd^7)^((p - 5) / 8)\n    y11 = Fp.mul(y11, tv3); //  17. y11 = y11 * tv3       # gx1*gxd^3*(gx1*gxd^7)^((p-5)/8)\n    let y12 = Fp.mul(y11, ELL2_C3); //  18. y12 = y11 * c3\n    tv2 = Fp.sqr(y11); //  19. tv2 = y11^2\n    tv2 = Fp.mul(tv2, gxd); //  20. tv2 = tv2 * gxd\n    let e1 = Fp.eql(tv2, gx1); //  21.  e1 = tv2 == gx1\n    let y1 = Fp.cmov(y12, y11, e1); //  22.  y1 = CMOV(y12, y11, e1)  # If g(x1) is square, this is its sqrt\n    let x2n = Fp.mul(x1n, tv1); //  23. x2n = x1n * tv1       # x2 = x2n / xd = 2 * u^2 * x1n / xd\n    let y21 = Fp.mul(y11, u); //  24. y21 = y11 * u\n    y21 = Fp.mul(y21, ELL2_C2); //  25. y21 = y21 * c2\n    let y22 = Fp.mul(y21, ELL2_C3); //  26. y22 = y21 * c3\n    let gx2 = Fp.mul(gx1, tv1); //  27. gx2 = gx1 * tv1       # g(x2) = gx2 / gxd = 2 * u^2 * g(x1)\n    tv2 = Fp.sqr(y21); //  28. tv2 = y21^2\n    tv2 = Fp.mul(tv2, gxd); //  29. tv2 = tv2 * gxd\n    let e2 = Fp.eql(tv2, gx2); //  30.  e2 = tv2 == gx2\n    let y2 = Fp.cmov(y22, y21, e2); //  31.  y2 = CMOV(y22, y21, e2)  # If g(x2) is square, this is its sqrt\n    tv2 = Fp.sqr(y1); //  32. tv2 = y1^2\n    tv2 = Fp.mul(tv2, gxd); //  33. tv2 = tv2 * gxd\n    let e3 = Fp.eql(tv2, gx1); //  34.  e3 = tv2 == gx1\n    let xn = Fp.cmov(x2n, x1n, e3); //  35.  xn = CMOV(x2n, x1n, e3)  # If e3, x = x1, else x = x2\n    let y = Fp.cmov(y2, y1, e3); //  36.   y = CMOV(y2, y1, e3)    # If e3, y = y1, else y = y2\n    let e4 = Fp.isOdd(y); //  37.  e4 = sgn0(y) == 1        # Fix sign of y\n    y = Fp.cmov(y, Fp.neg(y), e3 !== e4); //  38.   y = CMOV(y, -y, e3 XOR e4)\n    return { xMn: xn, xMd: xd, yMn: y, yMd: _1n }; //  39. return (xn, xd, y, 1)\n}\nconst ELL2_C1_EDWARDS = FpSqrtEven(Fp, Fp.neg(BigInt(486664))); // sgn0(c1) MUST equal 0\nfunction map_to_curve_elligator2_edwards25519(u) {\n    const { xMn, xMd, yMn, yMd } = map_to_curve_elligator2_curve25519(u); //  1.  (xMn, xMd, yMn, yMd) =\n    // map_to_curve_elligator2_curve25519(u)\n    let xn = Fp.mul(xMn, yMd); //  2.  xn = xMn * yMd\n    xn = Fp.mul(xn, ELL2_C1_EDWARDS); //  3.  xn = xn * c1\n    let xd = Fp.mul(xMd, yMn); //  4.  xd = xMd * yMn    # xn / xd = c1 * xM / yM\n    let yn = Fp.sub(xMn, xMd); //  5.  yn = xMn - xMd\n    let yd = Fp.add(xMn, xMd); //  6.  yd = xMn + xMd    # (n / d - 1) / (n / d + 1) = (n - d) / (n + d)\n    let tv1 = Fp.mul(xd, yd); //  7. tv1 = xd * yd\n    let e = Fp.eql(tv1, Fp.ZERO); //  8.   e = tv1 == 0\n    xn = Fp.cmov(xn, Fp.ZERO, e); //  9.  xn = CMOV(xn, 0, e)\n    xd = Fp.cmov(xd, Fp.ONE, e); //  10. xd = CMOV(xd, 1, e)\n    yn = Fp.cmov(yn, Fp.ONE, e); //  11. yn = CMOV(yn, 1, e)\n    yd = Fp.cmov(yd, Fp.ONE, e); //  12. yd = CMOV(yd, 1, e)\n    const inv = Fp.invertBatch([xd, yd]); // batch division\n    return { x: Fp.mul(xn, inv[0]), y: Fp.mul(yn, inv[1]) }; //  13. return (xn, xd, yn, yd)\n}\nconst htf = /* @__PURE__ */ (() => createHasher(ed25519.ExtendedPoint, (scalars) => map_to_curve_elligator2_edwards25519(scalars[0]), {\n    DST: 'edwards25519_XMD:SHA-512_ELL2_RO_',\n    encodeDST: 'edwards25519_XMD:SHA-512_ELL2_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha512,\n}))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\nfunction assertRstPoint(other) {\n    if (!(other instanceof RistPoint))\n        throw new Error('RistrettoPoint expected');\n}\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst SQRT_M1 = ED25519_SQRT_M1;\n// √(ad - 1)\nconst SQRT_AD_MINUS_ONE = BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');\n// 1 / √(a-d)\nconst INVSQRT_A_MINUS_D = BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');\n// 1-d²\nconst ONE_MINUS_D_SQ = BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');\n// (d-1)²\nconst D_MINUS_ONE_SQ = BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');\n// Calculates 1/√(number)\nconst invertSqrt = (number) => uvRatio(_1n, number);\nconst MAX_255B = BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nconst bytes255ToNumberLE = (bytes) => ed25519.CURVE.Fp.create(bytesToNumberLE(bytes) & MAX_255B);\n// Computes Elligator map for Ristretto\n// https://ristretto.group/formulas/elligator.html\nfunction calcElligatorRistrettoMap(r0) {\n    const { d } = ed25519.CURVE;\n    const P = ed25519.CURVE.Fp.ORDER;\n    const mod = ed25519.CURVE.Fp.create;\n    const r = mod(SQRT_M1 * r0 * r0); // 1\n    const Ns = mod((r + _1n) * ONE_MINUS_D_SQ); // 2\n    let c = BigInt(-1); // 3\n    const D = mod((c - d * r) * mod(r + d)); // 4\n    let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D); // 5\n    let s_ = mod(s * r0); // 6\n    if (!isNegativeLE(s_, P))\n        s_ = mod(-s_);\n    if (!Ns_D_is_sq)\n        s = s_; // 7\n    if (!Ns_D_is_sq)\n        c = r; // 8\n    const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D); // 9\n    const s2 = s * s;\n    const W0 = mod((s + s) * D); // 10\n    const W1 = mod(Nt * SQRT_AD_MINUS_ONE); // 11\n    const W2 = mod(_1n - s2); // 12\n    const W3 = mod(_1n + s2); // 13\n    return new ed25519.ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n}\n/**\n * Each ed25519/ExtendedPoint has 8 different equivalent points. This can be\n * a source of bugs for protocols like ring signatures. Ristretto was created to solve this.\n * Ristretto point operates in X:Y:Z:T extended coordinates like ExtendedPoint,\n * but it should work in its own namespace: do not combine those two.\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-ristretto255-decaf448\n */\nclass RistPoint {\n    // Private property to discourage combining ExtendedPoint + RistrettoPoint\n    // Always use Ristretto encoding/decoding instead.\n    constructor(ep) {\n        this.ep = ep;\n    }\n    static fromAffine(ap) {\n        return new RistPoint(ed25519.ExtendedPoint.fromAffine(ap));\n    }\n    /**\n     * Takes uniform output of 64-byte hash function like sha512 and converts it to `RistrettoPoint`.\n     * The hash-to-group operation applies Elligator twice and adds the results.\n     * **Note:** this is one-way map, there is no conversion from point to hash.\n     * https://ristretto.group/formulas/elligator.html\n     * @param hex 64-byte output of a hash function\n     */\n    static hashToCurve(hex) {\n        hex = ensureBytes('ristrettoHash', hex, 64);\n        const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n        const R1 = calcElligatorRistrettoMap(r1);\n        const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n        const R2 = calcElligatorRistrettoMap(r2);\n        return new RistPoint(R1.add(R2));\n    }\n    /**\n     * Converts ristretto-encoded string to ristretto point.\n     * https://ristretto.group/formulas/decoding.html\n     * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding\n     */\n    static fromHex(hex) {\n        hex = ensureBytes('ristrettoHex', hex, 32);\n        const { a, d } = ed25519.CURVE;\n        const P = ed25519.CURVE.Fp.ORDER;\n        const mod = ed25519.CURVE.Fp.create;\n        const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n        const s = bytes255ToNumberLE(hex);\n        // 1. Check that s_bytes is the canonical encoding of a field element, or else abort.\n        // 3. Check that s is non-negative, or else abort\n        if (!equalBytes(numberToBytesLE(s, 32), hex) || isNegativeLE(s, P))\n            throw new Error(emsg);\n        const s2 = mod(s * s);\n        const u1 = mod(_1n + a * s2); // 4 (a is -1)\n        const u2 = mod(_1n - a * s2); // 5\n        const u1_2 = mod(u1 * u1);\n        const u2_2 = mod(u2 * u2);\n        const v = mod(a * d * u1_2 - u2_2); // 6\n        const { isValid, value: I } = invertSqrt(mod(v * u2_2)); // 7\n        const Dx = mod(I * u2); // 8\n        const Dy = mod(I * Dx * v); // 9\n        let x = mod((s + s) * Dx); // 10\n        if (isNegativeLE(x, P))\n            x = mod(-x); // 10\n        const y = mod(u1 * Dy); // 11\n        const t = mod(x * y); // 12\n        if (!isValid || isNegativeLE(t, P) || y === _0n)\n            throw new Error(emsg);\n        return new RistPoint(new ed25519.ExtendedPoint(x, y, _1n, t));\n    }\n    /**\n     * Encodes ristretto point to Uint8Array.\n     * https://ristretto.group/formulas/encoding.html\n     */\n    toRawBytes() {\n        let { ex: x, ey: y, ez: z, et: t } = this.ep;\n        const P = ed25519.CURVE.Fp.ORDER;\n        const mod = ed25519.CURVE.Fp.create;\n        const u1 = mod(mod(z + y) * mod(z - y)); // 1\n        const u2 = mod(x * y); // 2\n        // Square root always exists\n        const u2sq = mod(u2 * u2);\n        const { value: invsqrt } = invertSqrt(mod(u1 * u2sq)); // 3\n        const D1 = mod(invsqrt * u1); // 4\n        const D2 = mod(invsqrt * u2); // 5\n        const zInv = mod(D1 * D2 * t); // 6\n        let D; // 7\n        if (isNegativeLE(t * zInv, P)) {\n            let _x = mod(y * SQRT_M1);\n            let _y = mod(x * SQRT_M1);\n            x = _x;\n            y = _y;\n            D = mod(D1 * INVSQRT_A_MINUS_D);\n        }\n        else {\n            D = D2; // 8\n        }\n        if (isNegativeLE(x * zInv, P))\n            y = mod(-y); // 9\n        let s = mod((z - y) * D); // 10 (check footer's note, no sqrt(-a))\n        if (isNegativeLE(s, P))\n            s = mod(-s);\n        return numberToBytesLE(s, 32); // 11\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toString() {\n        return this.toHex();\n    }\n    // Compare one point to another.\n    equals(other) {\n        assertRstPoint(other);\n        const { ex: X1, ey: Y1 } = this.ep;\n        const { ex: X2, ey: Y2 } = other.ep;\n        const mod = ed25519.CURVE.Fp.create;\n        // (x1 * y2 == y1 * x2) | (y1 * y2 == x1 * x2)\n        const one = mod(X1 * Y2) === mod(Y1 * X2);\n        const two = mod(Y1 * Y2) === mod(X1 * X2);\n        return one || two;\n    }\n    add(other) {\n        assertRstPoint(other);\n        return new RistPoint(this.ep.add(other.ep));\n    }\n    subtract(other) {\n        assertRstPoint(other);\n        return new RistPoint(this.ep.subtract(other.ep));\n    }\n    multiply(scalar) {\n        return new RistPoint(this.ep.multiply(scalar));\n    }\n    multiplyUnsafe(scalar) {\n        return new RistPoint(this.ep.multiplyUnsafe(scalar));\n    }\n    double() {\n        return new RistPoint(this.ep.double());\n    }\n    negate() {\n        return new RistPoint(this.ep.negate());\n    }\n}\nexport const RistrettoPoint = /* @__PURE__ */ (() => {\n    if (!RistPoint.BASE)\n        RistPoint.BASE = new RistPoint(ed25519.ExtendedPoint.BASE);\n    if (!RistPoint.ZERO)\n        RistPoint.ZERO = new RistPoint(ed25519.ExtendedPoint.ZERO);\n    return RistPoint;\n})();\n// Hashing to ristretto255. https://www.rfc-editor.org/rfc/rfc9380#appendix-B\nexport const hashToRistretto255 = (msg, options) => {\n    const d = options.DST;\n    const DST = typeof d === 'string' ? utf8ToBytes(d) : d;\n    const uniform_bytes = expand_message_xmd(msg, DST, 64, sha512);\n    const P = RistPoint.hashToCurve(uniform_bytes);\n    return P;\n};\nexport const hash_to_ristretto255 = hashToRistretto255; // legacy\n//# sourceMappingURL=ed25519.js.map","import { HashMD, Chi, Maj } from './_md.js';\nimport { rotr, wrapConstructor } from './utils.js';\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state:\n// first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends HashMD {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = SHA256_IV[0] | 0;\n        this.B = SHA256_IV[1] | 0;\n        this.C = SHA256_IV[2] | 0;\n        this.D = SHA256_IV[3] | 0;\n        this.E = SHA256_IV[4] | 0;\n        this.F = SHA256_IV[5] | 0;\n        this.G = SHA256_IV[6] | 0;\n        this.H = SHA256_IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n//# sourceMappingURL=sha256.js.map","import { hash as assertHash, bytes as assertBytes, exists as assertExists } from './_assert.js';\nimport { Hash, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nexport class HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        assertHash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        assertExists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        assertExists(this);\n        assertBytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n//# sourceMappingURL=hmac.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { ensureBytes } from './utils.js';\nimport { wNAF, validateBasic } from './curve.js';\nfunction validatePointOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(opts, {\n        a: 'field',\n        b: 'field',\n    }, {\n        allowedPrivateKeyLengths: 'array',\n        wrapPrivateKey: 'boolean',\n        isTorsionFree: 'function',\n        clearCofactor: 'function',\n        allowInfinityPoint: 'boolean',\n        fromBytes: 'function',\n        toBytes: 'function',\n    });\n    const { endo, Fp, a } = opts;\n    if (endo) {\n        if (!Fp.eql(a, Fp.ZERO)) {\n            throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n        }\n        if (typeof endo !== 'object' ||\n            typeof endo.beta !== 'bigint' ||\n            typeof endo.splitScalar !== 'function') {\n            throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n        }\n    }\n    return Object.freeze({ ...opts });\n}\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexport const DER = {\n    // asn.1 DER encoding utils\n    Err: class DERErr extends Error {\n        constructor(m = '') {\n            super(m);\n        }\n    },\n    _parseInt(data) {\n        const { Err: E } = DER;\n        if (data.length < 2 || data[0] !== 0x02)\n            throw new E('Invalid signature integer tag');\n        const len = data[1];\n        const res = data.subarray(2, len + 2);\n        if (!len || res.length !== len)\n            throw new E('Invalid signature integer: wrong length');\n        // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n        // since we always use positive integers here. It must always be empty:\n        // - add zero byte if exists\n        // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n        if (res[0] & 0b10000000)\n            throw new E('Invalid signature integer: negative');\n        if (res[0] === 0x00 && !(res[1] & 0b10000000))\n            throw new E('Invalid signature integer: unnecessary leading zero');\n        return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n    },\n    toSig(hex) {\n        // parse DER signature\n        const { Err: E } = DER;\n        const data = typeof hex === 'string' ? h2b(hex) : hex;\n        ut.abytes(data);\n        let l = data.length;\n        if (l < 2 || data[0] != 0x30)\n            throw new E('Invalid signature tag');\n        if (data[1] !== l - 2)\n            throw new E('Invalid signature: incorrect length');\n        const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n        const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n        if (rBytesLeft.length)\n            throw new E('Invalid signature: left bytes after parsing');\n        return { r, s };\n    },\n    hexFromSig(sig) {\n        // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n        const slice = (s) => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n        const h = (num) => {\n            const hex = num.toString(16);\n            return hex.length & 1 ? `0${hex}` : hex;\n        };\n        const s = slice(h(sig.s));\n        const r = slice(h(sig.r));\n        const shl = s.length / 2;\n        const rhl = r.length / 2;\n        const sl = h(shl);\n        const rl = h(rhl);\n        return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n    },\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\nexport function weierstrassPoints(opts) {\n    const CURVE = validatePointOpts(opts);\n    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n    const toBytes = CURVE.toBytes ||\n        ((_c, point, _isCompressed) => {\n            const a = point.toAffine();\n            return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n        });\n    const fromBytes = CURVE.fromBytes ||\n        ((bytes) => {\n            // const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n            return { x, y };\n        });\n    /**\n     * y² = x³ + ax + b: Short weierstrass curve formula\n     * @returns y²\n     */\n    function weierstrassEquation(x) {\n        const { a, b } = CURVE;\n        const x2 = Fp.sqr(x); // x * x\n        const x3 = Fp.mul(x2, x); // x2 * x\n        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n    }\n    // Validate whether the passed curve params are valid.\n    // We check if curve equation works for generator point.\n    // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n    // ProjectivePoint class has not been initialized yet.\n    if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n        throw new Error('bad generator point: equation left != right');\n    // Valid group elements reside in range 1..n-1\n    function isWithinCurveOrder(num) {\n        return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n    }\n    function assertGE(num) {\n        if (!isWithinCurveOrder(num))\n            throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n    }\n    // Validates if priv key is valid and converts it to bigint.\n    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n    function normPrivateKeyToScalar(key) {\n        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n        if (lengths && typeof key !== 'bigint') {\n            if (ut.isBytes(key))\n                key = ut.bytesToHex(key);\n            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n            if (typeof key !== 'string' || !lengths.includes(key.length))\n                throw new Error('Invalid key');\n            key = key.padStart(nByteLength * 2, '0');\n        }\n        let num;\n        try {\n            num =\n                typeof key === 'bigint'\n                    ? key\n                    : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n        }\n        catch (error) {\n            throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n        }\n        if (wrapPrivateKey)\n            num = mod.mod(num, n); // disabled by default, enabled for BLS\n        assertGE(num); // num in range [1..N-1]\n        return num;\n    }\n    const pointPrecomputes = new Map();\n    function assertPrjPoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ProjectivePoint expected');\n    }\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n     * Default Point works in 2d / affine coordinates: (x, y)\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */\n    class Point {\n        constructor(px, py, pz) {\n            this.px = px;\n            this.py = py;\n            this.pz = pz;\n            if (px == null || !Fp.isValid(px))\n                throw new Error('x required');\n            if (py == null || !Fp.isValid(py))\n                throw new Error('y required');\n            if (pz == null || !Fp.isValid(pz))\n                throw new Error('z required');\n        }\n        // Does not validate if the point is on-curve.\n        // Use fromHex instead, or call assertValidity() later.\n        static fromAffine(p) {\n            const { x, y } = p || {};\n            if (!p || !Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('invalid affine point');\n            if (p instanceof Point)\n                throw new Error('projective point not allowed');\n            const is0 = (i) => Fp.eql(i, Fp.ZERO);\n            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n            if (is0(x) && is0(y))\n                return Point.ZERO;\n            return new Point(x, y, Fp.ONE);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        /**\n         * Takes a bunch of Projective Points but executes only one\n         * inversion on all of them. Inversion is very slow operation,\n         * so this improves performance massively.\n         * Optimization: converts a list of projective points to a list of identical points with Z=1.\n         */\n        static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p) => p.pz));\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        /**\n         * Converts hash string or Uint8Array to Point.\n         * @param hex short/long ECDSA hex\n         */\n        static fromHex(hex) {\n            const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n            P.assertValidity();\n            return P;\n        }\n        // Multiplies generator point by privateKey.\n        static fromPrivateKey(privateKey) {\n            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            this._WINDOW_SIZE = windowSize;\n            pointPrecomputes.delete(this);\n        }\n        // A point on curve is valid if it conforms to equation.\n        assertValidity() {\n            if (this.is0()) {\n                // (0, 1, 0) aka ZERO is invalid in most contexts.\n                // In BLS, ZERO can be serialized, so we allow it.\n                // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n                if (CURVE.allowInfinityPoint && !Fp.is0(this.py))\n                    return;\n                throw new Error('bad point: ZERO');\n            }\n            // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n            const { x, y } = this.toAffine();\n            // Check if x, y are valid field elements\n            if (!Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('bad point: x or y not FE');\n            const left = Fp.sqr(y); // y²\n            const right = weierstrassEquation(x); // x³ + ax + b\n            if (!Fp.eql(left, right))\n                throw new Error('bad point: equation left != right');\n            if (!this.isTorsionFree())\n                throw new Error('bad point: not in prime-order subgroup');\n        }\n        hasEvenY() {\n            const { y } = this.toAffine();\n            if (Fp.isOdd)\n                return !Fp.isOdd(y);\n            throw new Error(\"Field doesn't support isOdd\");\n        }\n        /**\n         * Compare one point to another.\n         */\n        equals(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n            return U1 && U2;\n        }\n        /**\n         * Flips point to one corresponding to (x, -y) in Affine coordinates.\n         */\n        negate() {\n            return new Point(this.px, Fp.neg(this.py), this.pz);\n        }\n        // Renes-Costello-Batina exception-free doubling formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 3\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n        double() {\n            const { a, b } = CURVE;\n            const b3 = Fp.mul(b, _3n);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            let t0 = Fp.mul(X1, X1); // step 1\n            let t1 = Fp.mul(Y1, Y1);\n            let t2 = Fp.mul(Z1, Z1);\n            let t3 = Fp.mul(X1, Y1);\n            t3 = Fp.add(t3, t3); // step 5\n            Z3 = Fp.mul(X1, Z1);\n            Z3 = Fp.add(Z3, Z3);\n            X3 = Fp.mul(a, Z3);\n            Y3 = Fp.mul(b3, t2);\n            Y3 = Fp.add(X3, Y3); // step 10\n            X3 = Fp.sub(t1, Y3);\n            Y3 = Fp.add(t1, Y3);\n            Y3 = Fp.mul(X3, Y3);\n            X3 = Fp.mul(t3, X3);\n            Z3 = Fp.mul(b3, Z3); // step 15\n            t2 = Fp.mul(a, t2);\n            t3 = Fp.sub(t0, t2);\n            t3 = Fp.mul(a, t3);\n            t3 = Fp.add(t3, Z3);\n            Z3 = Fp.add(t0, t0); // step 20\n            t0 = Fp.add(Z3, t0);\n            t0 = Fp.add(t0, t2);\n            t0 = Fp.mul(t0, t3);\n            Y3 = Fp.add(Y3, t0);\n            t2 = Fp.mul(Y1, Z1); // step 25\n            t2 = Fp.add(t2, t2);\n            t0 = Fp.mul(t2, t3);\n            X3 = Fp.sub(X3, t0);\n            Z3 = Fp.mul(t2, t1);\n            Z3 = Fp.add(Z3, Z3); // step 30\n            Z3 = Fp.add(Z3, Z3);\n            return new Point(X3, Y3, Z3);\n        }\n        // Renes-Costello-Batina exception-free addition formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 1\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n        add(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            const a = CURVE.a;\n            const b3 = Fp.mul(CURVE.b, _3n);\n            let t0 = Fp.mul(X1, X2); // step 1\n            let t1 = Fp.mul(Y1, Y2);\n            let t2 = Fp.mul(Z1, Z2);\n            let t3 = Fp.add(X1, Y1);\n            let t4 = Fp.add(X2, Y2); // step 5\n            t3 = Fp.mul(t3, t4);\n            t4 = Fp.add(t0, t1);\n            t3 = Fp.sub(t3, t4);\n            t4 = Fp.add(X1, Z1);\n            let t5 = Fp.add(X2, Z2); // step 10\n            t4 = Fp.mul(t4, t5);\n            t5 = Fp.add(t0, t2);\n            t4 = Fp.sub(t4, t5);\n            t5 = Fp.add(Y1, Z1);\n            X3 = Fp.add(Y2, Z2); // step 15\n            t5 = Fp.mul(t5, X3);\n            X3 = Fp.add(t1, t2);\n            t5 = Fp.sub(t5, X3);\n            Z3 = Fp.mul(a, t4);\n            X3 = Fp.mul(b3, t2); // step 20\n            Z3 = Fp.add(X3, Z3);\n            X3 = Fp.sub(t1, Z3);\n            Z3 = Fp.add(t1, Z3);\n            Y3 = Fp.mul(X3, Z3);\n            t1 = Fp.add(t0, t0); // step 25\n            t1 = Fp.add(t1, t0);\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.mul(b3, t4);\n            t1 = Fp.add(t1, t2);\n            t2 = Fp.sub(t0, t2); // step 30\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.add(t4, t2);\n            t0 = Fp.mul(t1, t4);\n            Y3 = Fp.add(Y3, t0);\n            t0 = Fp.mul(t5, t4); // step 35\n            X3 = Fp.mul(t3, X3);\n            X3 = Fp.sub(X3, t0);\n            t0 = Fp.mul(t3, t1);\n            Z3 = Fp.mul(t5, Z3);\n            Z3 = Fp.add(Z3, t0); // step 40\n            return new Point(X3, Y3, Z3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {\n                const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n                return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n            });\n        }\n        /**\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\n         * It's faster, but should only be used when you don't care about\n         * an exposed private key e.g. sig verification, which works over *public* keys.\n         */\n        multiplyUnsafe(n) {\n            const I = Point.ZERO;\n            if (n === _0n)\n                return I;\n            assertGE(n); // Will throw on 0\n            if (n === _1n)\n                return this;\n            const { endo } = CURVE;\n            if (!endo)\n                return wnaf.unsafeLadder(this, n);\n            // Apply endomorphism\n            let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n            let k1p = I;\n            let k2p = I;\n            let d = this;\n            while (k1 > _0n || k2 > _0n) {\n                if (k1 & _1n)\n                    k1p = k1p.add(d);\n                if (k2 & _1n)\n                    k2p = k2p.add(d);\n                d = d.double();\n                k1 >>= _1n;\n                k2 >>= _1n;\n            }\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n            return k1p.add(k2p);\n        }\n        /**\n         * Constant time multiplication.\n         * Uses wNAF method. Windowed method may be 10% faster,\n         * but takes 2x longer to generate and consumes 2x memory.\n         * Uses precomputes when available.\n         * Uses endomorphism for Koblitz curves.\n         * @param scalar by which the point would be multiplied\n         * @returns New point\n         */\n        multiply(scalar) {\n            assertGE(scalar);\n            let n = scalar;\n            let point, fake; // Fake point is used to const-time mult\n            const { endo } = CURVE;\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n                let { p: k1p, f: f1p } = this.wNAF(k1);\n                let { p: k2p, f: f2p } = this.wNAF(k2);\n                k1p = wnaf.constTimeNegate(k1neg, k1p);\n                k2p = wnaf.constTimeNegate(k2neg, k2p);\n                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n                point = k1p.add(k2p);\n                fake = f1p.add(f2p);\n            }\n            else {\n                const { p, f } = this.wNAF(n);\n                point = p;\n                fake = f;\n            }\n            // Normalize `z` for both points, but return only real one\n            return Point.normalizeZ([point, fake])[0];\n        }\n        /**\n         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n         * Not using Strauss-Shamir trick: precomputation tables are faster.\n         * The trick could be useful if both P and Q are not G (not in our case).\n         * @returns non-zero affine point\n         */\n        multiplyAndAddUnsafe(Q, a, b) {\n            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n            const mul = (P, a // Select faster multiply() method\n            ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n            const sum = mul(this, a).add(mul(Q, b));\n            return sum.is0() ? undefined : sum;\n        }\n        // Converts Projective point to affine (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        // (x, y, z) ∋ (x=x/z, y=y/z)\n        toAffine(iz) {\n            const { px: x, py: y, pz: z } = this;\n            const is0 = this.is0();\n            // If invZ was 0, we return zero point. However we still want to execute\n            // all operations, so we replace invZ with a random number, 1.\n            if (iz == null)\n                iz = is0 ? Fp.ONE : Fp.inv(z);\n            const ax = Fp.mul(x, iz);\n            const ay = Fp.mul(y, iz);\n            const zz = Fp.mul(z, iz);\n            if (is0)\n                return { x: Fp.ZERO, y: Fp.ZERO };\n            if (!Fp.eql(zz, Fp.ONE))\n                throw new Error('invZ was invalid');\n            return { x: ax, y: ay };\n        }\n        isTorsionFree() {\n            const { h: cofactor, isTorsionFree } = CURVE;\n            if (cofactor === _1n)\n                return true; // No subgroups, always torsion-free\n            if (isTorsionFree)\n                return isTorsionFree(Point, this);\n            throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n        }\n        clearCofactor() {\n            const { h: cofactor, clearCofactor } = CURVE;\n            if (cofactor === _1n)\n                return this; // Fast-path\n            if (clearCofactor)\n                return clearCofactor(Point, this);\n            return this.multiplyUnsafe(CURVE.h);\n        }\n        toRawBytes(isCompressed = true) {\n            this.assertValidity();\n            return toBytes(Point, this, isCompressed);\n        }\n        toHex(isCompressed = true) {\n            return ut.bytesToHex(this.toRawBytes(isCompressed));\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n    const _bits = CURVE.nBitLength;\n    const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n    // Validate if generator point is on curve\n    return {\n        CURVE,\n        ProjectivePoint: Point,\n        normPrivateKeyToScalar,\n        weierstrassEquation,\n        isWithinCurveOrder,\n    };\n}\nfunction validateOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(opts, {\n        hash: 'hash',\n        hmac: 'function',\n        randomBytes: 'function',\n    }, {\n        bits2int: 'function',\n        bits2int_modN: 'function',\n        lowS: 'boolean',\n    });\n    return Object.freeze({ lowS: true, ...opts });\n}\nexport function weierstrass(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER } = CURVE;\n    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n    function isValidFieldElement(num) {\n        return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n    }\n    function modN(a) {\n        return mod.mod(a, CURVE_ORDER);\n    }\n    function invN(a) {\n        return mod.invert(a, CURVE_ORDER);\n    }\n    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder, } = weierstrassPoints({\n        ...CURVE,\n        toBytes(_c, point, isCompressed) {\n            const a = point.toAffine();\n            const x = Fp.toBytes(a.x);\n            const cat = ut.concatBytes;\n            if (isCompressed) {\n                return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n            }\n            else {\n                return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n            }\n        },\n        fromBytes(bytes) {\n            const len = bytes.length;\n            const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // this.assertValidity() is done inside of fromHex\n            if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n                const x = ut.bytesToNumberBE(tail);\n                if (!isValidFieldElement(x))\n                    throw new Error('Point is not on curve');\n                const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n                let y;\n                try {\n                    y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n                }\n                catch (sqrtError) {\n                    const suffix = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n                    throw new Error('Point is not on curve' + suffix);\n                }\n                const isYOdd = (y & _1n) === _1n;\n                // ECDSA\n                const isHeadOdd = (head & 1) === 1;\n                if (isHeadOdd !== isYOdd)\n                    y = Fp.neg(y);\n                return { x, y };\n            }\n            else if (len === uncompressedLen && head === 0x04) {\n                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n                return { x, y };\n            }\n            else {\n                throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);\n            }\n        },\n    });\n    const numToNByteStr = (num) => ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n    function isBiggerThanHalfOrder(number) {\n        const HALF = CURVE_ORDER >> _1n;\n        return number > HALF;\n    }\n    function normalizeS(s) {\n        return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n    }\n    // slice bytes num\n    const slcNum = (b, from, to) => ut.bytesToNumberBE(b.slice(from, to));\n    /**\n     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n     */\n    class Signature {\n        constructor(r, s, recovery) {\n            this.r = r;\n            this.s = s;\n            this.recovery = recovery;\n            this.assertValidity();\n        }\n        // pair (bytes of r, bytes of s)\n        static fromCompact(hex) {\n            const l = CURVE.nByteLength;\n            hex = ensureBytes('compactSignature', hex, l * 2);\n            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n        }\n        // DER encoded ECDSA signature\n        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n        static fromDER(hex) {\n            const { r, s } = DER.toSig(ensureBytes('DER', hex));\n            return new Signature(r, s);\n        }\n        assertValidity() {\n            // can use assertGE here\n            if (!isWithinCurveOrder(this.r))\n                throw new Error('r must be 0 < r < CURVE.n');\n            if (!isWithinCurveOrder(this.s))\n                throw new Error('s must be 0 < s < CURVE.n');\n        }\n        addRecoveryBit(recovery) {\n            return new Signature(this.r, this.s, recovery);\n        }\n        recoverPublicKey(msgHash) {\n            const { r, s, recovery: rec } = this;\n            const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n            if (rec == null || ![0, 1, 2, 3].includes(rec))\n                throw new Error('recovery id invalid');\n            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n            if (radj >= Fp.ORDER)\n                throw new Error('recovery id 2 or 3 invalid');\n            const prefix = (rec & 1) === 0 ? '02' : '03';\n            const R = Point.fromHex(prefix + numToNByteStr(radj));\n            const ir = invN(radj); // r^-1\n            const u1 = modN(-h * ir); // -hr^-1\n            const u2 = modN(s * ir); // sr^-1\n            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n            if (!Q)\n                throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n            Q.assertValidity();\n            return Q;\n        }\n        // Signatures should be low-s, to prevent malleability.\n        hasHighS() {\n            return isBiggerThanHalfOrder(this.s);\n        }\n        normalizeS() {\n            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n        }\n        // DER-encoded\n        toDERRawBytes() {\n            return ut.hexToBytes(this.toDERHex());\n        }\n        toDERHex() {\n            return DER.hexFromSig({ r: this.r, s: this.s });\n        }\n        // padded bytes of r, then padded bytes of s\n        toCompactRawBytes() {\n            return ut.hexToBytes(this.toCompactHex());\n        }\n        toCompactHex() {\n            return numToNByteStr(this.r) + numToNByteStr(this.s);\n        }\n    }\n    const utils = {\n        isValidPrivateKey(privateKey) {\n            try {\n                normPrivateKeyToScalar(privateKey);\n                return true;\n            }\n            catch (error) {\n                return false;\n            }\n        },\n        normPrivateKeyToScalar: normPrivateKeyToScalar,\n        /**\n         * Produces cryptographically secure private key from random of size\n         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n         */\n        randomPrivateKey: () => {\n            const length = mod.getMinHashLength(CURVE.n);\n            return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n        },\n        /**\n         * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n         * Allows to massively speed-up `point.multiply(scalar)`.\n         * @returns cached point\n         * @example\n         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n         * fast.multiply(privKey); // much faster ECDH now\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n            return point;\n        },\n    };\n    /**\n     * Computes public key for a private key. Checks for validity of the private key.\n     * @param privateKey private key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */\n    function getPublicKey(privateKey, isCompressed = true) {\n        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */\n    function isProbPub(item) {\n        const arr = ut.isBytes(item);\n        const str = typeof item === 'string';\n        const len = (arr || str) && item.length;\n        if (arr)\n            return len === compressedLen || len === uncompressedLen;\n        if (str)\n            return len === 2 * compressedLen || len === 2 * uncompressedLen;\n        if (item instanceof Point)\n            return true;\n        return false;\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from private key and public key.\n     * Checks: 1) private key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param privateA private key\n     * @param publicB different public key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */\n    function getSharedSecret(privateA, publicB, isCompressed = true) {\n        if (isProbPub(privateA))\n            throw new Error('first arg must be private key');\n        if (!isProbPub(publicB))\n            throw new Error('second arg must be public key');\n        const b = Point.fromHex(publicB); // check for being on-curve\n        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    const bits2int = CURVE.bits2int ||\n        function (bytes) {\n            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n            // for some cases, since bytes.length * 8 is not actual bitLength.\n            const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n            const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n            return delta > 0 ? num >> BigInt(delta) : num;\n        };\n    const bits2int_modN = CURVE.bits2int_modN ||\n        function (bytes) {\n            return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n        };\n    // NOTE: pads output with zero as per spec\n    const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n    /**\n     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n     */\n    function int2octets(num) {\n        if (typeof num !== 'bigint')\n            throw new Error('bigint expected');\n        if (!(_0n <= num && num < ORDER_MASK))\n            throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n        // works with order, can have different size than numToField!\n        return ut.numberToBytesBE(num, CURVE.nByteLength);\n    }\n    // Steps A, D of RFC6979 3.2\n    // Creates RFC6979 seed; converts msg/privKey to numbers.\n    // Used only in sign, not in verify.\n    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n    // Also it can be bigger for P224 + SHA256\n    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n        if (['recovered', 'canonical'].some((k) => k in opts))\n            throw new Error('sign() legacy options not supported');\n        const { hash, randomBytes } = CURVE;\n        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n        if (lowS == null)\n            lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n        msgHash = ensureBytes('msgHash', msgHash);\n        if (prehash)\n            msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n        // We can't later call bits2octets, since nested bits2int is broken for curves\n        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n        const h1int = bits2int_modN(msgHash);\n        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n        const seedArgs = [int2octets(d), int2octets(h1int)];\n        // extraEntropy. RFC6979 3.6: additional k' (optional).\n        if (ent != null && ent !== false) {\n            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n            seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n        }\n        const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n        // Converts signature params into point w r/s, checks result for validity.\n        function k2sig(kBytes) {\n            // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n            if (!isWithinCurveOrder(k))\n                return; // Important: all mod() calls here must be done over N\n            const ik = invN(k); // k^-1 mod n\n            const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n            const r = modN(q.x); // r = q.x mod n\n            if (r === _0n)\n                return;\n            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n            const s = modN(ik * modN(m + r * d)); // Not using blinding here\n            if (s === _0n)\n                return;\n            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n            let normS = s;\n            if (lowS && isBiggerThanHalfOrder(s)) {\n                normS = normalizeS(s); // if lowS was passed, ensure s is always\n                recovery ^= 1; // // in the bottom half of N\n            }\n            return new Signature(r, normS, recovery); // use normS, not s\n        }\n        return { seed, k2sig };\n    }\n    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };\n    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };\n    /**\n     * Signs message hash with a private key.\n     * ```\n     * sign(m, d, k) where\n     *   (x, y) = G × k\n     *   r = x mod n\n     *   s = (m + dr)/k mod n\n     * ```\n     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n     * @param privKey private key\n     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n     * @returns signature with recovery param\n     */\n    function sign(msgHash, privKey, opts = defaultSigOpts) {\n        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n        const C = CURVE;\n        const drbg = ut.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\n        return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    }\n    // Enable precomputes. Slows down first publicKey computation by 20ms.\n    Point.BASE._setWindowSize(8);\n    // utils.precompute(8, ProjectivePoint.BASE)\n    /**\n     * Verifies a signature against message hash and public key.\n     * Rejects lowS signatures by default: to override,\n     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   U1 = hs^-1 mod n\n     *   U2 = rs^-1 mod n\n     *   R = U1⋅G - U2⋅P\n     *   mod(R.x, n) == r\n     * ```\n     */\n    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\n        const sg = signature;\n        msgHash = ensureBytes('msgHash', msgHash);\n        publicKey = ensureBytes('publicKey', publicKey);\n        if ('strict' in opts)\n            throw new Error('options.strict was renamed to lowS');\n        const { lowS, prehash } = opts;\n        let _sig = undefined;\n        let P;\n        try {\n            if (typeof sg === 'string' || ut.isBytes(sg)) {\n                // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n                // Since DER can also be 2*nByteLength bytes, we check for it first.\n                try {\n                    _sig = Signature.fromDER(sg);\n                }\n                catch (derError) {\n                    if (!(derError instanceof DER.Err))\n                        throw derError;\n                    _sig = Signature.fromCompact(sg);\n                }\n            }\n            else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n                const { r, s } = sg;\n                _sig = new Signature(r, s);\n            }\n            else {\n                throw new Error('PARSE');\n            }\n            P = Point.fromHex(publicKey);\n        }\n        catch (error) {\n            if (error.message === 'PARSE')\n                throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n            return false;\n        }\n        if (lowS && _sig.hasHighS())\n            return false;\n        if (prehash)\n            msgHash = CURVE.hash(msgHash);\n        const { r, s } = _sig;\n        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n        const is = invN(s); // s^-1\n        const u1 = modN(h * is); // u1 = hs^-1 mod n\n        const u2 = modN(r * is); // u2 = rs^-1 mod n\n        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n        if (!R)\n            return false;\n        const v = modN(R.x);\n        return v === r;\n    }\n    return {\n        CURVE,\n        getPublicKey,\n        getSharedSecret,\n        sign,\n        verify,\n        ProjectivePoint: Point,\n        Signature,\n        utils,\n    };\n}\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio(Fp, Z) {\n    // Generic implementation\n    const q = Fp.ORDER;\n    let l = _0n;\n    for (let o = q - _1n; o % _2n === _0n; o /= _2n)\n        l += _1n;\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n    // 2n ** c1 == 2n << (c1-1)\n    const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n    let sqrtRatio = (u, v) => {\n        let tv1 = c6; // 1. tv1 = c6\n        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n        // 17. for i in (c1, c1 - 1, ..., 2):\n        for (let i = c1; i > _1n; i--) {\n            let tv5 = i - _2n; // 18.    tv5 = i - 2\n            tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n        }\n        return { isValid: isQR, value: tv3 };\n    };\n    if (Fp.ORDER % _4n === _3n) {\n        // sqrt_ratio_3mod4(u, v)\n        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n        sqrtRatio = (u, v) => {\n            let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n            return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n        };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU(Fp, opts) {\n    mod.validateField(Fp);\n    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n        throw new Error('mapToCurveSimpleSWU: invalid opts');\n    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n    if (!Fp.isOdd)\n        throw new Error('Fp.isOdd is not implemented!');\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return (u) => {\n        // prettier-ignore\n        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n        tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n        y = Fp.mul(y, value); // 20.   y = y * y1\n        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n        x = Fp.div(x, tv4); // 25.   x = x / tv4\n        return { x, y };\n    };\n}\n//# sourceMappingURL=weierstrass.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass } from './abstract/weierstrass.js';\n// connects noble-curves to noble-hashes\nexport function getHash(hash) {\n    return {\n        hash,\n        hmac: (key, ...msgs) => hmac(hash, key, concatBytes(...msgs)),\n        randomBytes,\n    };\n}\nexport function createCurve(curveDef, defHash) {\n    const create = (hash) => weierstrass({ ...curveDef, ...getHash(hash) });\n    return Object.freeze({ ...create(defHash), create });\n}\n//# sourceMappingURL=_shortw_utils.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport { mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nimport { bytesToNumberBE, concatBytes, ensureBytes, numberToBytesBE } from './abstract/utils.js';\nimport { createHasher, isogenyMap } from './abstract/hash-to-curve.js';\nimport { createCurve } from './_shortw_utils.js';\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a, b) => (a + b / _2n) / b;\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y) {\n    const P = secp256k1P;\n    // prettier-ignore\n    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n    // prettier-ignore\n    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n    const b2 = (y * y * y) % P; // x^3, 11\n    const b3 = (b2 * b2 * y) % P; // x^7\n    const b6 = (pow2(b3, _3n, P) * b3) % P;\n    const b9 = (pow2(b6, _3n, P) * b3) % P;\n    const b11 = (pow2(b9, _2n, P) * b2) % P;\n    const b22 = (pow2(b11, _11n, P) * b11) % P;\n    const b44 = (pow2(b22, _22n, P) * b22) % P;\n    const b88 = (pow2(b44, _44n, P) * b44) % P;\n    const b176 = (pow2(b88, _88n, P) * b88) % P;\n    const b220 = (pow2(b176, _44n, P) * b44) % P;\n    const b223 = (pow2(b220, _3n, P) * b3) % P;\n    const t1 = (pow2(b223, _23n, P) * b22) % P;\n    const t2 = (pow2(t1, _6n, P) * b2) % P;\n    const root = pow2(t2, _2n, P);\n    if (!Fp.eql(Fp.sqr(root), y))\n        throw new Error('Cannot find square root');\n    return root;\n}\nconst Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\nexport const secp256k1 = createCurve({\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7), // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975\n    Fp, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n        beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n        splitScalar: (k) => {\n            const n = secp256k1N;\n            const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n            const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n            const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n            const b2 = a1;\n            const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n            const c1 = divNearest(b2 * k, n);\n            const c2 = divNearest(-b1 * k, n);\n            let k1 = mod(k - c1 * a1 - c2 * a2, n);\n            let k2 = mod(-c1 * b1 - c2 * b2, n);\n            const k1neg = k1 > POW_2_128;\n            const k2neg = k2 > POW_2_128;\n            if (k1neg)\n                k1 = n - k1;\n            if (k2neg)\n                k2 = n - k2;\n            if (k1 > POW_2_128 || k2 > POW_2_128) {\n                throw new Error('splitScalar: Endomorphism failed, k=' + k);\n            }\n            return { k1neg, k1, k2neg, k2 };\n        },\n    },\n}, sha256);\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\nconst fe = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1P;\nconst ge = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1N;\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES = {};\nfunction taggedHash(tag, ...messages) {\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n        const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n        tagP = concatBytes(tagH, tagH);\n        TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    return sha256(concatBytes(tagP, ...messages));\n}\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n) => numberToBytesBE(n, 32);\nconst modP = (x) => mod(x, secp256k1P);\nconst modN = (x) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv) {\n    let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n    let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n    const scalar = p.hasEvenY() ? d_ : modN(-d_);\n    return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x) {\n    if (!fe(x))\n        throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\n    const xx = modP(x * x);\n    const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n    let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n    if (y % _2n !== _0n)\n        y = modP(-y); // Return the unique point P such that x(P) = x and\n    const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n    p.assertValidity();\n    return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args) {\n    return modN(bytesToNumberBE(taggedHash('BIP0340/challenge', ...args)));\n}\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey) {\n    return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(message, privateKey, auxRand = randomBytes(32)) {\n    const m = ensureBytes('message', message);\n    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n    const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n    const t = numTo32b(d ^ bytesToNumberBE(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n    const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n    const k_ = modN(bytesToNumberBE(rand)); // Let k' = int(rand) mod n\n    if (k_ === _0n)\n        throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n    sig.set(rx, 0);\n    sig.set(numTo32b(modN(k + e * d)), 32);\n    // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n    if (!schnorrVerify(sig, m, px))\n        throw new Error('sign: Invalid signature produced');\n    return sig;\n}\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature, message, publicKey) {\n    const sig = ensureBytes('signature', signature, 64);\n    const m = ensureBytes('message', message);\n    const pub = ensureBytes('publicKey', publicKey, 32);\n    try {\n        const P = lift_x(bytesToNumberBE(pub)); // P = lift_x(int(pk)); fail if that fails\n        const r = bytesToNumberBE(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n        if (!fe(r))\n            return false;\n        const s = bytesToNumberBE(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n        if (!ge(s))\n            return false;\n        const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n        const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n        if (!R || !R.hasEvenY() || R.toAffine().x !== r)\n            return false; // -eP == (n-e)P\n        return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n    }\n    catch (error) {\n        return false;\n    }\n}\nexport const schnorr = /* @__PURE__ */ (() => ({\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    utils: {\n        randomPrivateKey: secp256k1.utils.randomPrivateKey,\n        lift_x,\n        pointToBytes,\n        numberToBytesBE,\n        bytesToNumberBE,\n        taggedHash,\n        mod,\n    },\n}))();\nconst isoMap = /* @__PURE__ */ (() => isogenyMap(Fp, [\n    // xNum\n    [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n    ],\n    // xDen\n    [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n    ],\n    // yDen\n    [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n].map((i) => i.map((j) => BigInt(j)))))();\nconst mapSWU = /* @__PURE__ */ (() => mapToCurveSimpleSWU(Fp, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fp.create(BigInt('-11')),\n}))();\nconst htf = /* @__PURE__ */ (() => createHasher(secp256k1.ProjectivePoint, (scalars) => {\n    const { x, y } = mapSWU(Fp.create(scalars[0]));\n    return isoMap(x, y);\n}, {\n    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256,\n}))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n//# sourceMappingURL=secp256k1.js.map","import { Buffer } from 'buffer';\nimport { ed25519 } from '@noble/curves/ed25519';\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { serialize, deserialize, deserializeUnchecked } from 'borsh';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport { blob } from '@solana/buffer-layout';\nimport { toBigIntLE, toBufferLE } from 'bigint-buffer';\nimport { coerce, instance, string, tuple, literal, unknown, type, number, array, nullable, optional, boolean, record, union, create, any, assert as assert$1 } from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport RpcWebSocketCommonClient from 'rpc-websockets/dist/lib/client';\nimport createRpc from 'rpc-websockets/dist/lib/client/websocket.browser';\nimport { keccak_256 } from '@noble/hashes/sha3';\nimport { secp256k1 } from '@noble/curves/secp256k1';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\n\n/**\n * Ed25519 Keypair\n */\n\nconst generatePrivateKey = ed25519.utils.randomPrivateKey;\nconst generateKeypair = () => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey\n  };\n};\nconst getPublicKey = ed25519.getPublicKey;\nfunction isOnCurve(publicKey) {\n  try {\n    ed25519.ExtendedPoint.fromHex(publicKey);\n    return true;\n  } catch {\n    return false;\n  }\n}\nconst sign = (message, secretKey) => ed25519.sign(message, secretKey.slice(0, 32));\nconst verify = ed25519.verify;\n\nconst toBuffer = arr => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n\n// Class wrapping a plain object\nclass Struct {\n  constructor(properties) {\n    Object.assign(this, properties);\n  }\n  encode() {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n  static decode(data) {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n  static decodeUnchecked(data) {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nclass Enum extends Struct {\n  constructor(properties) {\n    super(properties);\n    this.enum = '';\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\nconst SOLANA_SCHEMA = new Map();\n\nvar _class;\nlet _Symbol$toStringTag;\n\n/**\n * Maximum length of derived pubkey seed\n */\nconst MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nconst PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\n\n/**\n * JSON object representation of PublicKey class\n */\n\nfunction isPublicKeyData(value) {\n  return value._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\n_Symbol$toStringTag = Symbol.toStringTag;\nclass PublicKey extends Struct {\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value) {\n    super({});\n    /** @internal */\n    this._bn = void 0;\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique() {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey) {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58() {\n    return bs58.encode(this.toBytes());\n  }\n  toJSON() {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes() {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer() {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n  get [_Symbol$toStringTag]() {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString() {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(fromPublicKey, seed, programId) {\n    const buffer = Buffer.concat([fromPublicKey.toBuffer(), Buffer.from(seed), programId.toBuffer()]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(seeds, programId) {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([buffer, programId.toBuffer(), Buffer.from('ProgramDerivedAddress')]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(seeds, programId) {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(seeds, programId) {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(seeds, programId) {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData) {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n_class = PublicKey;\nPublicKey.default = new _class('11111111111111111111111111111111');\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']]\n});\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nclass Account {\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey) {\n    /** @internal */\n    this._publicKey = void 0;\n    /** @internal */\n    this._secretKey = void 0;\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey() {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey() {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\n\nconst BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey('BPFLoader1111111111111111111111111111111111');\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nconst PACKET_DATA_SIZE = 1280 - 40 - 8;\nconst VERSION_PREFIX_MASK = 0x7f;\nconst SIGNATURE_LENGTH_IN_BYTES = 64;\n\nclass TransactionExpiredBlockheightExceededError extends Error {\n  constructor(signature) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredBlockheightExceededError.prototype, 'name', {\n  value: 'TransactionExpiredBlockheightExceededError'\n});\nclass TransactionExpiredTimeoutError extends Error {\n  constructor(signature, timeoutSeconds) {\n    super(`Transaction was not confirmed in ${timeoutSeconds.toFixed(2)} seconds. It is ` + 'unknown if it succeeded or failed. Check signature ' + `${signature} using the Solana Explorer or CLI tools.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError'\n});\nclass TransactionExpiredNonceInvalidError extends Error {\n  constructor(signature) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError'\n});\n\nclass MessageAccountKeys {\n  constructor(staticAccountKeys, accountKeysFromLookups) {\n    this.staticAccountKeys = void 0;\n    this.accountKeysFromLookups = void 0;\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n  keySegments() {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n  get(index) {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n  get length() {\n    return this.keySegments().flat().length;\n  }\n  compileInstructions(instructions) {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n    const keyIndexMap = new Map();\n    this.keySegments().flat().forEach((key, index) => {\n      keyIndexMap.set(key.toBase58(), index);\n    });\n    const findKeyIndex = key => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined) throw new Error('Encountered an unknown instruction account key during compilation');\n      return keyIndex;\n    };\n    return instructions.map(instruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta => findKeyIndex(meta.pubkey)),\n        data: instruction.data\n      };\n    });\n  }\n}\n\n/**\n * Layout for a public key\n */\nconst publicKey = (property = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nconst signature = (property = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n/**\n * Layout for a Rust String type\n */\nconst rustString = (property = 'string') => {\n  const rsl = BufferLayout.struct([BufferLayout.u32('length'), BufferLayout.u32('lengthPadding'), BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars')], property);\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n  const rslShim = rsl;\n  rslShim.decode = (b, offset) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n  rslShim.encode = (str, b, offset) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8')\n    };\n    return _encode(data, b, offset);\n  };\n  rslShim.alloc = str => {\n    return BufferLayout.u32().span + BufferLayout.u32().span + Buffer.from(str, 'utf8').length;\n  };\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nconst authorized = (property = 'authorized') => {\n  return BufferLayout.struct([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nconst lockup = (property = 'lockup') => {\n  return BufferLayout.struct([BufferLayout.ns64('unixTimestamp'), BufferLayout.ns64('epoch'), publicKey('custodian')], property);\n};\n\n/**\n *  Layout for a VoteInit object\n */\nconst voteInit = (property = 'voteInit') => {\n  return BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedVoter'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission')], property);\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nconst voteAuthorizeWithSeedArgs = (property = 'voteAuthorizeWithSeedArgs') => {\n  return BufferLayout.struct([BufferLayout.u32('voteAuthorizationType'), publicKey('currentAuthorityDerivedKeyOwnerPubkey'), rustString('currentAuthorityDerivedKeySeed'), publicKey('newAuthorized')], property);\n};\nfunction getAlloc(type, fields) {\n  const getItemAlloc = item => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({\n        layout: item\n      }, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n  let alloc = 0;\n  type.layout.fields.forEach(item => {\n    alloc += getItemAlloc(item);\n  });\n  return alloc;\n}\n\nfunction decodeLength(bytes) {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift();\n    len |= (elem & 0x7f) << size * 7;\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\nfunction encodeLength(bytes, len) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n\nfunction assert (condition, message) {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n\nclass CompiledKeys {\n  constructor(payer, keyMetaMap) {\n    this.payer = void 0;\n    this.keyMetaMap = void 0;\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n  static compile(instructions, payer) {\n    const keyMetaMap = new Map();\n    const getOrInsertDefault = pubkey => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n  getMessageComponents() {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n    const writableSigners = mapEntries.filter(([, meta]) => meta.isSigner && meta.isWritable);\n    const readonlySigners = mapEntries.filter(([, meta]) => meta.isSigner && !meta.isWritable);\n    const writableNonSigners = mapEntries.filter(([, meta]) => !meta.isSigner && meta.isWritable);\n    const readonlyNonSigners = mapEntries.filter(([, meta]) => !meta.isSigner && !meta.isWritable);\n    const header = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length\n    };\n\n    // sanity checks\n    {\n      assert(writableSigners.length > 0, 'Expected at least one writable signer key');\n      const [payerAddress] = writableSigners[0];\n      assert(payerAddress === this.payer.toBase58(), 'Expected first writable signer key to be the fee payer');\n    }\n    const staticAccountKeys = [...writableSigners.map(([address]) => new PublicKey(address)), ...readonlySigners.map(([address]) => new PublicKey(address)), ...writableNonSigners.map(([address]) => new PublicKey(address)), ...readonlyNonSigners.map(([address]) => new PublicKey(address))];\n    return [header, staticAccountKeys];\n  }\n  extractTableLookup(lookupTable) {\n    const [writableIndexes, drainedWritableKeys] = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, keyMeta => !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable);\n    const [readonlyIndexes, drainedReadonlyKeys] = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, keyMeta => !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable);\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n    return [{\n      accountKey: lookupTable.key,\n      writableIndexes,\n      readonlyIndexes\n    }, {\n      writable: drainedWritableKeys,\n      readonly: drainedReadonlyKeys\n    }];\n  }\n\n  /** @internal */\n  drainKeysFoundInLookupTable(lookupTableEntries, keyMetaFilter) {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry => entry.equals(key));\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n\nconst END_OF_BUFFER_ERROR_MESSAGE = 'Reached end of buffer unexpectedly';\n\n/**\n * Delegates to `Array#shift`, but throws if the array is zero-length.\n */\nfunction guardedShift(byteArray) {\n  if (byteArray.length === 0) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.shift();\n}\n\n/**\n * Delegates to `Array#splice`, but throws if the section being spliced out extends past the end of\n * the array.\n */\nfunction guardedSplice(byteArray, ...args) {\n  const [start] = args;\n  if (args.length === 2 // Implies that `deleteCount` was supplied\n  ? start + (args[1] ?? 0) > byteArray.length : start >= byteArray.length) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.splice(...args);\n}\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\n\n/**\n * Message constructor arguments\n */\n\n/**\n * List of instructions to be processed atomically\n */\nclass Message {\n  constructor(args) {\n    this.header = void 0;\n    this.accountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.instructions = void 0;\n    this.indexToProgramIds = new Map();\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix => this.indexToProgramIds.set(ix.programIdIndex, this.accountKeys[ix.programIdIndex]));\n  }\n  get version() {\n    return 'legacy';\n  }\n  get staticAccountKeys() {\n    return this.accountKeys;\n  }\n  get compiledInstructions() {\n    return this.instructions.map(ix => ({\n      programIdIndex: ix.programIdIndex,\n      accountKeyIndexes: ix.accounts,\n      data: bs58.decode(ix.data)\n    }));\n  }\n  get addressTableLookups() {\n    return [];\n  }\n  getAccountKeys() {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n  static compile(args) {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(ix => ({\n      programIdIndex: ix.programIdIndex,\n      accounts: ix.accountKeyIndexes,\n      data: bs58.encode(ix.data)\n    }));\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions\n    });\n  }\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n  isAccountWritable(index) {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n  isProgramId(index) {\n    return this.indexToProgramIds.has(index);\n  }\n  programIds() {\n    return [...this.indexToProgramIds.values()];\n  }\n  nonProgramIds() {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n  serialize() {\n    const numKeys = this.accountKeys.length;\n    let keyCount = [];\n    encodeLength(keyCount, numKeys);\n    const instructions = this.instructions.map(instruction => {\n      const {\n        accounts,\n        programIdIndex\n      } = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n      let keyIndicesCount = [];\n      encodeLength(keyIndicesCount, accounts.length);\n      let dataCount = [];\n      encodeLength(dataCount, data.length);\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data\n      };\n    });\n    let instructionCount = [];\n    encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(instruction.keyIndicesCount.length, 'keyIndicesCount'), BufferLayout.seq(BufferLayout.u8('keyIndex'), instruction.keyIndices.length, 'keyIndices'), BufferLayout.blob(instruction.dataLength.length, 'dataLength'), BufferLayout.seq(BufferLayout.u8('userdatum'), instruction.data.length, 'data')]);\n      const length = instructionLayout.encode(instruction, instructionBuffer, instructionBufferLength);\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n    const signDataLayout = BufferLayout.struct([BufferLayout.blob(1, 'numRequiredSignatures'), BufferLayout.blob(1, 'numReadonlySignedAccounts'), BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'), BufferLayout.blob(keyCount.length, 'keyCount'), BufferLayout.seq(publicKey('key'), numKeys, 'keys'), publicKey('recentBlockhash')]);\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([this.header.numReadonlySignedAccounts]),\n      numReadonlyUnsignedAccounts: Buffer.from([this.header.numReadonlyUnsignedAccounts]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash)\n    };\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const numRequiredSignatures = guardedShift(byteArray);\n    if (numRequiredSignatures !== (numRequiredSignatures & VERSION_PREFIX_MASK)) {\n      throw new Error('Versioned messages must be deserialized with VersionedMessage.deserialize()');\n    }\n    const numReadonlySignedAccounts = guardedShift(byteArray);\n    const numReadonlyUnsignedAccounts = guardedShift(byteArray);\n    const accountCount = decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n    const recentBlockhash = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n    const instructionCount = decodeLength(byteArray);\n    let instructions = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountCount = decodeLength(byteArray);\n      const accounts = guardedSplice(byteArray, 0, accountCount);\n      const dataLength = decodeLength(byteArray);\n      const dataSlice = guardedSplice(byteArray, 0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data\n      });\n    }\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions\n    };\n    return new Message(messageArgs);\n  }\n}\n\n/**\n * Message constructor arguments\n */\n\nclass MessageV0 {\n  constructor(args) {\n    this.header = void 0;\n    this.staticAccountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.compiledInstructions = void 0;\n    this.addressTableLookups = void 0;\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n  get version() {\n    return 0;\n  }\n  get numAccountKeysFromLookups() {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n  getAccountKeys(args) {\n    let accountKeysFromLookups;\n    if (args && 'accountKeysFromLookups' in args && args.accountKeysFromLookups) {\n      if (this.numAccountKeysFromLookups != args.accountKeysFromLookups.writable.length + args.accountKeysFromLookups.readonly.length) {\n        throw new Error('Failed to get account keys because of a mismatch in the number of account keys from lookups');\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (args && 'addressLookupTableAccounts' in args && args.addressLookupTableAccounts) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(args.addressLookupTableAccounts);\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error('Failed to get account keys because address table lookups were not resolved');\n    }\n    return new MessageAccountKeys(this.staticAccountKeys, accountKeysFromLookups);\n  }\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n  isAccountWritable(index) {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce((count, lookup) => count + lookup.writableIndexes.length, 0);\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n  resolveAddressTableLookups(addressLookupTableAccounts) {\n    const accountKeysFromLookups = {\n      writable: [],\n      readonly: []\n    };\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account => account.key.equals(tableLookup.accountKey));\n      if (!tableAccount) {\n        throw new Error(`Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`);\n      }\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(tableAccount.state.addresses[index]);\n        } else {\n          throw new Error(`Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`);\n        }\n      }\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(tableAccount.state.addresses[index]);\n        } else {\n          throw new Error(`Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`);\n        }\n      }\n    }\n    return accountKeysFromLookups;\n  }\n  static compile(args) {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const addressTableLookups = new Array();\n    const accountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array()\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {\n          writable,\n          readonly\n        }] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys, accountKeysFromLookups);\n    const compiledInstructions = accountKeys.compileInstructions(args.instructions);\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups\n    });\n  }\n  serialize() {\n    const encodedStaticAccountKeysLength = Array();\n    encodeLength(encodedStaticAccountKeysLength, this.staticAccountKeys.length);\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array();\n    encodeLength(encodedInstructionsLength, this.compiledInstructions.length);\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array();\n    encodeLength(encodedAddressTableLookupsLength, this.addressTableLookups.length);\n    const messageLayout = BufferLayout.struct([BufferLayout.u8('prefix'), BufferLayout.struct([BufferLayout.u8('numRequiredSignatures'), BufferLayout.u8('numReadonlySignedAccounts'), BufferLayout.u8('numReadonlyUnsignedAccounts')], 'header'), BufferLayout.blob(encodedStaticAccountKeysLength.length, 'staticAccountKeysLength'), BufferLayout.seq(publicKey(), this.staticAccountKeys.length, 'staticAccountKeys'), publicKey('recentBlockhash'), BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'), BufferLayout.blob(serializedInstructions.length, 'serializedInstructions'), BufferLayout.blob(encodedAddressTableLookupsLength.length, 'addressTableLookupsLength'), BufferLayout.blob(serializedAddressTableLookups.length, 'serializedAddressTableLookups')]);\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode({\n      prefix: MESSAGE_VERSION_0_PREFIX,\n      header: this.header,\n      staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n      staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n      instructionsLength: new Uint8Array(encodedInstructionsLength),\n      serializedInstructions,\n      addressTableLookupsLength: new Uint8Array(encodedAddressTableLookupsLength),\n      serializedAddressTableLookups\n    }, serializedMessage);\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n  serializeInstructions() {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array();\n      encodeLength(encodedAccountKeyIndexesLength, instruction.accountKeyIndexes.length);\n      const encodedDataLength = Array();\n      encodeLength(encodedDataLength, instruction.data.length);\n      const instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(encodedAccountKeyIndexesLength.length, 'encodedAccountKeyIndexesLength'), BufferLayout.seq(BufferLayout.u8(), instruction.accountKeyIndexes.length, 'accountKeyIndexes'), BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'), BufferLayout.blob(instruction.data.length, 'data')]);\n      serializedLength += instructionLayout.encode({\n        programIdIndex: instruction.programIdIndex,\n        encodedAccountKeyIndexesLength: new Uint8Array(encodedAccountKeyIndexesLength),\n        accountKeyIndexes: instruction.accountKeyIndexes,\n        encodedDataLength: new Uint8Array(encodedDataLength),\n        data: instruction.data\n      }, serializedInstructions, serializedLength);\n    }\n    return serializedInstructions.slice(0, serializedLength);\n  }\n  serializeAddressTableLookups() {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array();\n      encodeLength(encodedWritableIndexesLength, lookup.writableIndexes.length);\n      const encodedReadonlyIndexesLength = Array();\n      encodeLength(encodedReadonlyIndexesLength, lookup.readonlyIndexes.length);\n      const addressTableLookupLayout = BufferLayout.struct([publicKey('accountKey'), BufferLayout.blob(encodedWritableIndexesLength.length, 'encodedWritableIndexesLength'), BufferLayout.seq(BufferLayout.u8(), lookup.writableIndexes.length, 'writableIndexes'), BufferLayout.blob(encodedReadonlyIndexesLength.length, 'encodedReadonlyIndexesLength'), BufferLayout.seq(BufferLayout.u8(), lookup.readonlyIndexes.length, 'readonlyIndexes')]);\n      serializedLength += addressTableLookupLayout.encode({\n        accountKey: lookup.accountKey.toBytes(),\n        encodedWritableIndexesLength: new Uint8Array(encodedWritableIndexesLength),\n        writableIndexes: lookup.writableIndexes,\n        encodedReadonlyIndexesLength: new Uint8Array(encodedReadonlyIndexesLength),\n        readonlyIndexes: lookup.readonlyIndexes\n      }, serializedAddressTableLookups, serializedLength);\n    }\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n  static deserialize(serializedMessage) {\n    let byteArray = [...serializedMessage];\n    const prefix = guardedShift(byteArray);\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(prefix !== maskedPrefix, `Expected versioned message but received legacy message`);\n    const version = maskedPrefix;\n    assert(version === 0, `Expected versioned message with version 0 but found version ${version}`);\n    const header = {\n      numRequiredSignatures: guardedShift(byteArray),\n      numReadonlySignedAccounts: guardedShift(byteArray),\n      numReadonlyUnsignedAccounts: guardedShift(byteArray)\n    };\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH)));\n    }\n    const recentBlockhash = bs58.encode(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH));\n    const instructionCount = decodeLength(byteArray);\n    const compiledInstructions = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountKeyIndexesLength = decodeLength(byteArray);\n      const accountKeyIndexes = guardedSplice(byteArray, 0, accountKeyIndexesLength);\n      const dataLength = decodeLength(byteArray);\n      const data = new Uint8Array(guardedSplice(byteArray, 0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data\n      });\n    }\n    const addressTableLookupsCount = decodeLength(byteArray);\n    const addressTableLookups = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = decodeLength(byteArray);\n      const writableIndexes = guardedSplice(byteArray, 0, writableIndexesLength);\n      const readonlyIndexesLength = decodeLength(byteArray);\n      const readonlyIndexes = guardedSplice(byteArray, 0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes\n      });\n    }\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups\n    });\n  }\n}\n\n// eslint-disable-next-line no-redeclare\nconst VersionedMessage = {\n  deserializeMessageVersion(serializedMessage) {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n  deserialize: serializedMessage => {\n    const version = VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(`Transaction message version ${version} deserialization is not supported`);\n    }\n  }\n};\n\n/** @internal */\n\n/**\n * Transaction signature as base-58 encoded string\n */\n\nlet TransactionStatus = /*#__PURE__*/function (TransactionStatus) {\n  TransactionStatus[TransactionStatus[\"BLOCKHEIGHT_EXCEEDED\"] = 0] = \"BLOCKHEIGHT_EXCEEDED\";\n  TransactionStatus[TransactionStatus[\"PROCESSED\"] = 1] = \"PROCESSED\";\n  TransactionStatus[TransactionStatus[\"TIMED_OUT\"] = 2] = \"TIMED_OUT\";\n  TransactionStatus[TransactionStatus[\"NONCE_INVALID\"] = 3] = \"NONCE_INVALID\";\n  return TransactionStatus;\n}({});\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\n\n/**\n * Configuration object for Transaction.serialize()\n */\n\n/**\n * @internal\n */\n\n/**\n * Transaction Instruction class\n */\nclass TransactionInstruction {\n  constructor(opts) {\n    /**\n     * Public keys to include in this transaction\n     * Boolean represents whether this pubkey needs to sign the transaction\n     */\n    this.keys = void 0;\n    /**\n     * Program Id to execute\n     */\n    this.programId = void 0;\n    /**\n     * Program input\n     */\n    this.data = Buffer.alloc(0);\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON() {\n    return {\n      keys: this.keys.map(({\n        pubkey,\n        isSigner,\n        isWritable\n      }) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data]\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\n\n/**\n * @internal\n */\n\n/**\n * Transaction class\n */\nclass Transaction {\n  /**\n   * The first (payer) Transaction signature\n   *\n   * @returns {Buffer | null} Buffer of payer's signature\n   */\n  get signature() {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n\n  // Construct a transaction using a durable nonce\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts) {\n    /**\n     * Signatures for the transaction.  Typically created by invoking the\n     * `sign()` method\n     */\n    this.signatures = [];\n    this.feePayer = void 0;\n    /**\n     * The instructions to atomically execute\n     */\n    this.instructions = [];\n    /**\n     * A recent transaction id. Must be populated by the caller\n     */\n    this.recentBlockhash = void 0;\n    /**\n     * the last block chain can advance to before tx is declared expired\n     * */\n    this.lastValidBlockHeight = void 0;\n    /**\n     * Optional Nonce information. If populated, transaction will use a durable\n     * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n     */\n    this.nonceInfo = void 0;\n    /**\n     * If this is a nonce transaction this represents the minimum slot from which\n     * to evaluate if the nonce has advanced when attempting to confirm the\n     * transaction. This protects against a case where the transaction confirmation\n     * logic loads the nonce account from an old slot and assumes the mismatch in\n     * nonce value implies that the nonce has been advanced.\n     */\n    this.minNonceContextSlot = void 0;\n    /**\n     * @internal\n     */\n    this._message = void 0;\n    /**\n     * @internal\n     */\n    this._json = void 0;\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {\n        minContextSlot,\n        nonceInfo\n      } = opts;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')) {\n      const {\n        blockhash,\n        lastValidBlockHeight\n      } = opts;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {\n        recentBlockhash,\n        nonceInfo\n      } = opts;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON() {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo ? {\n        nonce: this.nonceInfo.nonce,\n        nonceInstruction: this.nonceInfo.nonceInstruction.toJSON()\n      } : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({\n        publicKey\n      }) => {\n        return publicKey.toJSON();\n      })\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   *\n   * @param {Array< Transaction | TransactionInstruction | TransactionInstructionCtorFields >} items - Instructions to add to the Transaction\n   */\n  add(...items) {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n    items.forEach(item => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage() {\n    if (this._message && JSON.stringify(this.toJSON()) === JSON.stringify(this._json)) {\n      return this._message;\n    }\n    let recentBlockhash;\n    let instructions;\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n    let feePayer;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(`Transaction instruction index ${i} has undefined program id`);\n      }\n    }\n    const programIds = [];\n    const accountMetas = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({\n          ...accountMeta\n        });\n      });\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable = uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner = uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      const options = {\n        localeMatcher: 'best fit',\n        usage: 'sort',\n        sensitivity: 'variant',\n        ignorePunctuation: false,\n        numeric: false,\n        caseFirst: 'lower'\n      };\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58(), 'en', options);\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn('Transaction references a signature that is unnecessary, ' + 'only the fee payer and instruction signer accounts should sign a transaction. ' + 'This behavior is deprecated and will throw an error in the next major version release.');\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys = [];\n    const unsignedKeys = [];\n    uniqueMetas.forEach(({\n      pubkey,\n      isSigner,\n      isWritable\n    }) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions = instructions.map(instruction => {\n      const {\n        data,\n        programId\n      } = instruction;\n      return {\n        programIdIndex: accountKeys.indexOf(programId.toString()),\n        accounts: instruction.keys.map(meta => accountKeys.indexOf(meta.pubkey.toString())),\n        data: bs58.encode(data)\n      };\n    });\n    compiledInstructions.forEach(instruction => {\n      assert(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => assert(keyIndex >= 0));\n    });\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile() {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(0, message.header.numRequiredSignatures);\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n      if (valid) return message;\n    }\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage() {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   *\n   * @param {Connection} connection Connection to RPC Endpoint.\n   *\n   * @returns {Promise<number | null>} The estimated fee for the transaction\n   */\n  async getEstimatedFee(connection) {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n    const seen = new Set();\n    this.signatures = signers.filter(publicKey => {\n      const key = publicKey.toString();\n      if (seen.has(key)) {\n        return false;\n      } else {\n        seen.add(key);\n        return true;\n      }\n    }).map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  sign(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey\n    }));\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  partialSign(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message, ...signers) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * @param {PublicKey} pubkey Public key that will be added to the transaction.\n   * @param {Buffer} signature An externally created signature to add to the transaction.\n   */\n  addSignature(pubkey, signature) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey, signature) {\n    assert(signature.length === 64);\n    const index = this.signatures.findIndex(sigpair => pubkey.equals(sigpair.publicKey));\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   *\n   * @param {boolean} [requireAllSignatures=true] Require a fully signed Transaction\n   */\n  verifySignatures(requireAllSignatures = true) {\n    const signatureErrors = this._getMessageSignednessErrors(this.serializeMessage(), requireAllSignatures);\n    return !signatureErrors;\n  }\n\n  /**\n   * @internal\n   */\n  _getMessageSignednessErrors(message, requireAllSignatures) {\n    const errors = {};\n    for (const {\n      signature,\n      publicKey\n    } of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          (errors.missing ||= []).push(publicKey);\n        }\n      } else {\n        if (!verify(signature, message, publicKey.toBytes())) {\n          (errors.invalid ||= []).push(publicKey);\n        }\n      }\n    }\n    return errors.invalid || errors.missing ? errors : undefined;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   *\n   * @param {Buffer} [config] Config of transaction.\n   *\n   * @returns {Buffer} Signature of transaction in wire format.\n   */\n  serialize(config) {\n    const {\n      requireAllSignatures,\n      verifySignatures\n    } = Object.assign({\n      requireAllSignatures: true,\n      verifySignatures: true\n    }, config);\n    const signData = this.serializeMessage();\n    if (verifySignatures) {\n      const sigErrors = this._getMessageSignednessErrors(signData, requireAllSignatures);\n      if (sigErrors) {\n        let errorMessage = 'Signature verification failed.';\n        if (sigErrors.invalid) {\n          errorMessage += `\\nInvalid signature for public key${sigErrors.invalid.length === 1 ? '' : '(s)'} [\\`${sigErrors.invalid.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        if (sigErrors.missing) {\n          errorMessage += `\\nMissing signature for public key${sigErrors.missing.length === 1 ? '' : '(s)'} [\\`${sigErrors.missing.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        throw new Error(errorMessage);\n      }\n    }\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData) {\n    const {\n      signatures\n    } = this;\n    const signatureCount = [];\n    encodeLength(signatureCount, signatures.length);\n    const transactionLength = signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    assert(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({\n      signature\n    }, index) => {\n      if (signature !== null) {\n        assert(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(wireTransaction, signatureCount.length + index * 64);\n      }\n    });\n    signData.copy(wireTransaction, signatureCount.length + signatures.length * 64);\n    assert(wireTransaction.length <= PACKET_DATA_SIZE, `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`);\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   *\n   * @param {Buffer | Uint8Array | Array<number>} buffer Signature of wire Transaction\n   *\n   * @returns {Transaction} Transaction associated with the signature\n   */\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const signatureCount = decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   *\n   * @param {Message} message Message of transaction\n   * @param {Array<string>} signatures List of signatures to assign to the transaction\n   *\n   * @returns {Transaction} The populated Transaction\n   */\n  static populate(message, signatures = []) {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature: signature == bs58.encode(DEFAULT_SIGNATURE) ? null : bs58.decode(signature),\n        publicKey: message.accountKeys[index]\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner: transaction.signatures.some(keyObj => keyObj.publicKey.toString() === pubkey.toString()) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account)\n        };\n      });\n      transaction.instructions.push(new TransactionInstruction({\n        keys,\n        programId: message.accountKeys[instruction.programIdIndex],\n        data: bs58.decode(instruction.data)\n      }));\n    });\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n    return transaction;\n  }\n}\n\nclass TransactionMessage {\n  constructor(args) {\n    this.payerKey = void 0;\n    this.instructions = void 0;\n    this.recentBlockhash = void 0;\n    this.payerKey = args.payerKey;\n    this.instructions = args.instructions;\n    this.recentBlockhash = args.recentBlockhash;\n  }\n  static decompile(message, args) {\n    const {\n      header,\n      compiledInstructions,\n      recentBlockhash\n    } = message;\n    const {\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts\n    } = header;\n    const numWritableSignedAccounts = numRequiredSignatures - numReadonlySignedAccounts;\n    assert(numWritableSignedAccounts > 0, 'Message header is invalid');\n    const numWritableUnsignedAccounts = message.staticAccountKeys.length - numRequiredSignatures - numReadonlyUnsignedAccounts;\n    assert(numWritableUnsignedAccounts >= 0, 'Message header is invalid');\n    const accountKeys = message.getAccountKeys(args);\n    const payerKey = accountKeys.get(0);\n    if (payerKey === undefined) {\n      throw new Error('Failed to decompile message because no account keys were found');\n    }\n    const instructions = [];\n    for (const compiledIx of compiledInstructions) {\n      const keys = [];\n      for (const keyIndex of compiledIx.accountKeyIndexes) {\n        const pubkey = accountKeys.get(keyIndex);\n        if (pubkey === undefined) {\n          throw new Error(`Failed to find key for account key index ${keyIndex}`);\n        }\n        const isSigner = keyIndex < numRequiredSignatures;\n        let isWritable;\n        if (isSigner) {\n          isWritable = keyIndex < numWritableSignedAccounts;\n        } else if (keyIndex < accountKeys.staticAccountKeys.length) {\n          isWritable = keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;\n        } else {\n          isWritable = keyIndex - accountKeys.staticAccountKeys.length <\n          // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above\n          accountKeys.accountKeysFromLookups.writable.length;\n        }\n        keys.push({\n          pubkey,\n          isSigner: keyIndex < header.numRequiredSignatures,\n          isWritable\n        });\n      }\n      const programId = accountKeys.get(compiledIx.programIdIndex);\n      if (programId === undefined) {\n        throw new Error(`Failed to find program id for program id index ${compiledIx.programIdIndex}`);\n      }\n      instructions.push(new TransactionInstruction({\n        programId,\n        data: toBuffer(compiledIx.data),\n        keys\n      }));\n    }\n    return new TransactionMessage({\n      payerKey,\n      instructions,\n      recentBlockhash\n    });\n  }\n  compileToLegacyMessage() {\n    return Message.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions\n    });\n  }\n  compileToV0Message(addressLookupTableAccounts) {\n    return MessageV0.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n      addressLookupTableAccounts\n    });\n  }\n}\n\n/**\n * Versioned transaction class\n */\nclass VersionedTransaction {\n  get version() {\n    return this.message.version;\n  }\n  constructor(message, signatures) {\n    this.signatures = void 0;\n    this.message = void 0;\n    if (signatures !== undefined) {\n      assert(signatures.length === message.header.numRequiredSignatures, 'Expected signatures length to be equal to the number of required signatures');\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n  serialize() {\n    const serializedMessage = this.message.serialize();\n    const encodedSignaturesLength = Array();\n    encodeLength(encodedSignaturesLength, this.signatures.length);\n    const transactionLayout = BufferLayout.struct([BufferLayout.blob(encodedSignaturesLength.length, 'encodedSignaturesLength'), BufferLayout.seq(signature(), this.signatures.length, 'signatures'), BufferLayout.blob(serializedMessage.length, 'serializedMessage')]);\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode({\n      encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n      signatures: this.signatures,\n      serializedMessage\n    }, serializedTransaction);\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n  static deserialize(serializedTransaction) {\n    let byteArray = [...serializedTransaction];\n    const signatures = [];\n    const signaturesLength = decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(new Uint8Array(guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES)));\n    }\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n  sign(signers) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey => pubkey.equals(signer.publicKey));\n      assert(signerIndex >= 0, `Cannot sign with non signer key ${signer.publicKey.toBase58()}`);\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n  addSignature(publicKey, signature) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);\n    const signerIndex = signerPubkeys.findIndex(pubkey => pubkey.equals(publicKey));\n    assert(signerIndex >= 0, `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`);\n    this.signatures[signerIndex] = signature;\n  }\n}\n\n// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nconst NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nconst DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nconst NUM_SLOTS_PER_SECOND = NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nconst MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n\nconst SYSVAR_CLOCK_PUBKEY = new PublicKey('SysvarC1ock11111111111111111111111111111111');\nconst SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey('SysvarEpochSchedu1e111111111111111111111111');\nconst SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey('Sysvar1nstructions1111111111111111111111111');\nconst SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey('SysvarRecentB1ockHashes11111111111111111111');\nconst SYSVAR_RENT_PUBKEY = new PublicKey('SysvarRent111111111111111111111111111111111');\nconst SYSVAR_REWARDS_PUBKEY = new PublicKey('SysvarRewards111111111111111111111111111111');\nconst SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey('SysvarS1otHashes111111111111111111111111111');\nconst SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey('SysvarS1otHistory11111111111111111111111111');\nconst SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey('SysvarStakeHistory1111111111111111111111111');\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nasync function sendAndConfirmTransaction(connection, transaction, signers, options) {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot\n  };\n  const signature = await connection.sendTransaction(transaction, signers, sendOptions);\n  let status;\n  if (transaction.recentBlockhash != null && transaction.lastValidBlockHeight != null) {\n    status = (await connection.confirmTransaction({\n      abortSignal: options?.abortSignal,\n      signature: signature,\n      blockhash: transaction.recentBlockhash,\n      lastValidBlockHeight: transaction.lastValidBlockHeight\n    }, options && options.commitment)).value;\n  } else if (transaction.minNonceContextSlot != null && transaction.nonceInfo != null) {\n    const {\n      nonceInstruction\n    } = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (await connection.confirmTransaction({\n      abortSignal: options?.abortSignal,\n      minContextSlot: transaction.minNonceContextSlot,\n      nonceAccountPubkey,\n      nonceValue: transaction.nonceInfo.nonce,\n      signature\n    }, options && options.commitment)).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn('sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' + 'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' + 'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.');\n    }\n    status = (await connection.confirmTransaction(signature, options && options.commitment)).value;\n  }\n  if (status.err) {\n    throw new Error(`Transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n  return signature;\n}\n\n// zzz\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * @internal\n */\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nfunction encodeData(type, fields) {\n  const allocLength = type.layout.span >= 0 ? type.layout.span : getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({\n    instruction: type.index\n  }, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nfunction decodeData$1(type, buffer) {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n  if (data.instruction !== type.index) {\n    throw new Error(`invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`);\n  }\n  return data;\n}\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nconst FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct([BufferLayout.u32('version'), BufferLayout.u32('state'), publicKey('authorizedPubkey'), publicKey('nonce'), BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator')]);\nconst NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\n\n/**\n * NonceAccount class\n */\nclass NonceAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.authorizedPubkey = void 0;\n    this.nonce = void 0;\n    this.feeCalculator = void 0;\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(buffer) {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator\n    });\n  }\n}\n\nconst encodeDecode = layout => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {\n    decode,\n    encode\n  };\n};\nconst bigInt = length => property => {\n  const layout = blob(length, property);\n  const {\n    encode,\n    decode\n  } = encodeDecode(layout);\n  const bigIntLayout = layout;\n  bigIntLayout.decode = (buffer, offset) => {\n    const src = decode(buffer, offset);\n    return toBigIntLE(Buffer.from(src));\n  };\n  bigIntLayout.encode = (bigInt, buffer, offset) => {\n    const src = toBufferLE(bigInt, length);\n    return encode(src, buffer, offset);\n  };\n  return bigIntLayout;\n};\nconst u64 = bigInt(8);\n\n/**\n * Create account system transaction params\n */\n\n/**\n * Transfer system transaction params\n */\n\n/**\n * Assign system transaction params\n */\n\n/**\n * Create account with seed system transaction params\n */\n\n/**\n * Create nonce account system transaction params\n */\n\n/**\n * Create nonce account with seed system transaction params\n */\n\n/**\n * Initialize nonce account system instruction params\n */\n\n/**\n * Advance nonce account system instruction params\n */\n\n/**\n * Withdraw nonce account system transaction params\n */\n\n/**\n * Authorize nonce account system transaction params\n */\n\n/**\n * Allocate account system transaction params\n */\n\n/**\n * Allocate account with seed system transaction params\n */\n\n/**\n * Assign account with seed system transaction params\n */\n\n/**\n * Transfer with seed system transaction params\n */\n\n/** Decoded transfer system transaction instruction */\n\n/** Decoded transferWithSeed system transaction instruction */\n\n/**\n * System Instruction class\n */\nclass SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Create, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Transfer, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports,\n      seed,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      space\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Allocate, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Assign, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      base,\n      seed,\n      lamports,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      authorized\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized)\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized)\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nconst SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('programId')])\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports')])\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('space')])\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), publicKey('programId')])\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports'), rustString('seed'), publicKey('programId')])\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nclass SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.newAccountPubkey,\n        isSigner: true,\n        isWritable: true\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports)\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    let keys = [{\n      pubkey: params.fromPubkey,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: params.newAccountPubkey,\n      isSigner: false,\n      isWritable: true\n    }];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(params) {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    } else {\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    }\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey\n    };\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer())\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {\n      lamports: params.lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n}\nSystemProgram.programId = new PublicKey('11111111111111111111111111111111');\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nclass Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return 2 * (\n    // Every transaction requires two signatures (payer + program)\n    Math.ceil(dataLength / Loader.chunkSize) + 1 +\n    // Add one for Create transaction\n    1) // Add one for Finalize transaction\n    ;\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(connection, payer, program, programId, data) {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(data.length);\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(program.publicKey, 'confirmed');\n      let transaction = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.allocate({\n            accountPubkey: program.publicKey,\n            space: data.length\n          }));\n        }\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.assign({\n            accountPubkey: program.publicKey,\n            programId\n          }));\n        }\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.transfer({\n            fromPubkey: payer.publicKey,\n            toPubkey: program.publicKey,\n            lamports: balanceNeeded - programInfo.lamports\n          }));\n        }\n      } else {\n        transaction = new Transaction().add(SystemProgram.createAccount({\n          fromPubkey: payer.publicKey,\n          newAccountPubkey: program.publicKey,\n          lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n          space: data.length,\n          programId\n        }));\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed'\n        });\n      }\n    }\n    const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.u32('offset'), BufferLayout.u32('bytesLength'), BufferLayout.u32('bytesLengthPadding'), BufferLayout.seq(BufferLayout.u8('byte'), BufferLayout.offset(BufferLayout.u32(), -8), 'bytes')]);\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode({\n        instruction: 0,\n        // Load instruction\n        offset,\n        bytes: bytes,\n        bytesLength: 0,\n        bytesLengthPadding: 0\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }],\n        programId,\n        data\n      });\n      transactions.push(sendAndConfirmTransaction(connection, transaction, [payer, program], {\n        commitment: 'confirmed'\n      }));\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode({\n        instruction: 1 // Finalize instruction\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId,\n        data\n      });\n      const deployCommitment = 'processed';\n      const finalizeSignature = await connection.sendTransaction(transaction, [payer, program], {\n        preflightCommitment: deployCommitment\n      });\n      const {\n        context,\n        value\n      } = await connection.confirmTransaction({\n        signature: finalizeSignature,\n        lastValidBlockHeight: transaction.lastValidBlockHeight,\n        blockhash: transaction.recentBlockhash\n      }, deployCommitment);\n      if (value.err) {\n        throw new Error(`Transaction ${finalizeSignature} failed (${JSON.stringify(value)})`);\n      }\n      // We prevent programs from being usable until the slot after their deployment.\n      // See https://github.com/solana-labs/solana/pull/29654\n      while (true // eslint-disable-line no-constant-condition\n      ) {\n        try {\n          const currentSlot = await connection.getSlot({\n            commitment: deployCommitment\n          });\n          if (currentSlot > context.slot) {\n            break;\n          }\n        } catch {\n          /* empty */\n        }\n        await new Promise(resolve => setTimeout(resolve, Math.round(MS_PER_SLOT / 2)));\n      }\n    }\n\n    // success\n    return true;\n  }\n}\nLoader.chunkSize = CHUNK_SIZE;\n\n/**\n * @deprecated Deprecated since Solana v1.17.20.\n */\nconst BPF_LOADER_PROGRAM_ID = new PublicKey('BPFLoader2111111111111111111111111111111111');\n\n/**\n * Factory class for transactions to interact with a program loader\n *\n * @deprecated Deprecated since Solana v1.17.20.\n */\nclass BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(connection, payer, program, elf, loaderProgramId) {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n\nfunction getDefaultExportFromCjs (x) {\n\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\nvar objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nvar fastStableStringify = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n\nvar fastStableStringify$1 = /*@__PURE__*/getDefaultExportFromCjs(fastStableStringify);\n\nconst MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nclass EpochSchedule {\n  constructor(slotsPerEpoch, leaderScheduleSlotOffset, warmup, firstNormalEpoch, firstNormalSlot) {\n    /** The maximum number of slots in each epoch */\n    this.slotsPerEpoch = void 0;\n    /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n    this.leaderScheduleSlotOffset = void 0;\n    /** Indicates whether epochs start short and grow */\n    this.warmup = void 0;\n    /** The first epoch with `slotsPerEpoch` slots */\n    this.firstNormalEpoch = void 0;\n    /** The first slot of `firstNormalEpoch` */\n    this.firstNormalSlot = void 0;\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n  getEpoch(slot) {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n  getEpochAndSlotIndex(slot) {\n    if (slot < this.firstNormalSlot) {\n      const epoch = trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) - trailingZeros(MINIMUM_SLOT_PER_EPOCH) - 1;\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n  getFirstSlotInEpoch(epoch) {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (epoch - this.firstNormalEpoch) * this.slotsPerEpoch + this.firstNormalSlot;\n    }\n  }\n  getLastSlotInEpoch(epoch) {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n  getSlotsInEpoch(epoch) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n\nclass SendTransactionError extends Error {\n  constructor(message, logs) {\n    super(message);\n    this.logs = void 0;\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nconst SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016\n};\nclass SolanaJSONRPCError extends Error {\n  constructor({\n    code,\n    message,\n    data\n  }, customMessage) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = void 0;\n    this.data = void 0;\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n\nvar fetchImpl = globalThis.fetch;\n\nclass RpcWebSocketClient extends RpcWebSocketCommonClient {\n  constructor(address, options, generate_request_id) {\n    const webSocketFactory = url => {\n      const rpc = createRpc(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = rpc.socket;\n      } else {\n        this.underlyingSocket = rpc;\n      }\n      return rpc;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n    this.underlyingSocket = void 0;\n  }\n  call(...args) {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...args);\n    }\n    return Promise.reject(new Error('Tried to call a JSON-RPC method `' + args[0] + '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' + readyState + ')'));\n  }\n  notify(...args) {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...args);\n    }\n    return Promise.reject(new Error('Tried to send a JSON-RPC notification `' + args[0] + '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' + readyState + ')'));\n  }\n}\n\n/**\n * @internal\n */\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nfunction decodeData(type, data) {\n  let decoded;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(`invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`);\n  }\n  return decoded;\n}\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\nclass AddressLookupTableAccount {\n  constructor(args) {\n    this.key = void 0;\n    this.state = void 0;\n    this.key = args.key;\n    this.state = args.state;\n  }\n  isActive() {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n  static deserialize(accountData) {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {\n      addresses\n    } = BufferLayout.struct([BufferLayout.seq(publicKey(), numSerializedAddresses, 'addresses')]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority: meta.authority.length !== 0 ? new PublicKey(meta.authority[0]) : undefined,\n      addresses: addresses.map(address => new PublicKey(address))\n    };\n  }\n}\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct([BufferLayout.u32('typeIndex'), u64('deactivationSlot'), BufferLayout.nu64('lastExtendedSlot'), BufferLayout.u8('lastExtendedStartIndex'), BufferLayout.u8(),\n  // option\n  BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u8(), -1), 'authority')])\n};\n\nconst URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\nfunction makeWebsocketUrl(endpoint) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [_,\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  hostish, portWithColon, rest] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort = portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explicitly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n\nconst PublicKeyFromString = coerce(instance(PublicKey), string(), value => new PublicKey(value));\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\nconst BufferFromRawAccountData = coerce(instance(Buffer), RawAccountDataResult, value => Buffer.from(value[0], 'base64'));\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nconst BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\n\n/** @internal */\n/** @internal */\n/** @internal */\n/** @internal */\n\n/** @internal */\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\n\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\n\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\n\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\n\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\n\n/**\n * @internal\n */\n\n/**\n * Extra contextual information for RPC responses\n */\n\n/**\n * Options for sending transactions\n */\n\n/**\n * Options for confirming transactions\n */\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\n\n/**\n * Options for getSignaturesForAddress\n */\n\n/**\n * RPC Response with extra contextual information\n */\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\n\n/**\n * This type represents all transaction confirmation strategies\n */\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig(commitmentOrConfig) {\n  let commitment;\n  let config;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {\n      commitment: specifiedCommitment,\n      ...specifiedConfig\n    } = commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {\n    commitment,\n    config\n  };\n}\n\n/**\n * @internal\n */\nfunction createRpcResult(result) {\n  return union([type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    result\n  }), type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    error: type({\n      code: unknown(),\n      message: string(),\n      data: optional(any())\n    })\n  })]);\n}\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult(schema) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema)\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext(value) {\n  return jsonRpcResult(type({\n    context: type({\n      slot: number()\n    }),\n    value\n  }));\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext(value) {\n  return type({\n    context: type({\n      slot: number()\n    }),\n    value\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(version, response) {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(accountKey => new PublicKey(accountKey)),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data)\n      })),\n      addressTableLookups: response.addressTableLookups\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\n// Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\n\n/**\n * Configuration object for changing `isBlockhashValid` query behavior\n */\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\n\n/**\n * Configuration object for changing query behavior\n */\n\n/**\n * Information describing a cluster node\n */\n\n/**\n * Information describing a vote account\n */\n\n/**\n * A collection of cluster vote accounts\n */\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\n\nconst GetInflationGovernorResult = type({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number()\n});\n\n/**\n * The inflation reward for an epoch\n */\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(array(nullable(type({\n  epoch: number(),\n  effectiveSlot: number(),\n  amount: number(),\n  postBalance: number(),\n  commission: optional(nullable(number()))\n}))));\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesResult = array(type({\n  slot: number(),\n  prioritizationFee: number()\n}));\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = type({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number()\n});\n\n/**\n * Information about the current epoch\n */\n\nconst GetEpochInfoResult = type({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number())\n});\nconst GetEpochScheduleResult = type({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number()\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([type({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = type({\n  err: TransactionErrorResult\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\n\nconst VersionResult = type({\n  'solana-core': string(),\n  'feature-set': optional(number())\n});\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(type({\n  err: nullable(union([type({}), string()])),\n  logs: nullable(array(string())),\n  accounts: optional(nullable(array(nullable(type({\n    executable: boolean(),\n    owner: string(),\n    lamports: number(),\n    data: array(string()),\n    rentEpoch: optional(number())\n  }))))),\n  unitsConsumed: optional(number()),\n  returnData: optional(nullable(type({\n    programId: string(),\n    data: tuple([string(), literal('base64')])\n  })))\n}));\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\n\n/**\n * A processed transaction from the RPC API\n */\n\n/**\n * A processed transaction from the RPC API\n */\n\n/**\n * A processed transaction message from the RPC API\n */\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\n\n/**\n * A partially decoded transaction instruction\n */\n\n/**\n * A parsed transaction message account\n */\n\n/**\n * A parsed transaction instruction\n */\n\n/**\n * A parsed address table lookup\n */\n\n/**\n * A parsed transaction message\n */\n\n/**\n * A parsed transaction\n */\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\n\n/**\n * A parsed transaction on the ledger with meta\n */\n\n/**\n * A processed block fetched from the RPC API\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\n\n/**\n * A block with parsed transactions\n */\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\n\n/**\n * A processed block fetched from the RPC API\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\n\n/**\n * A Block on the ledger with signatures only\n */\n\n/**\n * recent block production information\n */\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(type({\n  byIdentity: record(string(), array(number())),\n  range: type({\n    firstSlot: number(),\n    lastSlot: number()\n  })\n}));\n\n/**\n * A performance sample\n */\n\nfunction createRpcClient(url, httpHeaders, customFetch, fetchMiddleware, disableRetryOnRateLimit, httpAgent) {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent;\n  {\n    if (httpAgent != null) {\n      console.warn('You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' + 'It has been ignored; `httpAgent` is only used in Node environments.');\n    }\n  }\n  let fetchWithMiddleware;\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise((resolve, reject) => {\n        try {\n          fetchMiddleware(info, init, (modifiedInfo, modifiedInit) => resolve([modifiedInfo, modifiedInit]));\n        } catch (error) {\n          reject(error);\n        }\n      });\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign({\n        'Content-Type': 'application/json'\n      }, httpHeaders || {}, COMMON_HTTP_HEADERS)\n    };\n    try {\n      let too_many_requests_retries = 5;\n      let res;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.error(`Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`);\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n  return clientBrowser;\n}\nfunction createRpcRequest(client) {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\nfunction createRpcBatchRequest(client) {\n  return requests => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n      const batch = requests.map(params => {\n        return client.request(params.methodName, params.args);\n      });\n      client.request(batch, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(GetRecentPrioritizationFeesResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(type({\n  total: number(),\n  circulating: number(),\n  nonCirculating: number(),\n  nonCirculatingAccounts: array(PublicKeyFromString)\n}));\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = type({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n});\n\n/**\n * Token address and balance.\n */\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(array(type({\n  address: PublicKeyFromString,\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n})));\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: BufferFromRawAccountData,\n    rentEpoch: number()\n  })\n})));\nconst ParsedAccountDataResult = type({\n  program: string(),\n  parsed: unknown(),\n  space: number()\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: ParsedAccountDataResult,\n    rentEpoch: number()\n  })\n})));\n\n/**\n * Pair of an account address and its balance\n */\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(array(type({\n  lamports: number(),\n  address: PublicKeyFromString\n})));\n\n/**\n * @internal\n */\nconst AccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number()\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\nconst ParsedOrRawAccountData = coerce(union([instance(Buffer), ParsedAccountDataResult]), union([RawAccountDataResult, ParsedAccountDataResult]), value => {\n  if (Array.isArray(value)) {\n    return create(value, BufferFromRawAccountData);\n  } else {\n    return value;\n  }\n});\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number()\n});\nconst KeyedParsedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = type({\n  state: union([literal('active'), literal('inactive'), literal('activating'), literal('deactivating')]),\n  active: number(),\n  inactive: number()\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult)\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult)\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = type({\n  parent: number(),\n  slot: number(),\n  root: number()\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = type({\n  subscription: number(),\n  result: SlotInfoResult\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([type({\n  type: union([literal('firstShredReceived'), literal('completed'), literal('optimisticConfirmation'), literal('root')]),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('createdBank'),\n  parent: number(),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('frozen'),\n  slot: number(),\n  timestamp: number(),\n  stats: type({\n    numTransactionEntries: number(),\n    numSuccessfulTransactions: number(),\n    numFailedTransactions: number(),\n    maxTransactionsPerEntry: number()\n  })\n}), type({\n  type: literal('dead'),\n  slot: number(),\n  timestamp: number(),\n  err: string()\n})]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = type({\n  subscription: number(),\n  result: SlotUpdateResult\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(union([SignatureStatusResult, SignatureReceivedResult]))\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = type({\n  subscription: number(),\n  result: number()\n});\nconst ContactInfoResult = type({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string())\n});\nconst VoteAccountInfoResult = type({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number())\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(type({\n  current: array(VoteAccountInfoResult),\n  delinquent: array(VoteAccountInfoResult)\n}));\nconst ConfirmationStatus = union([literal('processed'), literal('confirmed'), literal('finalized')]);\nconst SignatureStatusResponse = type({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus)\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(array(nullable(SignatureStatusResponse)));\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\nconst AddressTableLookupStruct = type({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number())\n});\nconst ConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(string()),\n    header: type({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number()\n    }),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    })),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct))\n  })\n});\nconst AnnotatedAccountKey = type({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')]))\n});\nconst ConfirmedTransactionAccountsModeResult = type({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string())\n});\nconst ParsedInstructionResult = type({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString\n});\nconst RawInstructionResult = type({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString\n});\nconst InstructionResult = union([RawInstructionResult, ParsedInstructionResult]);\nconst UnknownInstructionResult = union([type({\n  parsed: unknown(),\n  program: string(),\n  programId: string()\n}), type({\n  accounts: array(string()),\n  data: string(),\n  programId: string()\n})]);\nconst ParsedOrRawInstruction = coerce(InstructionResult, UnknownInstructionResult, value => {\n  if ('accounts' in value) {\n    return create(value, RawInstructionResult);\n  } else {\n    return create(value, ParsedInstructionResult);\n  }\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct)))\n  })\n});\nconst TokenBalanceResult = type({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult\n});\nconst LoadedAddressesResult = type({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString)\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    }))\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number())\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(ParsedOrRawInstruction)\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number())\n});\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = type({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number()))\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionAccountsModeResult,\n    meta: nullable(ConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ParsedConfirmedTransactionResult,\n    meta: nullable(ParsedConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionAccountsModeResult,\n    meta: nullable(ParsedConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  signatures: array(string()),\n  blockTime: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  meta: nullable(ConfirmedTransactionMetaResult),\n  blockTime: optional(nullable(number())),\n  transaction: ConfirmedTransactionResult,\n  version: optional(TransactionVersionStruct)\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  transaction: ParsedConfirmedTransactionResult,\n  meta: nullable(ParsedConfirmedTransactionMetaResult),\n  blockTime: optional(nullable(number())),\n  version: optional(TransactionVersionStruct)\n})));\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n}));\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  lastValidBlockHeight: number()\n}));\n\n/**\n * Expected JSON RPC response for the \"isBlockhashValid\" message\n */\nconst IsBlockhashValidRpcResult = jsonRpcResultAndContext(boolean());\nconst PerfSampleResult = type({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number()\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(array(PerfSampleResult));\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(nullable(type({\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n})));\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\n\n/**\n * Parsed account data\n */\n\n/**\n * Stake Activation data\n */\n\n/**\n * Data slice argument for getProgramAccounts\n */\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\n\n/**\n * A filter object for getProgramAccounts\n */\n\n/**\n * Configuration object for getProgramAccounts requests\n */\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\n\n/**\n * Configuration object for getMultipleAccounts\n */\n\n/**\n * Configuration object for `getStakeActivation`\n */\n\n/**\n * Configuration object for `getStakeActivation`\n */\n\n/**\n * Configuration object for `getStakeActivation`\n */\n\n/**\n * Configuration object for `getNonce`\n */\n\n/**\n * Configuration object for `getNonceAndContext`\n */\n\n/**\n * Information describing an account\n */\n\n/**\n * Account information identified by pubkey\n */\n\n/**\n * Callback function for account change notifications\n */\n\n/**\n * Callback function for program account change notifications\n */\n\n/**\n * Callback function for slot change notifications\n */\n\n/**\n * Callback function for slot update notifications\n */\n\n/**\n * Callback function for signature status notifications\n */\n\n/**\n * Signature status notification with transaction result\n */\n\n/**\n * Signature received notification\n */\n\n/**\n * Callback function for signature notifications\n */\n\n/**\n * Signature subscription options\n */\n\n/**\n * Callback function for root change notifications\n */\n\n/**\n * @internal\n */\nconst LogsResult = type({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string()\n});\n\n/**\n * Logs result.\n */\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = type({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number()\n});\n\n/**\n * Filter for log subscriptions.\n */\n\n/**\n * Callback function for log notifications.\n */\n\n/**\n * Signature result\n */\n\n/**\n * Transaction error\n */\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\n\n/**\n * Signature status\n */\n\n/**\n * A confirmed signature with its status\n */\n\n/**\n * An object defining headers to be passed to the RPC server\n */\n\n/**\n * The type of the JavaScript `fetch()` API\n */\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\n\n/**\n * Configuration for instantiating a Connection\n */\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${\"0.0.0-development\" }`\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nclass Connection {\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(endpoint, _commitmentOrConfig) {\n    /** @internal */\n    this._commitment = void 0;\n    /** @internal */\n    this._confirmTransactionInitialTimeout = void 0;\n    /** @internal */\n    this._rpcEndpoint = void 0;\n    /** @internal */\n    this._rpcWsEndpoint = void 0;\n    /** @internal */\n    this._rpcClient = void 0;\n    /** @internal */\n    this._rpcRequest = void 0;\n    /** @internal */\n    this._rpcBatchRequest = void 0;\n    /** @internal */\n    this._rpcWebSocket = void 0;\n    /** @internal */\n    this._rpcWebSocketConnected = false;\n    /** @internal */\n    this._rpcWebSocketHeartbeat = null;\n    /** @internal */\n    this._rpcWebSocketIdleTimeout = null;\n    /** @internal\n     * A number that we increment every time an active connection closes.\n     * Used to determine whether the same socket connection that was open\n     * when an async operation started is the same one that's active when\n     * its continuation fires.\n     *\n     */\n    this._rpcWebSocketGeneration = 0;\n    /** @internal */\n    this._disableBlockhashCaching = false;\n    /** @internal */\n    this._pollingBlockhash = false;\n    /** @internal */\n    this._blockhashInfo = {\n      latestBlockhash: null,\n      lastFetch: 0,\n      transactionSignatures: [],\n      simulatedSignatures: []\n    };\n    /** @internal */\n    this._nextClientSubscriptionId = 0;\n    /** @internal */\n    this._subscriptionDisposeFunctionsByClientSubscriptionId = {};\n    /** @internal */\n    this._subscriptionHashByClientSubscriptionId = {};\n    /** @internal */\n    this._subscriptionStateChangeCallbacksByHash = {};\n    /** @internal */\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    /** @internal */\n    this._subscriptionsByHash = {};\n    /**\n     * Special case.\n     * After a signature is processed, RPCs automatically dispose of the\n     * subscription on the server side. We need to track which of these\n     * subscriptions have been disposed in such a way, so that we know\n     * whether the client is dealing with a not-yet-processed signature\n     * (in which case we must tear down the server subscription) or an\n     * already-processed signature (in which case the client can simply\n     * clear out the subscription locally without telling the server).\n     *\n     * NOTE: There is a proposal to eliminate this special case, here:\n     * https://github.com/solana-labs/solana/issues/18892\n     */\n    /** @internal */\n    this._subscriptionsAutoDisposedByRpc = new Set();\n    /*\n     * Returns the current block height of the node\n     */\n    this.getBlockHeight = (() => {\n      const requestPromises = {};\n      return async commitmentOrConfig => {\n        const {\n          commitment,\n          config\n        } = extractCommitmentFromConfig(commitmentOrConfig);\n        const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n        const requestHash = fastStableStringify$1(args);\n        requestPromises[requestHash] = requestPromises[requestHash] ?? (async () => {\n          try {\n            const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n            const res = create(unsafeRes, jsonRpcResult(number()));\n            if ('error' in res) {\n              throw new SolanaJSONRPCError(res.error, 'failed to get block height information');\n            }\n            return res.result;\n          } finally {\n            delete requestPromises[requestHash];\n          }\n        })();\n        return await requestPromises[requestHash];\n      };\n    })();\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (_commitmentOrConfig && typeof _commitmentOrConfig === 'string') {\n      this._commitment = _commitmentOrConfig;\n    } else if (_commitmentOrConfig) {\n      this._commitment = _commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout = _commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = _commitmentOrConfig.wsEndpoint;\n      httpHeaders = _commitmentOrConfig.httpHeaders;\n      fetch = _commitmentOrConfig.fetch;\n      fetchMiddleware = _commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = _commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = _commitmentOrConfig.httpAgent;\n    }\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n    this._rpcClient = createRpcClient(endpoint, httpHeaders, fetch, fetchMiddleware, disableRetryOnRateLimit, httpAgent);\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on('accountNotification', this._wsOnAccountNotification.bind(this));\n    this._rpcWebSocket.on('programNotification', this._wsOnProgramAccountNotification.bind(this));\n    this._rpcWebSocket.on('slotNotification', this._wsOnSlotNotification.bind(this));\n    this._rpcWebSocket.on('slotsUpdatesNotification', this._wsOnSlotUpdatesNotification.bind(this));\n    this._rpcWebSocket.on('signatureNotification', this._wsOnSignatureNotification.bind(this));\n    this._rpcWebSocket.on('rootNotification', this._wsOnRootNotification.bind(this));\n    this._rpcWebSocket.on('logsNotification', this._wsOnLogsNotification.bind(this));\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment() {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint() {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(publicKey, commitmentOrConfig) {\n    /** @internal */\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get balance for ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(publicKey, commitmentOrConfig) {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig).then(x => x.value).catch(e => {\n      throw new Error('failed to get balance of account ' + publicKey.toBase58() + ': ' + e);\n    });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot) {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get block time for slot ${slot}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot() {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get minimum ledger slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock() {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get first available block');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(config) {\n    let configArg = {};\n    if (typeof config === 'string') {\n      configArg = {\n        commitment: config\n      };\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: config && config.commitment || this.commitment\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment\n      };\n    }\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(tokenMintAddress, commitment) {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(tokenAddress, commitment) {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token account balance');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<GetProgramAccountsResponse>}\n   */\n  async getTokenAccountsByOwner(ownerAddress, filter, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    let _args = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get token accounts owned by account ${ownerAddress.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(ownerAddress, filter, commitment) {\n    let _args = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get token accounts owned by account ${ownerAddress.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(config) {\n    const arg = {\n      ...config,\n      commitment: config && config.commitment || this.commitment\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(mintAddress, commitment) {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(publicKey, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(AccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info about account ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(publicKey, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info about account ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(publicKey, commitmentOrConfig) {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + e);\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(publicKeys, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info for accounts ${keys}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(AccountInfoResult))));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info for accounts ${keys}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(publicKeys, commitmentOrConfig) {\n    const res = await this.getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig);\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(publicKey, commitmentOrConfig, epoch) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined /* encoding */, {\n      ...config,\n      epoch: epoch != null ? epoch : config?.epoch\n    });\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get Stake Activation ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(programId, configOrCommitment) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(configOrCommitment);\n    const {\n      encoding,\n      ...configWithoutEncoding\n    } = config || {};\n    const args = this._buildArgs([programId.toBase58()], commitment, encoding || 'base64', configWithoutEncoding);\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const baseSchema = array(KeyedAccountInfoResult);\n    const res = configWithoutEncoding.withContext === true ? create(unsafeRes, jsonRpcResultAndContext(baseSchema)) : create(unsafeRes, jsonRpcResult(baseSchema));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get accounts owned by program ${programId.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(programId, configOrCommitment) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs([programId.toBase58()], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedParsedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get accounts owned by program ${programId.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(strategy, commitment) {\n    let rawSignature;\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy;\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy\n      });\n    }\n  }\n  getCancellationPromise(signal) {\n    return new Promise((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n  getTransactionConfirmationPromise({\n    commitment,\n    signature\n  }) {\n    let signatureSubscriptionId;\n    let disposeSignatureSubscriptionStateChangeObserver;\n    let done = false;\n    const confirmationPromise = new Promise((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(signature, (result, context) => {\n          signatureSubscriptionId = undefined;\n          const response = {\n            context,\n            value: result\n          };\n          resolve({\n            __type: TransactionStatus.PROCESSED,\n            response\n          });\n        }, commitment);\n        const subscriptionSetupPromise = new Promise(resolveSubscriptionSetup => {\n          if (signatureSubscriptionId == null) {\n            resolveSubscriptionSetup();\n          } else {\n            disposeSignatureSubscriptionStateChangeObserver = this._onSubscriptionStateChange(signatureSubscriptionId, nextState => {\n              if (nextState === 'subscribed') {\n                resolveSubscriptionSetup();\n              }\n            });\n          }\n        });\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {\n            context,\n            value\n          } = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip':\n                {\n                  if (value.confirmationStatus === 'processed') {\n                    return;\n                  }\n                  break;\n                }\n              case 'finalized':\n              case 'max':\n              case 'root':\n                {\n                  if (value.confirmationStatus === 'processed' || value.confirmationStatus === 'confirmed') {\n                    return;\n                  }\n                  break;\n                }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value\n              }\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {\n      abortConfirmation,\n      confirmationPromise\n    };\n  }\n  async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      lastValidBlockHeight,\n      signature\n    }\n  }) {\n    let done = false;\n    const expiryPromise = new Promise(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({\n          __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED\n        });\n      })();\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result;\n    try {\n      const outcome = await Promise.race([cancellationPromise, confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n  async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature\n    }\n  }) {\n    let done = false;\n    const expiryPromise = new Promise(resolve => {\n      let currentNonceValue = nonceValue;\n      let lastCheckedSlot = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {\n            context,\n            value: nonceAccount\n          } = await this.getNonceAndContext(nonceAccountPubkey, {\n            commitment,\n            minContextSlot\n          });\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result;\n    try {\n      const outcome = await Promise.race([cancellationPromise, confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus;\n        while (true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (status.context.slot < (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {\n            confirmationStatus\n          } = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (confirmationStatus !== 'processed' && confirmationStatus !== 'confirmed' && confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (confirmationStatus !== 'confirmed' && confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              (_ => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {\n              err: signatureStatus.value.err\n            }\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n  async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip':\n          {\n            timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n            break;\n          }\n      }\n      timeoutId = setTimeout(() => resolve({\n        __type: TransactionStatus.TIMED_OUT,\n        timeoutMs\n      }), timeoutMs);\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    let result;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(signature, outcome.timeoutMs / 1000);\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes() {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(startSlot, limit) {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(signature, config) {\n    const {\n      context,\n      value: values\n    } = await this.getSignatureStatuses([signature], config);\n    assert(values.length === 1);\n    const value = values[0];\n    return {\n      context,\n      value\n    };\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(signatures, config) {\n    const params = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction count');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment) {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(addresses, epoch, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([addresses.map(pubkey => pubkey.toBase58())], commitment, undefined /* encoding */, {\n      ...config,\n      epoch: epoch != null ? epoch : config?.epoch\n    });\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate() {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule() {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(epochSchedule.slotsPerEpoch, epochSchedule.leaderScheduleSlotOffset, epochSchedule.warmup, epochSchedule.firstNormalEpoch, epochSchedule.firstNormalSlot);\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule() {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(dataLength, commitment) {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest('getMinimumBalanceForRentExemption', args);\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(limit) {\n    const unsafeRes = await this._rpcRequest('getRecentPerformanceSamples', limit ? [limit] : []);\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent performance samples');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(blockhash, commitment) {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeCalculatorForBlockhash', args);\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {\n      context,\n      value\n    } = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(message, commitment) {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n  async getRecentPrioritizationFees(config) {\n    const accounts = config?.lockedWritableAccounts?.map(key => key.toBase58());\n    const args = accounts?.length ? [accounts] : [];\n    const unsafeRes = await this._rpcRequest('getRecentPrioritizationFees', args);\n    const res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent prioritization fees');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(commitment) {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(commitmentOrConfig) {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns whether a blockhash is still valid or not\n   */\n  async isBlockhashValid(blockhash, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgs([blockhash], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('isBlockhashValid', args);\n    const res = create(unsafeRes, IsBlockhashValidRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to determine if the blockhash `' + blockhash + '`is valid');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion() {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash() {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(slot, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts':\n          {\n            const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        case 'none':\n          {\n            const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        default:\n          {\n            const res = create(unsafeRes, GetBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            const {\n              result\n            } = res;\n            return result ? {\n              ...result,\n              transactions: result.transactions.map(({\n                transaction,\n                meta,\n                version\n              }) => ({\n                meta,\n                transaction: {\n                  ...transaction,\n                  message: versionedMessageFromResponse(version, transaction.message)\n                },\n                version\n              }))\n            } : null;\n          }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e, 'failed to get confirmed block');\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(slot, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts':\n          {\n            const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        case 'none':\n          {\n            const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        default:\n          {\n            const res = create(unsafeRes, GetParsedBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e, 'failed to get block');\n    }\n  }\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(configOrCommitment) {\n    let extra;\n    let commitment;\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {\n        commitment: c,\n        ...rest\n      } = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block production information');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(signature, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    const result = res.result;\n    if (!result) return result;\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(result.version, result.transaction.message)\n      }\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(signature, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(signatures, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(signatures, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, undefined /* encoding */, config);\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(result.version, result.transaction.message)\n        }\n      };\n    });\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({\n        transaction,\n        meta\n      }) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message\n          }\n        };\n      })\n    };\n    return {\n      ...block,\n      transactions: block.transactions.map(({\n        transaction,\n        meta\n      }) => {\n        return {\n          meta,\n          transaction: Transaction.populate(transaction.message, transaction.signatures)\n        };\n      })\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(startSlot, endSlot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed(endSlot !== undefined ? [startSlot, endSlot] : [startSlot], commitment);\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    const result = res.result;\n    if (!result) return result;\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures)\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(signatures, commitment) {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n      return {\n        methodName: 'getConfirmedTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transactions');\n      }\n      return res.result;\n    });\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(address, startSlot, endSlot) {\n    let options = {};\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n      try {\n        const block = await this.getConfirmedBlockSignatures(startSlot, 'finalized');\n        if (block.signatures.length > 0) {\n          options.until = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(address, options);\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n    const unsafeRes = await this._rpcRequest('getConfirmedSignaturesForAddress2', args);\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed signatures for address');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signatures for address');\n    }\n    return res.result;\n  }\n  async getAddressLookupTable(accountKey, config) {\n    const {\n      context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(accountKey, config);\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data)\n      });\n    }\n    return {\n      context,\n      value\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(nonceAccount, commitmentOrConfig) {\n    const {\n      context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(nonceAccount, commitmentOrConfig);\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n    return {\n      context,\n      value\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(nonceAccount, commitmentOrConfig) {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig).then(x => x.value).catch(e => {\n      throw new Error('failed to get nonce for account ' + nonceAccount.toBase58() + ': ' + e);\n    });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(to, lamports) {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [to.toBase58(), lamports]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `airdrop to ${to.toBase58()} failed`);\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(disableCache) {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash() {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash ? cachedLatestBlockhash.blockhash : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: []\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n      throw new Error(`Unable to obtain a new blockhash after ${Date.now() - startTime}ms`);\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(config) {\n    const {\n      commitment,\n      config: configArg\n    } = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get stake minimum delegation`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(transactionOrMessage, configOrSigners, includeAccounts) {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction = Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n      const config = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        if (!signers) break;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.simulatedSignatures.includes(signature) && !this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config = {\n      encoding: 'base64',\n      commitment: this.commitment\n    };\n    if (includeAccounts) {\n      const addresses = (Array.isArray(includeAccounts) ? includeAccounts : message.nonProgramIds()).map(key => key.toBase58());\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses\n      };\n    }\n    if (signers) {\n      config.sigVerify = true;\n    }\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError('failed to simulate transaction: ' + res.error.message, logs);\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(transaction, signersOrOptions, options) {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, signersOrOptions);\n    }\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(rawTransaction, options) {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(encodedTransaction, options);\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(encodedTransaction, options) {\n    const config = {\n      encoding: 'base64'\n    };\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment = skipPreflight === true ? 'processed' // FIXME Remove when https://github.com/anza-xyz/agave/pull/483 is deployed.\n    : options && options.preflightCommitment || this.commitment;\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError('failed to send transaction: ' + res.error.message, logs);\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration = (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(this._subscriptionsByHash).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending'\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _setSubscription(hash, nextSubscription) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks = this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _onSubscriptionStateChange(clientSubscriptionId, callback) {\n    const hash = this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = this._subscriptionStateChangeCallbacksByHash[hash] ||= new Set();\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(`Error when closing socket connection: ${err.message}`);\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n    await Promise.all(\n    // Don't be tempted to change this to `Object.entries`. We call\n    // `_updateSubscriptions` recursively when processing the state,\n    // so it's important that we look up the *current* version of\n    // each subscription, every time we process a hash.\n    Object.keys(this._subscriptionsByHash).map(async hash => {\n      const subscription = this._subscriptionsByHash[hash];\n      if (subscription === undefined) {\n        // This entry has since been deleted. Skip.\n        return;\n      }\n      switch (subscription.state) {\n        case 'pending':\n        case 'unsubscribed':\n          if (subscription.callbacks.size === 0) {\n            /**\n             * You can end up here when:\n             *\n             * - a subscription has recently unsubscribed\n             *   without having new callbacks added to it\n             *   while the unsubscribe was in flight, or\n             * - when a pending subscription has its\n             *   listeners removed before a request was\n             *   sent to the server.\n             *\n             * Being that nobody is interested in this\n             * subscription any longer, delete it.\n             */\n            delete this._subscriptionsByHash[hash];\n            if (subscription.state === 'unsubscribed') {\n              delete this._subscriptionCallbacksByServerSubscriptionId[subscription.serverSubscriptionId];\n            }\n            await this._updateSubscriptions();\n            return;\n          }\n          await (async () => {\n            const {\n              args,\n              method\n            } = subscription;\n            try {\n              this._setSubscription(hash, {\n                ...subscription,\n                state: 'subscribing'\n              });\n              const serverSubscriptionId = await this._rpcWebSocket.call(method, args);\n              this._setSubscription(hash, {\n                ...subscription,\n                serverSubscriptionId,\n                state: 'subscribed'\n              });\n              this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId] = subscription.callbacks;\n              await this._updateSubscriptions();\n            } catch (e) {\n              if (e instanceof Error) {\n                console.error(`${method} error for argument`, args, e.message);\n              }\n              if (!isCurrentConnectionStillActive()) {\n                return;\n              }\n              // TODO: Maybe add an 'errored' state or a retry limit?\n              this._setSubscription(hash, {\n                ...subscription,\n                state: 'pending'\n              });\n              await this._updateSubscriptions();\n            }\n          })();\n          break;\n        case 'subscribed':\n          if (subscription.callbacks.size === 0) {\n            // By the time we successfully set up a subscription\n            // with the server, the client stopped caring about it.\n            // Tear it down now.\n            await (async () => {\n              const {\n                serverSubscriptionId,\n                unsubscribeMethod\n              } = subscription;\n              if (this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)) {\n                /**\n                 * Special case.\n                 * If we're dealing with a subscription that has been auto-\n                 * disposed by the RPC, then we can skip the RPC call to\n                 * tear down the subscription here.\n                 *\n                 * NOTE: There is a proposal to eliminate this special case, here:\n                 * https://github.com/solana-labs/solana/issues/18892\n                 */\n                this._subscriptionsAutoDisposedByRpc.delete(serverSubscriptionId);\n              } else {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribing'\n                });\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribing'\n                });\n                try {\n                  await this._rpcWebSocket.call(unsubscribeMethod, [serverSubscriptionId]);\n                } catch (e) {\n                  if (e instanceof Error) {\n                    console.error(`${unsubscribeMethod} error:`, e.message);\n                  }\n                  if (!isCurrentConnectionStillActive()) {\n                    return;\n                  }\n                  // TODO: Maybe add an 'errored' state or a retry limit?\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'subscribed'\n                  });\n                  await this._updateSubscriptions();\n                  return;\n                }\n              }\n              this._setSubscription(hash, {\n                ...subscription,\n                state: 'unsubscribed'\n              });\n              await this._updateSubscriptions();\n            })();\n          }\n          break;\n      }\n    }));\n  }\n\n  /**\n   * @internal\n   */\n  _handleServerNotification(serverSubscriptionId, callbackArgs) {\n    const callbacks = this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n        // I failed to find a way to convince TypeScript that `cb` is of type\n        // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n        // See https://github.com/microsoft/TypeScript/issues/47615\n        // @ts-ignore\n        ...callbackArgs);\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, AccountNotificationResult);\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n\n  /**\n   * @internal\n   */\n  _makeSubscription(subscriptionConfig,\n  /**\n   * When preparing `args` for a call to `_makeSubscription`, be sure\n   * to carefully apply a default `commitment` property, if necessary.\n   *\n   * - If the user supplied a `commitment` use that.\n   * - Otherwise, if the `Connection::commitment` is set, use that.\n   * - Otherwise, set it to the RPC server default: `finalized`.\n   *\n   * This is extremely important to ensure that these two fundamentally\n   * identical subscriptions produce the same identifying hash:\n   *\n   * - A subscription made without specifying a commitment.\n   * - A subscription made where the commitment specified is the same\n   *   as the default applied to the subscription above.\n   *\n   * Example; these two subscriptions must produce the same hash:\n   *\n   * - An `accountSubscribe` subscription for `'PUBKEY'`\n   * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n   *   `'finalized'`.\n   *\n   * See the 'making a subscription with defaulted params omitted' test\n   * in `connection-subscriptions.ts` for more.\n   */\n  args) {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify$1([subscriptionConfig.method, args]);\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending'\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(subscription !== undefined, `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`);\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(publicKey, callback, commitment) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment || this._commitment || 'finalized',\n    // Apply connection/server default.\n    'base64');\n    return this._makeSubscription({\n      callback,\n      method: 'accountSubscribe',\n      unsubscribeMethod: 'accountUnsubscribe'\n    }, args);\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeAccountChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'account change');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, ProgramAccountNotificationResult);\n    this._handleServerNotification(subscription, [{\n      accountId: result.value.pubkey,\n      accountInfo: result.value.account\n    }, result.context]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(programId, callback, commitment, filters) {\n    const args = this._buildArgs([programId.toBase58()], commitment || this._commitment || 'finalized',\n    // Apply connection/server default.\n    'base64' /* encoding */, filters ? {\n      filters: filters\n    } : undefined /* extra */);\n    return this._makeSubscription({\n      callback,\n      method: 'programSubscribe',\n      unsubscribeMethod: 'programUnsubscribe'\n    }, args);\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'program account change');\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(filter, callback, commitment) {\n    const args = this._buildArgs([typeof filter === 'object' ? {\n      mentions: [filter.toString()]\n    } : filter], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n    return this._makeSubscription({\n      callback,\n      method: 'logsSubscribe',\n      unsubscribeMethod: 'logsUnsubscribe'\n    }, args);\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param clientSubscriptionId client subscription id to deregister.\n   */\n  async removeOnLogsListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, LogsNotificationResult);\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SlotNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'slotSubscribe',\n      unsubscribeMethod: 'slotUnsubscribe'\n    }, [] /* args */);\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot change');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SlotUpdateNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'slotsUpdatesSubscribe',\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe'\n    }, [] /* args */);\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotUpdateListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot update');\n  }\n\n  /**\n   * @internal\n   */\n\n  async _unsubscribeClientSubscription(clientSubscriptionId, subscriptionName) {\n    const dispose = this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn('Ignored unsubscribe request because an active subscription with id ' + `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` + 'could not be found.');\n    }\n  }\n  _buildArgs(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error('Using Connection with default commitment: `' + this._commitment + '`, but method requires at least `confirmed`');\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SignatureNotificationResult);\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification(subscription, result.value === 'receivedSignature' ? [{\n      type: 'received'\n    }, result.context] : [{\n      type: 'status',\n      result: result.value\n    }, result.context]);\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(signature, callback, commitment) {\n    const args = this._buildArgs([signature], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(signature, callback, options) {\n    const {\n      commitment,\n      ...extra\n    } = {\n      ...options,\n      commitment: options && options.commitment || this._commitment || 'finalized' // Apply connection/server default.\n    };\n    const args = this._buildArgs([signature], commitment, undefined /* encoding */, extra);\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        callback(notification, context);\n        // Signatures subscriptions are auto-removed by the RPC service\n        // so no need to explicitly send an unsubscribe message.\n        try {\n          this.removeSignatureListener(clientSubscriptionId);\n          // eslint-disable-next-line no-empty\n        } catch (_err) {\n          // Already removed.\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSignatureListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'signature result');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, RootNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'rootSubscribe',\n      unsubscribeMethod: 'rootUnsubscribe'\n    }, [] /* args */);\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeRootChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'root change');\n  }\n}\n\n/**\n * Keypair signer interface\n */\n\n/**\n * An account keypair used for signing transactions.\n */\nclass Keypair {\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param {Ed25519Keypair} keypair ed25519 keypair\n   */\n  constructor(keypair) {\n    this._keypair = void 0;\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   *\n   * @returns {Keypair} Keypair\n   */\n  static generate() {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options skip secret key validation\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSecretKey(secretKey, options) {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({\n      publicKey,\n      secretKey\n    });\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSeed(seed) {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({\n      publicKey,\n      secretKey\n    });\n  }\n\n  /**\n   * The public key for this keypair\n   *\n   * @returns {PublicKey} PublicKey\n   */\n  get publicKey() {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   * @returns {Uint8Array} Secret key in an array of Uint8 bytes\n   */\n  get secretKey() {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nconst LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('recentSlot'), BufferLayout.u8('bumpSeed')])\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64(), BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u32(), -8), 'addresses')])\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\nclass AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [layoutType, layout] of Object.entries(LOOKUP_TABLE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == index) {\n        type = layoutType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Invalid Instruction. Should be a LookupTable Instruction');\n    }\n    return type;\n  }\n  static decodeCreateLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n    const {\n      recentSlot\n    } = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable, instruction.data);\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot)\n    };\n  }\n  static decodeExtendLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(`invalid instruction; found ${instruction.keys.length} keys, expected at least 2`);\n    }\n    const {\n      addresses\n    } = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable, instruction.data);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer))\n    };\n  }\n  static decodeCloseLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey\n    };\n  }\n  static decodeFreezeLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey\n    };\n  }\n  static decodeDeactivateLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error('invalid instruction; programId is not AddressLookupTable Program');\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\nclass AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  static createLookupTable(params) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync([params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)], this.programId);\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed\n    });\n    const keys = [{\n      pubkey: lookupTableAddress,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: params.payer,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false\n    }];\n    return [new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    }), lookupTableAddress];\n  }\n  static freezeLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static extendLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes())\n    });\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (params.payer) {\n      keys.push({\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static deactivateLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static closeLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: params.recipient,\n      isSigner: false,\n      isWritable: true\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n}\nAddressLookupTableProgram.programId = new PublicKey('AddressLookupTab1e1111111111111111111111111');\n\n/**\n * Compute Budget Instruction class\n */\nclass ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a ComputeBudgetInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      units,\n      additionalFee\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits, instruction.data);\n    return {\n      units,\n      additionalFee\n    };\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      bytes\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame, instruction.data);\n    return {\n      bytes\n    };\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      units\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit, instruction.data);\n    return {\n      units\n    };\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      microLamports\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice, instruction.data);\n    return {\n      microLamports\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error('invalid instruction; programId is not ComputeBudgetProgram');\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\n\n/**\n * Request units instruction params\n */\n\n/**\n * Request heap frame instruction params\n */\n\n/**\n * Set compute unit limit instruction params\n */\n\n/**\n * Set compute unit price instruction params\n */\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nconst COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units'), BufferLayout.u32('additionalFee')])\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')])\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units')])\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), u64('microLamports')])\n  }\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nclass ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static requestHeapFrame(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static setComputeUnitLimit(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static setComputeUnitPrice(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports)\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n}\nComputeBudgetProgram.programId = new PublicKey('ComputeBudget111111111111111111111111111111');\n\nconst PRIVATE_KEY_BYTES$1 = 64;\nconst PUBLIC_KEY_BYTES$1 = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u8('padding'), BufferLayout.u16('signatureOffset'), BufferLayout.u16('signatureInstructionIndex'), BufferLayout.u16('publicKeyOffset'), BufferLayout.u16('publicKeyInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u16('messageInstructionIndex')]);\nclass Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      instructionIndex\n    } = params;\n    assert(publicKey.length === PUBLIC_KEY_BYTES$1, `Public Key must be ${PUBLIC_KEY_BYTES$1} bytes but received ${publicKey.length} bytes`);\n    assert(signature.length === SIGNATURE_BYTES, `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`);\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n    const index = instructionIndex == null ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n    : instructionIndex;\n    ED25519_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      padding: 0,\n      signatureOffset,\n      signatureInstructionIndex: index,\n      publicKeyOffset,\n      publicKeyInstructionIndex: index,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: index\n    }, instructionData);\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey,\n      message,\n      instructionIndex\n    } = params;\n    assert(privateKey.length === PRIVATE_KEY_BYTES$1, `Private key must be ${PRIVATE_KEY_BYTES$1} bytes but received ${privateKey.length} bytes`);\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\nEd25519Program.programId = new PublicKey('Ed25519SigVerify111111111111111111111111111');\n\nconst ecdsaSign = (msgHash, privKey) => {\n  const signature = secp256k1.sign(msgHash, privKey);\n  return [signature.toCompactRawBytes(), signature.recovery];\n};\nsecp256k1.utils.isValidPrivateKey;\nconst publicKeyCreate = secp256k1.getPublicKey;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u16('signatureOffset'), BufferLayout.u8('signatureInstructionIndex'), BufferLayout.u16('ethAddressOffset'), BufferLayout.u8('ethAddressInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u8('messageInstructionIndex'), BufferLayout.blob(20, 'ethAddress'), BufferLayout.blob(64, 'signature'), BufferLayout.u8('recoveryId')]);\nclass Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(publicKey) {\n    assert(publicKey.length === PUBLIC_KEY_BYTES, `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`);\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    } = params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(params) {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0\n    } = params;\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n    assert(ethAddress.length === ETHEREUM_ADDRESS_BYTES, `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`);\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(SECP256K1_INSTRUCTION_LAYOUT.span + message.length);\n    SECP256K1_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      signatureOffset,\n      signatureInstructionIndex: instructionIndex,\n      ethAddressOffset,\n      ethAddressInstructionIndex: instructionIndex,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: instructionIndex,\n      signature: toBuffer(signature),\n      ethAddress: toBuffer(ethAddress),\n      recoveryId\n    }, instructionData);\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey: pkey,\n      message,\n      instructionIndex\n    } = params;\n    assert(pkey.length === PRIVATE_KEY_BYTES, `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`);\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false /* isCompressed */).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\nSecp256k1Program.programId = new PublicKey('KeccakSecp256k11111111111111111111111111111');\n\nvar _class2;\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nconst STAKE_CONFIG_ID = new PublicKey('StakeConfig11111111111111111111111111111111');\n\n/**\n * Stake account authority info\n */\nclass Authorized {\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker, withdrawer) {\n    /** stake authority */\n    this.staker = void 0;\n    /** withdraw authority */\n    this.withdrawer = void 0;\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n/**\n * Stake account lockup info\n */\nclass Lockup {\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp, epoch, custodian) {\n    /** Unix timestamp of lockup expiration */\n    this.unixTimestamp = void 0;\n    /** Epoch of lockup expiration */\n    this.epoch = void 0;\n    /** Lockup custodian authority */\n    this.custodian = void 0;\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n}\n_class2 = Lockup;\nLockup.default = new _class2(0, 0, PublicKey.default);\n/**\n * Create stake account transaction params\n */\n/**\n * Create stake account with seed transaction params\n */\n/**\n * Initialize stake instruction params\n */\n/**\n * Delegate stake instruction params\n */\n/**\n * Authorize stake instruction params\n */\n/**\n * Authorize stake instruction params using a derived key\n */\n/**\n * Split stake instruction params\n */\n/**\n * Split with seed transaction params\n */\n/**\n * Withdraw stake instruction params\n */\n/**\n * Deactivate stake instruction params\n */\n/**\n * Merge stake instruction params\n */\n/**\n * Stake Instruction class\n */\nclass StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized,\n      lockup\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Initialize, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(new PublicKey(authorized.staker), new PublicKey(authorized.withdrawer)),\n      lockup: new Lockup(lockup.unixTimestamp, lockup.epoch, new PublicKey(lockup.custodian))\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      stakeAuthorizationType\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Split, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nconst STAKE_INSTRUCTION_LAYOUTS = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), authorized(), lockup()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType')])\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType'), rustString('authoritySeed'), publicKey('authorityOwner')])\n  }\n});\n\n/**\n * Stake authorization type\n */\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nconst StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nclass StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params) {\n    const {\n      stakePubkey,\n      authorized,\n      lockup: maybeLockup\n    } = params;\n    const lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer())\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer())\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccountWithSeed({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      basePubkey: params.basePubkey,\n      seed: params.seed,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      votePubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: STAKE_CONFIG_ID,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params) {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer())\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorityBase,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {\n      lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: splitStakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params,\n  // Compute the cost of allocating the new stake account in lamports\n  rentExemptReserve) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.authorizedPubkey,\n      newAccountPubkey: params.splitStakePubkey,\n      lamports: rentExemptReserve,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params,\n  // If this stake account is new, compute the cost of allocating it in lamports\n  rentExemptReserve) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.allocate({\n      accountPubkey: splitStakePubkey,\n      basePubkey,\n      seed,\n      space: this.space,\n      programId: this.programId\n    }));\n    if (rentExemptReserve && rentExemptReserve > 0) {\n      transaction.add(SystemProgram.transfer({\n        fromPubkey: params.authorizedPubkey,\n        toPubkey: splitStakePubkey,\n        lamports: rentExemptReserve\n      }));\n    }\n    return transaction.add(this.splitInstruction({\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    }));\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params) {\n    const {\n      stakePubkey,\n      sourceStakePubKey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: sourceStakePubKey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      toPubkey,\n      lamports,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n}\nStakeProgram.programId = new PublicKey('Stake11111111111111111111111111111111111111');\n/**\n * Max space of a Stake account\n *\n * This is generated from the solana-stake-program StakeState struct as\n * `StakeStateV2::size_of()`:\n * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeStateV2.html\n */\nStakeProgram.space = 200;\n\n/**\n * Vote account info\n */\nclass VoteInit {\n  /** [0, 100] */\n\n  constructor(nodePubkey, authorizedVoter, authorizedWithdrawer, commission) {\n    this.nodePubkey = void 0;\n    this.authorizedVoter = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\n\n/**\n * InitializeAccount instruction params\n */\n\n/**\n * Authorize instruction params\n */\n\n/**\n * AuthorizeWithSeed instruction params\n */\n\n/**\n * Withdraw from vote account transaction params\n */\n\n/**\n * Update validator identity (node pubkey) vote account instruction params.\n */\n\n/**\n * Vote Instruction class\n */\nclass VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n    const {\n      voteInit\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.InitializeAccount, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(new PublicKey(voteInit.nodePubkey), new PublicKey(voteInit.authorizedVoter), new PublicKey(voteInit.authorizedWithdrawer), voteInit.commission)\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      voteAuthorizationType\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      }\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType\n      }\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(currentAuthorityDerivedKeyOwnerPubkey),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      },\n      votePubkey: instruction.keys[0].pubkey\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\n\n/** @internal */\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteInit()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('voteAuthorizationType')])\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  UpdateValidatorIdentity: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteAuthorizeWithSeedArgs()])\n  }\n});\n\n/**\n * VoteAuthorize type\n */\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nconst VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nclass VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(params) {\n    const {\n      votePubkey,\n      nodePubkey,\n      voteInit\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(voteInit.authorizedWithdrawer.toBuffer()),\n        commission: voteInit.commission\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: nodePubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.votePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.initializeAccount({\n      votePubkey: params.votePubkey,\n      nodePubkey: params.voteInit.nodePubkey,\n      voteInit: params.voteInit\n    }));\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params) {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params) {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(currentAuthorityDerivedKeyOwnerPubkey.toBuffer()),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index\n      }\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: currentAuthorityDerivedKeyBasePubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params) {\n    const {\n      votePubkey,\n      authorizedWithdrawerPubkey,\n      lamports,\n      toPubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedWithdrawerPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(params, currentVoteAccountBalance, rentExemptMinimum) {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error('Withdraw will leave vote account with insufficient funds.');\n    }\n    return VoteProgram.withdraw(params);\n  }\n\n  /**\n   * Generate a transaction to update the validator identity (node pubkey) of a Vote account.\n   */\n  static updateValidatorIdentity(params) {\n    const {\n      votePubkey,\n      authorizedWithdrawerPubkey,\n      nodePubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.UpdateValidatorIdentity;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: nodePubkey,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: authorizedWithdrawerPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n}\nVoteProgram.programId = new PublicKey('Vote111111111111111111111111111111111111111');\n/**\n * Max space of a Vote account\n *\n * This is generated from the solana-vote-program VoteState struct as\n * `VoteState::size_of()`:\n * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n *\n * KEEP IN SYNC WITH `VoteState::size_of()` in https://github.com/solana-labs/solana/blob/a474cb24b9238f5edcc982f65c0b37d4a1046f7e/sdk/program/src/vote/state/mod.rs#L340-L342\n */\nVoteProgram.space = 3762;\n\nconst VALIDATOR_INFO_KEY = new PublicKey('Va1idator1nfo111111111111111111111111111111');\n\n/**\n * @internal\n */\n\n/**\n * Info used to identity validators.\n */\n\nconst InfoString = type({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string())\n});\n\n/**\n * ValidatorInfo class\n */\nclass ValidatorInfo {\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key, info) {\n    /**\n     * validator public key\n     */\n    this.key = void 0;\n    /**\n     * validator information\n     */\n    this.info = void 0;\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(buffer) {\n    let byteArray = [...buffer];\n    const configKeyCount = decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n    const configKeys = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH));\n      const isSigner = guardedShift(byteArray) === 1;\n      configKeys.push({\n        publicKey,\n        isSigner\n      });\n    }\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo = rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo);\n        assert$1(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n    return null;\n  }\n}\n\nconst VOTE_PROGRAM_ID = new PublicKey('Vote111111111111111111111111111111111111111');\n\n/**\n * History of how many credits earned by the end of each epoch\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission'), BufferLayout.nu64(),\n// votes.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.u32('confirmationCount')]), BufferLayout.offset(BufferLayout.u32(), -8), 'votes'), BufferLayout.u8('rootSlotValid'), BufferLayout.nu64('rootSlot'), BufferLayout.nu64(),\n// authorizedVoters.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), publicKey('authorizedVoter')]), BufferLayout.offset(BufferLayout.u32(), -8), 'authorizedVoters'), BufferLayout.struct([BufferLayout.seq(BufferLayout.struct([publicKey('authorizedPubkey'), BufferLayout.nu64('epochOfLastAuthorizedSwitch'), BufferLayout.nu64('targetEpoch')]), 32, 'buf'), BufferLayout.nu64('idx'), BufferLayout.u8('isEmpty')], 'priorVoters'), BufferLayout.nu64(),\n// epochCredits.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), BufferLayout.nu64('credits'), BufferLayout.nu64('prevCredits')]), BufferLayout.offset(BufferLayout.u32(), -8), 'epochCredits'), BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')], 'lastTimestamp')]);\n/**\n * VoteAccount class\n */\nclass VoteAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.nodePubkey = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.rootSlot = void 0;\n    this.votes = void 0;\n    this.authorizedVoters = void 0;\n    this.priorVoters = void 0;\n    this.epochCredits = void 0;\n    this.lastTimestamp = void 0;\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(buffer) {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n    let rootSlot = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp\n    });\n  }\n}\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch\n}) {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter)\n  };\n}\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch\n}) {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch\n  };\n}\nfunction getPriorVoters({\n  buf,\n  idx,\n  isEmpty\n}) {\n  if (isEmpty) {\n    return [];\n  }\n  return [...buf.slice(idx + 1).map(parsePriorVoters), ...buf.slice(0, idx).map(parsePriorVoters)];\n}\n\nconst endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/'\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/'\n  }\n};\n/**\n * Retrieves the RPC API URL for the specified cluster\n * @param {Cluster} [cluster=\"devnet\"] - The cluster name of the RPC API URL to use. Possible options: 'devnet' | 'testnet' | 'mainnet-beta'\n * @param {boolean} [tls=\"http\"] - Use TLS when connecting to cluster.\n *\n * @returns {string} URL string of the RPC endpoint\n */\nfunction clusterApiUrl(cluster, tls) {\n  const key = tls === false ? 'http' : 'https';\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {TransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\n\n// eslint-disable-next-line no-redeclare\nasync function sendAndConfirmRawTransaction(connection, rawTransaction, confirmationStrategyOrConfirmOptions, maybeConfirmOptions) {\n  let confirmationStrategy;\n  let options;\n  if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'lastValidBlockHeight')) {\n    confirmationStrategy = confirmationStrategyOrConfirmOptions;\n    options = maybeConfirmOptions;\n  } else if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'nonceValue')) {\n    confirmationStrategy = confirmationStrategyOrConfirmOptions;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot\n  };\n  const signature = await connection.sendRawTransaction(rawTransaction, sendOptions);\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy ? connection.confirmTransaction(confirmationStrategy, commitment) : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n  if (status.err) {\n    throw new Error(`Raw transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n  return signature;\n}\n\n/**\n * There are 1-billion lamports in one SOL\n */\nconst LAMPORTS_PER_SOL = 1000000000;\n\nexport { Account, AddressLookupTableAccount, AddressLookupTableInstruction, AddressLookupTableProgram, Authorized, BLOCKHASH_CACHE_TIMEOUT_MS, BPF_LOADER_DEPRECATED_PROGRAM_ID, BPF_LOADER_PROGRAM_ID, BpfLoader, COMPUTE_BUDGET_INSTRUCTION_LAYOUTS, ComputeBudgetInstruction, ComputeBudgetProgram, Connection, Ed25519Program, Enum, EpochSchedule, FeeCalculatorLayout, Keypair, LAMPORTS_PER_SOL, LOOKUP_TABLE_INSTRUCTION_LAYOUTS, Loader, Lockup, MAX_SEED_LENGTH, Message, MessageAccountKeys, MessageV0, NONCE_ACCOUNT_LENGTH, NonceAccount, PACKET_DATA_SIZE, PUBLIC_KEY_LENGTH, PublicKey, SIGNATURE_LENGTH_IN_BYTES, SOLANA_SCHEMA, STAKE_CONFIG_ID, STAKE_INSTRUCTION_LAYOUTS, SYSTEM_INSTRUCTION_LAYOUTS, SYSVAR_CLOCK_PUBKEY, SYSVAR_EPOCH_SCHEDULE_PUBKEY, SYSVAR_INSTRUCTIONS_PUBKEY, SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY, SYSVAR_REWARDS_PUBKEY, SYSVAR_SLOT_HASHES_PUBKEY, SYSVAR_SLOT_HISTORY_PUBKEY, SYSVAR_STAKE_HISTORY_PUBKEY, Secp256k1Program, SendTransactionError, SolanaJSONRPCError, SolanaJSONRPCErrorCode, StakeAuthorizationLayout, StakeInstruction, StakeProgram, Struct, SystemInstruction, SystemProgram, Transaction, TransactionExpiredBlockheightExceededError, TransactionExpiredNonceInvalidError, TransactionExpiredTimeoutError, TransactionInstruction, TransactionMessage, TransactionStatus, VALIDATOR_INFO_KEY, VERSION_PREFIX_MASK, VOTE_PROGRAM_ID, ValidatorInfo, VersionedMessage, VersionedTransaction, VoteAccount, VoteAuthorizationLayout, VoteInit, VoteInstruction, VoteProgram, clusterApiUrl, sendAndConfirmRawTransaction, sendAndConfirmTransaction };\n//# sourceMappingURL=index.browser.esm.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n","// baseline estimates, used to improve performance\nvar TX_EMPTY_SIZE = 4 + 1 + 1 + 4\nvar TX_INPUT_BASE = 32 + 4 + 1 + 4\nvar TX_INPUT_PUBKEYHASH = 107\nvar TX_OUTPUT_BASE = 8 + 1\nvar TX_OUTPUT_PUBKEYHASH = 25\nvar OP_RETURN_OVERHEAD = 1 + 8 + 1\n\nfunction inputBytes (input) {\n  return TX_INPUT_BASE + (input.script ? input.script.length : TX_INPUT_PUBKEYHASH)\n}\n\nfunction outputBytes (output) {\n  if (output.script) {\n    return OP_RETURN_OVERHEAD + output.script.length + (output.script.length >= 74 ? 2 : 1);\n  }\n  return TX_OUTPUT_BASE + (output.script ? output.script.length : TX_OUTPUT_PUBKEYHASH)\n}\n\nfunction dustThreshold (output, feeRate) {\n  /* ... classify the output for input estimate  */\n  return inputBytes({}) * 3\n}\n\nfunction transactionBytes (inputs, outputs) {\n  return TX_EMPTY_SIZE +\n    inputs.reduce(function (a, x) { return a + inputBytes(x) }, 0) +\n    outputs.reduce(function (a, x) { return a + outputBytes(x) }, 0)\n}\n\nfunction uintOrNaN (v) {\n  if (typeof v !== 'number') return NaN\n  if (!isFinite(v)) return NaN\n  if (Math.floor(v) !== v) return NaN\n  if (v < 0) return NaN\n  return v\n}\n\nfunction sumForgiving (range) {\n  return range.reduce(function (a, x) { return a + (isFinite(x.value) ? x.value : 0) }, 0)\n}\n\nfunction sumOrNaN (range) {\n  return range.reduce(function (a, x) { return a + uintOrNaN(x.value) }, 0)\n}\n\nvar BLANK_OUTPUT = outputBytes({})\n\nfunction finalize (inputs, outputs, feeRate) {\n  var bytesAccum = transactionBytes(inputs, outputs)\n  var feeAfterExtraOutput = feeRate * (bytesAccum + BLANK_OUTPUT)\n  var remainderAfterExtraOutput = sumOrNaN(inputs) - (sumOrNaN(outputs) + feeAfterExtraOutput)\n\n  // is it worth a change output?\n  if (remainderAfterExtraOutput > dustThreshold({}, feeRate)) {\n    outputs = outputs.concat({ value: remainderAfterExtraOutput })\n  }\n\n  var fee = sumOrNaN(inputs) - sumOrNaN(outputs)\n  if (!isFinite(fee)) return { fee: feeRate * bytesAccum }\n\n  return {\n    inputs: inputs,\n    outputs: outputs,\n    fee: fee\n  }\n}\n\nmodule.exports = {\n  dustThreshold: dustThreshold,\n  finalize: finalize,\n  inputBytes: inputBytes,\n  outputBytes: outputBytes,\n  sumOrNaN: sumOrNaN,\n  sumForgiving: sumForgiving,\n  transactionBytes: transactionBytes,\n  uintOrNaN: uintOrNaN\n}\n","'use strict';\n\nconst uuid = require('uuid').v4;\nconst generateRequest = require('../../generateRequest');\n\n/**\n * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n * @class ClientBrowser\n * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n * @param {Object} [options]\n * @param {Function} [options.reviver] Reviver function for JSON\n * @param {Function} [options.replacer] Replacer function for JSON\n * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n * @param {Function} [options.generator] Function to use for generating request IDs\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n * @return {ClientBrowser}\n */\nconst ClientBrowser = function(callServer, options) {\n  if(!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  this.options = {\n    reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,\n    replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,\n    generator: typeof options.generator !== 'undefined' ? options.generator : function() { return uuid(); },\n    version: typeof options.version !== 'undefined' ? options.version : 2,\n    notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false,\n  };\n\n  this.callServer = callServer;\n};\n\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function(method, params, id, callback) {\n  const self = this;\n  let request = null;\n\n  // is this a batch request?\n  const isBatch = Array.isArray(method) && typeof params === 'function';\n\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';\n\n  if(isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if(typeof id === 'function') {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n\n    const hasCallback = typeof callback === 'function';\n\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version,\n        notificationIdNull: this.options.notificationIdNull,\n      });\n    } catch(err) {\n      if(hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if(!hasCallback) {\n      return request;\n    }\n\n  }\n\n  let message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch(err) {\n    return callback(err);\n  }\n\n  this.callServer(message, function(err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n  if(err) {\n    callback(err);\n    return;\n  }\n\n  if(!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n\n  let response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch(err) {\n    return callback(err);\n  }\n\n  if(callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if(Array.isArray(response)) {\n\n      // neccesary to split strictly on validity according to spec here\n      const isError = function(res) {\n        return typeof res.error !== 'undefined';\n      };\n\n      const isNotError = function (res) {\n        return !isError(res);\n      };\n\n      return callback(null, response.filter(isError), response.filter(isNotError));\n    \n    } else {\n\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    \n    }\n  \n  }\n\n  callback(null, response);\n};\n","'use strict';\n\nconst uuid = require('uuid').v4;\n\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */\nconst generateRequest = function(method, params, id, options) {\n  if(typeof method !== 'string') {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n\n  // check valid version provided\n  const version = typeof options.version === 'number' ? options.version : 2;\n  if (version !== 1 && version !== 2) {\n    throw new TypeError(version + ' must be 1 or 2');\n  }\n\n  const request = {\n    method: method\n  };\n\n  if(version === 2) {\n    request.jsonrpc = '2.0';\n  }\n\n  if(params) {\n    // params given, but invalid?\n    if(typeof params !== 'object' && !Array.isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n    request.params = params;\n  }\n\n  // if id was left out, generate one (null means explicit notification)\n  if(typeof(id) === 'undefined') {\n    const generator = typeof options.generator === 'function' ? options.generator : function() { return uuid(); };\n    request.id = generator(request, options);\n  } else if (version === 2 && id === null) {\n    // we have a version 2 notification\n    if (options.notificationIdNull) {\n      request.id = null; // id will not be set at all unless option provided\n    }\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n\nmodule.exports = generateRequest;\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","/**\n * \"Client\" wraps \"ws\" or a browser-implemented \"WebSocket\" library\n * according to the environment providing JSON RPC 2.0 support on top.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _eventemitter = require(\"eventemitter3\");\nvar _utils = require(\"./utils\");\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nvar __rest = void 0 && (void 0).__rest || function (s, e) {\n  var t = {};\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n// @ts-ignore\nvar CommonClient = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(CommonClient, _EventEmitter);\n  var _super = _createSuper(CommonClient);\n  /**\n   * Instantiate a Client class.\n   * @constructor\n   * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n   * @param {String} address - url to a websocket server\n   * @param {Object} options - ws options object with reconnect parameters\n   * @param {Function} generate_request_id - custom generation request Id\n   * @param {DataPack} dataPack - data pack contains encoder and decoder\n   * @return {CommonClient}\n   */\n  function CommonClient(webSocketFactory) {\n    var _this;\n    var address = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"ws://localhost:8080\";\n    var _a = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var generate_request_id = arguments.length > 3 ? arguments[3] : undefined;\n    var dataPack = arguments.length > 4 ? arguments[4] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, CommonClient);\n    var _a$autoconnect = _a.autoconnect,\n      autoconnect = _a$autoconnect === void 0 ? true : _a$autoconnect,\n      _a$reconnect = _a.reconnect,\n      reconnect = _a$reconnect === void 0 ? true : _a$reconnect,\n      _a$reconnect_interval = _a.reconnect_interval,\n      reconnect_interval = _a$reconnect_interval === void 0 ? 1000 : _a$reconnect_interval,\n      _a$max_reconnects = _a.max_reconnects,\n      max_reconnects = _a$max_reconnects === void 0 ? 5 : _a$max_reconnects,\n      rest_options = __rest(_a, [\"autoconnect\", \"reconnect\", \"reconnect_interval\", \"max_reconnects\"]);\n    _this = _super.call(this);\n    _this.webSocketFactory = webSocketFactory;\n    _this.queue = {};\n    _this.rpc_id = 0;\n    _this.address = address;\n    _this.autoconnect = autoconnect;\n    _this.ready = false;\n    _this.reconnect = reconnect;\n    _this.reconnect_timer_id = undefined;\n    _this.reconnect_interval = reconnect_interval;\n    _this.max_reconnects = max_reconnects;\n    _this.rest_options = rest_options;\n    _this.current_reconnects = 0;\n    _this.generate_request_id = generate_request_id || function () {\n      return ++_this.rpc_id;\n    };\n    if (!dataPack) _this.dataPack = new _utils.DefaultDataPack();else _this.dataPack = dataPack;\n    if (_this.autoconnect) _this._connect(_this.address, Object.assign({\n      autoconnect: _this.autoconnect,\n      reconnect: _this.reconnect,\n      reconnect_interval: _this.reconnect_interval,\n      max_reconnects: _this.max_reconnects\n    }, _this.rest_options));\n    return _this;\n  }\n  /**\n   * Connects to a defined server if not connected already.\n   * @method\n   * @return {Undefined}\n   */\n  (0, _createClass2[\"default\"])(CommonClient, [{\n    key: \"connect\",\n    value: function connect() {\n      if (this.socket) return;\n      this._connect(this.address, Object.assign({\n        autoconnect: this.autoconnect,\n        reconnect: this.reconnect,\n        reconnect_interval: this.reconnect_interval,\n        max_reconnects: this.max_reconnects\n      }, this.rest_options));\n    }\n    /**\n     * Calls a registered RPC method on server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object|Array} params - optional method parameters\n     * @param {Number} timeout - RPC reply timeout value\n     * @param {Object} ws_opts - options passed to ws\n     * @return {Promise}\n     */\n  }, {\n    key: \"call\",\n    value: function call(method, params, timeout, ws_opts) {\n      var _this2 = this;\n      if (!ws_opts && \"object\" === (0, _typeof2[\"default\"])(timeout)) {\n        ws_opts = timeout;\n        timeout = null;\n      }\n      return new Promise(function (resolve, reject) {\n        if (!_this2.ready) return reject(new Error(\"socket not ready\"));\n        var rpc_id = _this2.generate_request_id(method, params);\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || undefined,\n          id: rpc_id\n        };\n        _this2.socket.send(_this2.dataPack.encode(message), ws_opts, function (error) {\n          if (error) return reject(error);\n          _this2.queue[rpc_id] = {\n            promise: [resolve, reject]\n          };\n          if (timeout) {\n            _this2.queue[rpc_id].timeout = setTimeout(function () {\n              delete _this2.queue[rpc_id];\n              reject(new Error(\"reply timeout\"));\n            }, timeout);\n          }\n        });\n      });\n    }\n    /**\n     * Logins with the other side of the connection.\n     * @method\n     * @param {Object} params - Login credentials object\n     * @return {Promise}\n     */\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(params) {\n        var resp;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.call(\"rpc.login\", params);\n              case 2:\n                resp = _context.sent;\n                if (resp) {\n                  _context.next = 5;\n                  break;\n                }\n                throw new Error(\"authentication failed\");\n              case 5:\n                return _context.abrupt(\"return\", resp);\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function login(_x) {\n        return _login.apply(this, arguments);\n      }\n      return login;\n    }()\n    /**\n     * Fetches a list of client's methods registered on server.\n     * @method\n     * @return {Array}\n     */\n  }, {\n    key: \"listMethods\",\n    value: function () {\n      var _listMethods = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2() {\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.call(\"__listMethods\");\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function listMethods() {\n        return _listMethods.apply(this, arguments);\n      }\n      return listMethods;\n    }()\n    /**\n     * Sends a JSON-RPC 2.0 notification to server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object} params - optional method parameters\n     * @return {Promise}\n     */\n  }, {\n    key: \"notify\",\n    value: function notify(method, params) {\n      var _this3 = this;\n      return new Promise(function (resolve, reject) {\n        if (!_this3.ready) return reject(new Error(\"socket not ready\"));\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params\n        };\n        _this3.socket.send(_this3.dataPack.encode(message), function (error) {\n          if (error) return reject(error);\n          resolve();\n        });\n      });\n    }\n    /**\n     * Subscribes for a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context3.next = 3;\n                return this.call(\"rpc.on\", event);\n              case 3:\n                result = _context3.sent;\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context3.next = 6;\n                  break;\n                }\n                throw new Error(\"Failed subscribing to an event '\" + event + \"' with: \" + result[event]);\n              case 6:\n                return _context3.abrupt(\"return\", result);\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function subscribe(_x2) {\n        return _subscribe.apply(this, arguments);\n      }\n      return subscribe;\n    }()\n    /**\n     * Unsubscribes from a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n  }, {\n    key: \"unsubscribe\",\n    value: function () {\n      var _unsubscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context4.next = 3;\n                return this.call(\"rpc.off\", event);\n              case 3:\n                result = _context4.sent;\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context4.next = 6;\n                  break;\n                }\n                throw new Error(\"Failed unsubscribing from an event with: \" + result);\n              case 6:\n                return _context4.abrupt(\"return\", result);\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function unsubscribe(_x3) {\n        return _unsubscribe.apply(this, arguments);\n      }\n      return unsubscribe;\n    }()\n    /**\n     * Closes a WebSocket connection gracefully.\n     * @method\n     * @param {Number} code - socket close code\n     * @param {String} data - optional data to be sent before closing\n     * @return {Undefined}\n     */\n  }, {\n    key: \"close\",\n    value: function close(code, data) {\n      this.socket.close(code || 1000, data);\n    }\n    /**\n     * Connection/Message handler.\n     * @method\n     * @private\n     * @param {String} address - WebSocket API address\n     * @param {Object} options - ws options object\n     * @return {Undefined}\n     */\n  }, {\n    key: \"_connect\",\n    value: function _connect(address, options) {\n      var _this4 = this;\n      clearTimeout(this.reconnect_timer_id);\n      this.socket = this.webSocketFactory(address, options);\n      this.socket.addEventListener(\"open\", function () {\n        _this4.ready = true;\n        _this4.emit(\"open\");\n        _this4.current_reconnects = 0;\n      });\n      this.socket.addEventListener(\"message\", function (_ref) {\n        var message = _ref.data;\n        if (message instanceof ArrayBuffer) message = Buffer.from(message).toString();\n        try {\n          message = _this4.dataPack.decode(message);\n        } catch (error) {\n          return;\n        }\n        // check if any listeners are attached and forward event\n        if (message.notification && _this4.listeners(message.notification).length) {\n          if (!Object.keys(message.params).length) return _this4.emit(message.notification);\n          var args = [message.notification];\n          if (message.params.constructor === Object) args.push(message.params);else\n            // using for-loop instead of unshift/spread because performance is better\n            for (var i = 0; i < message.params.length; i++) {\n              args.push(message.params[i]);\n            }\n          // run as microtask so that pending queue messages are resolved first\n          // eslint-disable-next-line prefer-spread\n          return Promise.resolve().then(function () {\n            _this4.emit.apply(_this4, args);\n          });\n        }\n        if (!_this4.queue[message.id]) {\n          // general JSON RPC 2.0 events\n          if (message.method) {\n            // run as microtask so that pending queue messages are resolved first\n            return Promise.resolve().then(function () {\n              _this4.emit(message.method, message === null || message === void 0 ? void 0 : message.params);\n            });\n          }\n          return;\n        }\n        // reject early since server's response is invalid\n        if (\"error\" in message === \"result\" in message) _this4.queue[message.id].promise[1](new Error(\"Server response malformed. Response must include either \\\"result\\\"\" + \" or \\\"error\\\", but not both.\"));\n        if (_this4.queue[message.id].timeout) clearTimeout(_this4.queue[message.id].timeout);\n        if (message.error) _this4.queue[message.id].promise[1](message.error);else _this4.queue[message.id].promise[0](message.result);\n        delete _this4.queue[message.id];\n      });\n      this.socket.addEventListener(\"error\", function (error) {\n        return _this4.emit(\"error\", error);\n      });\n      this.socket.addEventListener(\"close\", function (_ref2) {\n        var code = _ref2.code,\n          reason = _ref2.reason;\n        if (_this4.ready)\n          // Delay close event until internal state is updated\n          setTimeout(function () {\n            return _this4.emit(\"close\", code, reason);\n          }, 0);\n        _this4.ready = false;\n        _this4.socket = undefined;\n        if (code === 1000) return;\n        _this4.current_reconnects++;\n        if (_this4.reconnect && (_this4.max_reconnects > _this4.current_reconnects || _this4.max_reconnects === 0)) _this4.reconnect_timer_id = setTimeout(function () {\n          return _this4._connect(address, options);\n        }, _this4.reconnect_interval);\n      });\n    }\n  }]);\n  return CommonClient;\n}(_eventemitter.EventEmitter);\nexports[\"default\"] = CommonClient;","/**\n * WebSocket implements a browser-side WebSocket specification.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _eventemitter = require(\"eventemitter3\");\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nvar WebSocketBrowserImpl = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(WebSocketBrowserImpl, _EventEmitter);\n  var _super = _createSuper(WebSocketBrowserImpl);\n  /** Instantiate a WebSocket class\n   * @constructor\n   * @param {String} address - url to a websocket server\n   * @param {(Object)} options - websocket options\n   * @param {(String|Array)} protocols - a list of protocols\n   * @return {WebSocketBrowserImpl} - returns a WebSocket instance\n   */\n  function WebSocketBrowserImpl(address, options, protocols) {\n    var _this;\n    (0, _classCallCheck2[\"default\"])(this, WebSocketBrowserImpl);\n    _this = _super.call(this);\n    _this.socket = new window.WebSocket(address, protocols);\n    _this.socket.onopen = function () {\n      return _this.emit(\"open\");\n    };\n    _this.socket.onmessage = function (event) {\n      return _this.emit(\"message\", event.data);\n    };\n    _this.socket.onerror = function (error) {\n      return _this.emit(\"error\", error);\n    };\n    _this.socket.onclose = function (event) {\n      _this.emit(\"close\", event.code, event.reason);\n    };\n    return _this;\n  }\n  /**\n   * Sends data through a websocket connection\n   * @method\n   * @param {(String|Object)} data - data to be sent via websocket\n   * @param {Object} optionsOrCallback - ws options\n   * @param {Function} callback - a callback called once the data is sent\n   * @return {Undefined}\n   */\n  (0, _createClass2[\"default\"])(WebSocketBrowserImpl, [{\n    key: \"send\",\n    value: function send(data, optionsOrCallback, callback) {\n      var cb = callback || optionsOrCallback;\n      try {\n        this.socket.send(data);\n        cb();\n      } catch (error) {\n        cb(error);\n      }\n    }\n    /**\n     * Closes an underlying socket\n     * @method\n     * @param {Number} code - status code explaining why the connection is being closed\n     * @param {String} reason - a description why the connection is closing\n     * @return {Undefined}\n     * @throws {Error}\n     */\n  }, {\n    key: \"close\",\n    value: function close(code, reason) {\n      this.socket.close(code, reason);\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, listener, options) {\n      this.socket.addEventListener(type, listener, options);\n    }\n  }]);\n  return WebSocketBrowserImpl;\n}(_eventemitter.EventEmitter);\n/**\n * factory method for common WebSocket instance\n * @method\n * @param {String} address - url to a websocket server\n * @param {(Object)} options - websocket options\n * @return {Undefined}\n */\nfunction _default(address, options) {\n  return new WebSocketBrowserImpl(address, options);\n}","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DefaultDataPack = void 0;\nexports.createError = createError;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar errors = new Map([[-32000, \"Event not provided\"], [-32600, \"Invalid Request\"], [-32601, \"Method not found\"], [-32602, \"Invalid params\"], [-32603, \"Internal error\"], [-32604, \"Params not found\"], [-32605, \"Method forbidden\"], [-32606, \"Event forbidden\"], [-32700, \"Parse error\"]]);\nvar DefaultDataPack = /*#__PURE__*/function () {\n  function DefaultDataPack() {\n    (0, _classCallCheck2[\"default\"])(this, DefaultDataPack);\n  }\n  (0, _createClass2[\"default\"])(DefaultDataPack, [{\n    key: \"encode\",\n    value: function encode(value) {\n      return JSON.stringify(value);\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(value) {\n      return JSON.parse(value);\n    }\n  }]);\n  return DefaultDataPack;\n}();\n/**\n * Creates a JSON-RPC 2.0-compliant error.\n * @param {Number} code - error code\n * @param {String} details - error details\n * @return {Object}\n */\nexports.DefaultDataPack = DefaultDataPack;\nfunction createError(code, details) {\n  var error = {\n    code: code,\n    message: errors.get(code) || \"Internal Server Error\"\n  };\n  if (details) error[\"data\"] = details;\n  return error;\n}","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nmodule.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\nclass StructError extends TypeError {\n  constructor(failure, failures) {\n    let cached;\n    const {\n      message,\n      ...rest\n    } = failure;\n    const {\n      path\n    } = failure;\n    const msg = path.length === 0 ? message : \"At path: \" + path.join('.') + \" -- \" + message;\n    super(msg);\n    Object.assign(this, rest);\n    this.name = this.constructor.name;\n\n    this.failures = () => {\n      var _cached;\n\n      return (_cached = cached) != null ? _cached : cached = [failure, ...failures()];\n    };\n  }\n\n}\n\n/**\n * Check if a value is an iterator.\n */\nfunction isIterable(x) {\n  return isObject(x) && typeof x[Symbol.iterator] === 'function';\n}\n/**\n * Check if a value is a plain object.\n */\n\n\nfunction isObject(x) {\n  return typeof x === 'object' && x != null;\n}\n/**\n * Check if a value is a plain object.\n */\n\nfunction isPlainObject(x) {\n  if (Object.prototype.toString.call(x) !== '[object Object]') {\n    return false;\n  }\n\n  const prototype = Object.getPrototypeOf(x);\n  return prototype === null || prototype === Object.prototype;\n}\n/**\n * Return a value as a printable string.\n */\n\nfunction print(value) {\n  return typeof value === 'string' ? JSON.stringify(value) : \"\" + value;\n}\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\n\nfunction shiftIterator(input) {\n  const {\n    done,\n    value\n  } = input.next();\n  return done ? undefined : value;\n}\n/**\n * Convert a single validation result to a failure.\n */\n\nfunction toFailure(result, context, struct, value) {\n  if (result === true) {\n    return;\n  } else if (result === false) {\n    result = {};\n  } else if (typeof result === 'string') {\n    result = {\n      message: result\n    };\n  }\n\n  const {\n    path,\n    branch\n  } = context;\n  const {\n    type\n  } = struct;\n  const {\n    refinement,\n    message = \"Expected a value of type `\" + type + \"`\" + (refinement ? \" with refinement `\" + refinement + \"`\" : '') + \", but received: `\" + print(value) + \"`\"\n  } = result;\n  return {\n    value,\n    type,\n    refinement,\n    key: path[path.length - 1],\n    path,\n    branch,\n    ...result,\n    message\n  };\n}\n/**\n * Convert a validation result to an iterable of failures.\n */\n\nfunction* toFailures(result, context, struct, value) {\n  if (!isIterable(result)) {\n    result = [result];\n  }\n\n  for (const r of result) {\n    const failure = toFailure(r, context, struct, value);\n\n    if (failure) {\n      yield failure;\n    }\n  }\n}\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\n\nfunction* run(value, struct, options = {}) {\n  const {\n    path = [],\n    branch = [value],\n    coerce = false,\n    mask = false\n  } = options;\n  const ctx = {\n    path,\n    branch\n  };\n\n  if (coerce) {\n    value = struct.coercer(value, ctx);\n\n    if (mask && struct.type !== 'type' && isObject(struct.schema) && isObject(value) && !Array.isArray(value)) {\n      for (const key in value) {\n        if (struct.schema[key] === undefined) {\n          delete value[key];\n        }\n      }\n    }\n  }\n\n  let valid = true;\n\n  for (const failure of struct.validator(value, ctx)) {\n    valid = false;\n    yield [failure, undefined];\n  }\n\n  for (let [k, v, s] of struct.entries(value, ctx)) {\n    const ts = run(v, s, {\n      path: k === undefined ? path : [...path, k],\n      branch: k === undefined ? branch : [...branch, v],\n      coerce,\n      mask\n    });\n\n    for (const t of ts) {\n      if (t[0]) {\n        valid = false;\n        yield [t[0], undefined];\n      } else if (coerce) {\n        v = t[1];\n\n        if (k === undefined) {\n          value = v;\n        } else if (value instanceof Map) {\n          value.set(k, v);\n        } else if (value instanceof Set) {\n          value.add(v);\n        } else if (isObject(value)) {\n          value[k] = v;\n        }\n      }\n    }\n  }\n\n  if (valid) {\n    for (const failure of struct.refiner(value, ctx)) {\n      valid = false;\n      yield [failure, undefined];\n    }\n  }\n\n  if (valid) {\n    yield [undefined, value];\n  }\n}\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\n\nclass Struct {\n  constructor(props) {\n    const {\n      type,\n      schema,\n      validator,\n      refiner,\n      coercer = value => value,\n      entries = function* () {}\n    } = props;\n    this.type = type;\n    this.schema = schema;\n    this.entries = entries;\n    this.coercer = coercer;\n\n    if (validator) {\n      this.validator = (value, context) => {\n        const result = validator(value, context);\n        return toFailures(result, context, this, value);\n      };\n    } else {\n      this.validator = () => [];\n    }\n\n    if (refiner) {\n      this.refiner = (value, context) => {\n        const result = refiner(value, context);\n        return toFailures(result, context, this, value);\n      };\n    } else {\n      this.refiner = () => [];\n    }\n  }\n  /**\n   * Assert that a value passes the struct's validation, throwing if it doesn't.\n   */\n\n\n  assert(value) {\n    return assert(value, this);\n  }\n  /**\n   * Create a value with the struct's coercion logic, then validate it.\n   */\n\n\n  create(value) {\n    return create(value, this);\n  }\n  /**\n   * Check if a value passes the struct's validation.\n   */\n\n\n  is(value) {\n    return is(value, this);\n  }\n  /**\n   * Mask a value, coercing and validating it, but returning only the subset of\n   * properties defined by the struct's schema.\n   */\n\n\n  mask(value) {\n    return mask(value, this);\n  }\n  /**\n   * Validate a value with the struct's validation logic, returning a tuple\n   * representing the result.\n   *\n   * You may optionally pass `true` for the `withCoercion` argument to coerce\n   * the value before attempting to validate it. If you do, the result will\n   * contain the coerced result when successful.\n   */\n\n\n  validate(value, options = {}) {\n    return validate(value, this, options);\n  }\n\n}\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\n\nfunction assert(value, struct) {\n  const result = validate(value, struct);\n\n  if (result[0]) {\n    throw result[0];\n  }\n}\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\n\nfunction create(value, struct) {\n  const result = validate(value, struct, {\n    coerce: true\n  });\n\n  if (result[0]) {\n    throw result[0];\n  } else {\n    return result[1];\n  }\n}\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\n\nfunction mask(value, struct) {\n  const result = validate(value, struct, {\n    coerce: true,\n    mask: true\n  });\n\n  if (result[0]) {\n    throw result[0];\n  } else {\n    return result[1];\n  }\n}\n/**\n * Check if a value passes a struct.\n */\n\nfunction is(value, struct) {\n  const result = validate(value, struct);\n  return !result[0];\n}\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\n\nfunction validate(value, struct, options = {}) {\n  const tuples = run(value, struct, options);\n  const tuple = shiftIterator(tuples);\n\n  if (tuple[0]) {\n    const error = new StructError(tuple[0], function* () {\n      for (const t of tuples) {\n        if (t[0]) {\n          yield t[0];\n        }\n      }\n    });\n    return [error, undefined];\n  } else {\n    const v = tuple[1];\n    return [undefined, v];\n  }\n}\n\nfunction assign(...Structs) {\n  const schemas = Structs.map(s => s.schema);\n  const schema = Object.assign({}, ...schemas);\n  return object(schema);\n}\n/**\n * Define a new struct type with a custom validation function.\n */\n\nfunction define(name, validator) {\n  return new Struct({\n    type: name,\n    schema: null,\n    validator\n  });\n}\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\n\nfunction deprecated(struct, log) {\n  return new Struct({ ...struct,\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n\n    validator(value, ctx) {\n      if (value === undefined) {\n        return true;\n      } else {\n        log(value, ctx);\n        return struct.validator(value, ctx);\n      }\n    }\n\n  });\n}\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\n\nfunction dynamic(fn) {\n  return new Struct({\n    type: 'dynamic',\n    schema: null,\n\n    *entries(value, ctx) {\n      const struct = fn(value, ctx);\n      yield* struct.entries(value, ctx);\n    },\n\n    validator(value, ctx) {\n      const struct = fn(value, ctx);\n      return struct.validator(value, ctx);\n    },\n\n    coercer(value, ctx) {\n      const struct = fn(value, ctx);\n      return struct.coercer(value, ctx);\n    }\n\n  });\n}\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\n\nfunction lazy(fn) {\n  let struct;\n  return new Struct({\n    type: 'lazy',\n    schema: null,\n\n    *entries(value, ctx) {\n      var _struct;\n\n      (_struct = struct) != null ? _struct : struct = fn();\n      yield* struct.entries(value, ctx);\n    },\n\n    validator(value, ctx) {\n      var _struct2;\n\n      (_struct2 = struct) != null ? _struct2 : struct = fn();\n      return struct.validator(value, ctx);\n    },\n\n    coercer(value, ctx) {\n      var _struct3;\n\n      (_struct3 = struct) != null ? _struct3 : struct = fn();\n      return struct.coercer(value, ctx);\n    }\n\n  });\n}\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\n\nfunction omit(struct, keys) {\n  const {\n    schema\n  } = struct;\n  const subschema = { ...schema\n  };\n\n  for (const key of keys) {\n    delete subschema[key];\n  }\n\n  return object(subschema);\n}\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\n\nfunction partial(struct) {\n  const schema = struct instanceof Struct ? { ...struct.schema\n  } : { ...struct\n  };\n\n  for (const key in schema) {\n    schema[key] = optional(schema[key]);\n  }\n\n  return object(schema);\n}\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\n\nfunction pick(struct, keys) {\n  const {\n    schema\n  } = struct;\n  const subschema = {};\n\n  for (const key of keys) {\n    subschema[key] = schema[key];\n  }\n\n  return object(subschema);\n}\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\n\nfunction struct(name, validator) {\n  console.warn('superstruct@0.11 - The `struct` helper has been renamed to `define`.');\n  return define(name, validator);\n}\n\n/**\n * Ensure that any value passes validation.\n */\n\nfunction any() {\n  return define('any', () => true);\n}\nfunction array(Element) {\n  return new Struct({\n    type: 'array',\n    schema: Element,\n\n    *entries(value) {\n      if (Element && Array.isArray(value)) {\n        for (const [i, v] of value.entries()) {\n          yield [i, v, Element];\n        }\n      }\n    },\n\n    coercer(value) {\n      return Array.isArray(value) ? value.slice() : value;\n    },\n\n    validator(value) {\n      return Array.isArray(value) || \"Expected an array value, but received: \" + print(value);\n    }\n\n  });\n}\n/**\n * Ensure that a value is a boolean.\n */\n\nfunction boolean() {\n  return define('boolean', value => {\n    return typeof value === 'boolean';\n  });\n}\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\n\nfunction date() {\n  return define('date', value => {\n    return value instanceof Date && !isNaN(value.getTime()) || \"Expected a valid `Date` object, but received: \" + print(value);\n  });\n}\nfunction enums(values) {\n  const schema = {};\n  const description = values.map(v => print(v)).join();\n\n  for (const key of values) {\n    schema[key] = key;\n  }\n\n  return new Struct({\n    type: 'enums',\n    schema,\n\n    validator(value) {\n      return values.includes(value) || \"Expected one of `\" + description + \"`, but received: \" + print(value);\n    }\n\n  });\n}\n/**\n * Ensure that a value is a function.\n */\n\nfunction func() {\n  return define('func', value => {\n    return typeof value === 'function' || \"Expected a function, but received: \" + print(value);\n  });\n}\n/**\n * Ensure that a value is an instance of a specific class.\n */\n\nfunction instance(Class) {\n  return define('instance', value => {\n    return value instanceof Class || \"Expected a `\" + Class.name + \"` instance, but received: \" + print(value);\n  });\n}\n/**\n * Ensure that a value is an integer.\n */\n\nfunction integer() {\n  return define('integer', value => {\n    return typeof value === 'number' && !isNaN(value) && Number.isInteger(value) || \"Expected an integer, but received: \" + print(value);\n  });\n}\nfunction intersection(Structs) {\n  return new Struct({\n    type: 'intersection',\n    schema: null,\n\n    *entries(value, ctx) {\n      for (const S of Structs) {\n        yield* S.entries(value, ctx);\n      }\n    },\n\n    *validator(value, ctx) {\n      for (const S of Structs) {\n        yield* S.validator(value, ctx);\n      }\n    },\n\n    *refiner(value, ctx) {\n      for (const S of Structs) {\n        yield* S.refiner(value, ctx);\n      }\n    }\n\n  });\n}\nfunction literal(constant) {\n  const description = print(constant);\n  const t = typeof constant;\n  return new Struct({\n    type: 'literal',\n    schema: t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n\n    validator(value) {\n      return value === constant || \"Expected the literal `\" + description + \"`, but received: \" + print(value);\n    }\n\n  });\n}\nfunction map(Key, Value) {\n  return new Struct({\n    type: 'map',\n    schema: null,\n\n    *entries(value) {\n      if (Key && Value && value instanceof Map) {\n        for (const [k, v] of value.entries()) {\n          yield [k, k, Key];\n          yield [k, v, Value];\n        }\n      }\n    },\n\n    coercer(value) {\n      return value instanceof Map ? new Map(value) : value;\n    },\n\n    validator(value) {\n      return value instanceof Map || \"Expected a `Map` object, but received: \" + print(value);\n    }\n\n  });\n}\n/**\n * Ensure that no value ever passes validation.\n */\n\nfunction never() {\n  return define('never', () => false);\n}\n/**\n * Augment an existing struct to allow `null` values.\n */\n\nfunction nullable(struct) {\n  return new Struct({ ...struct,\n    validator: (value, ctx) => value === null || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === null || struct.refiner(value, ctx)\n  });\n}\n/**\n * Ensure that a value is a number.\n */\n\nfunction number() {\n  return define('number', value => {\n    return typeof value === 'number' && !isNaN(value) || \"Expected a number, but received: \" + print(value);\n  });\n}\nfunction object(schema) {\n  const knowns = schema ? Object.keys(schema) : [];\n  const Never = never();\n  return new Struct({\n    type: 'object',\n    schema: schema ? schema : null,\n\n    *entries(value) {\n      if (schema && isObject(value)) {\n        const unknowns = new Set(Object.keys(value));\n\n        for (const key of knowns) {\n          unknowns.delete(key);\n          yield [key, value[key], schema[key]];\n        }\n\n        for (const key of unknowns) {\n          yield [key, value[key], Never];\n        }\n      }\n    },\n\n    validator(value) {\n      return isObject(value) || \"Expected an object, but received: \" + print(value);\n    },\n\n    coercer(value) {\n      return isObject(value) ? { ...value\n      } : value;\n    }\n\n  });\n}\n/**\n * Augment a struct to allow `undefined` values.\n */\n\nfunction optional(struct) {\n  return new Struct({ ...struct,\n    validator: (value, ctx) => value === undefined || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx)\n  });\n}\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\n\nfunction record(Key, Value) {\n  return new Struct({\n    type: 'record',\n    schema: null,\n\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k in value) {\n          const v = value[k];\n          yield [k, k, Key];\n          yield [k, v, Value];\n        }\n      }\n    },\n\n    validator(value) {\n      return isObject(value) || \"Expected an object, but received: \" + print(value);\n    }\n\n  });\n}\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\n\nfunction regexp() {\n  return define('regexp', value => {\n    return value instanceof RegExp;\n  });\n}\nfunction set(Element) {\n  return new Struct({\n    type: 'set',\n    schema: null,\n\n    *entries(value) {\n      if (Element && value instanceof Set) {\n        for (const v of value) {\n          yield [v, v, Element];\n        }\n      }\n    },\n\n    coercer(value) {\n      return value instanceof Set ? new Set(value) : value;\n    },\n\n    validator(value) {\n      return value instanceof Set || \"Expected a `Set` object, but received: \" + print(value);\n    }\n\n  });\n}\n/**\n * Ensure that a value is a string.\n */\n\nfunction string() {\n  return define('string', value => {\n    return typeof value === 'string' || \"Expected a string, but received: \" + print(value);\n  });\n}\nfunction tuple(Elements) {\n  const Never = never();\n  return new Struct({\n    type: 'tuple',\n    schema: null,\n\n    *entries(value) {\n      if (Array.isArray(value)) {\n        const length = Math.max(Elements.length, value.length);\n\n        for (let i = 0; i < length; i++) {\n          yield [i, value[i], Elements[i] || Never];\n        }\n      }\n    },\n\n    validator(value) {\n      return Array.isArray(value) || \"Expected an array, but received: \" + print(value);\n    }\n\n  });\n}\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\n\nfunction type(schema) {\n  const keys = Object.keys(schema);\n  return new Struct({\n    type: 'type',\n    schema,\n\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k of keys) {\n          yield [k, value[k], schema[k]];\n        }\n      }\n    },\n\n    validator(value) {\n      return isObject(value) || \"Expected an object, but received: \" + print(value);\n    }\n\n  });\n}\nfunction union(Structs) {\n  const description = Structs.map(s => s.type).join(' | ');\n  return new Struct({\n    type: 'union',\n    schema: null,\n\n    validator(value, ctx) {\n      const failures = [];\n\n      for (const S of Structs) {\n        const [...tuples] = run(value, S, ctx);\n        const [first] = tuples;\n\n        if (!first[0]) {\n          return [];\n        } else {\n          for (const [failure] of tuples) {\n            if (failure) {\n              failures.push(failure);\n            }\n          }\n        }\n      }\n\n      return [\"Expected the value to satisfy a union of `\" + description + \"`, but received: \" + print(value), ...failures];\n    }\n\n  });\n}\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\n\nfunction unknown() {\n  return define('unknown', () => true);\n}\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nfunction coerce(struct, condition, coercer) {\n  return new Struct({ ...struct,\n    coercer: (value, ctx) => {\n      return is(value, condition) ? struct.coercer(coercer(value, ctx), ctx) : struct.coercer(value, ctx);\n    }\n  });\n}\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nfunction defaulted(struct, fallback, options = {}) {\n  return coerce(struct, unknown(), x => {\n    const f = typeof fallback === 'function' ? fallback() : fallback;\n\n    if (x === undefined) {\n      return f;\n    }\n\n    if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n      const ret = { ...x\n      };\n      let changed = false;\n\n      for (const key in f) {\n        if (ret[key] === undefined) {\n          ret[key] = f[key];\n          changed = true;\n        }\n      }\n\n      if (changed) {\n        return ret;\n      }\n    }\n\n    return x;\n  });\n}\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nfunction trimmed(struct) {\n  return coerce(struct, string(), x => x.trim());\n}\n\n/**\n * Ensure that a string, array, map, or set is empty.\n */\n\nfunction empty(struct) {\n  const expected = \"Expected an empty \" + struct.type;\n  return refine(struct, 'empty', value => {\n    if (value instanceof Map || value instanceof Set) {\n      const {\n        size\n      } = value;\n      return size === 0 || expected + \" but received one with a size of `\" + size + \"`\";\n    } else {\n      const {\n        length\n      } = value;\n      return length === 0 || expected + \" but received one with a length of `\" + length + \"`\";\n    }\n  });\n}\n/**\n * Ensure that a number or date is below a threshold.\n */\n\nfunction max(struct, threshold, options = {}) {\n  const {\n    exclusive\n  } = options;\n  return refine(struct, 'max', value => {\n    return exclusive ? value < threshold : value <= threshold || \"Expected a \" + struct.type + \" greater than \" + (exclusive ? '' : 'or equal to ') + threshold + \" but received `\" + value + \"`\";\n  });\n}\n/**\n * Ensure that a number or date is above a threshold.\n */\n\nfunction min(struct, threshold, options = {}) {\n  const {\n    exclusive\n  } = options;\n  return refine(struct, 'min', value => {\n    return exclusive ? value > threshold : value >= threshold || \"Expected a \" + struct.type + \" greater than \" + (exclusive ? '' : 'or equal to ') + threshold + \" but received `\" + value + \"`\";\n  });\n}\n/**\n * Ensure that a string matches a regular expression.\n */\n\nfunction pattern(struct, regexp) {\n  return refine(struct, 'pattern', value => {\n    return regexp.test(value) || \"Expected a \" + struct.type + \" matching `/\" + regexp.source + \"/` but received \\\"\" + value + \"\\\"\";\n  });\n}\n/**\n * Ensure that a string, array, number, date, map, or set has a size (or length, or time) between `min` and `max`.\n */\n\nfunction size(struct, min, max = min) {\n  const expected = \"Expected a \" + struct.type;\n  const of = min === max ? \"of `\" + min + \"`\" : \"between `\" + min + \"` and `\" + max + \"`\";\n  return refine(struct, 'size', value => {\n    if (typeof value === 'number' || value instanceof Date) {\n      return min <= value && value <= max || expected + \" \" + of + \" but received `\" + value + \"`\";\n    } else if (value instanceof Map || value instanceof Set) {\n      const {\n        size\n      } = value;\n      return min <= size && size <= max || expected + \" with a size \" + of + \" but received one with a size of `\" + size + \"`\";\n    } else {\n      const {\n        length\n      } = value;\n      return min <= length && length <= max || expected + \" with a length \" + of + \" but received one with a length of `\" + length + \"`\";\n    }\n  });\n}\n/**\n * Augment a `Struct` to add an additional refinement to the validation.\n *\n * The refiner function is guaranteed to receive a value of the struct's type,\n * because the struct's existing validation will already have passed. This\n * allows you to layer additional validation on top of existing structs.\n */\n\nfunction refine(struct, name, refiner) {\n  return new Struct({ ...struct,\n\n    *refiner(value, ctx) {\n      yield* struct.refiner(value, ctx);\n      const result = refiner(value, ctx);\n      const failures = toFailures(result, ctx, struct, value);\n\n      for (const failure of failures) {\n        yield { ...failure,\n          refinement: name\n        };\n      }\n    }\n\n  });\n}\n\nexport { Struct, StructError, any, array, assert, assign, boolean, coerce, create, date, defaulted, define, deprecated, dynamic, empty, enums, func, instance, integer, intersection, is, lazy, literal, map, mask, max, min, never, nullable, number, object, omit, optional, partial, pattern, pick, record, refine, regexp, set, size, string, struct, trimmed, tuple, type, union, unknown, validate };\n//# sourceMappingURL=index.es.js.map\n"],"names":["Object","defineProperty","exports","value","s16","s8","nu64be","u48be","u40be","u32be","u24be","u16be","nu64","u48","u40","u32","u24","u16","u8","offset","greedy","Constant","UTF8","CString","Blob","Boolean","BitField","BitStructure","VariantLayout","Union","UnionLayoutDiscriminator","UnionDiscriminator","Structure","Sequence","DoubleBE","Double","FloatBE","Float","NearInt64BE","NearInt64","NearUInt64BE","NearUInt64","IntBE","Int","UIntBE","UInt","OffsetLayout","GreedyCount","ExternalLayout","bindConstructorLayout","nameWithProperty","Layout","uint8ArrayToBuffer","checkUint8Array","constant","utf8","cstr","blob","unionLayoutDiscriminator","union","seq","bits","struct","f64be","f64","f32be","f32","ns64be","s48be","s40be","s32be","s24be","s16be","ns64","s48","s40","s32","s24","buffer_1","b","Uint8Array","TypeError","Buffer","from","buffer","byteOffset","length","constructor","span","property","Number","isInteger","this","makeDestinationObject","getSpan","RangeError","replicate","rv","create","prototype","assign","fromArray","values","name","lo","Class","layout","hasOwnProperty","call","Error","layout_","boundConstructor_","encode","writable","decode","isCount","elementSpan","super","rem","Math","floor","src","readUIntLE","writeUIntLE","readUIntBE","writeUIntBE","readIntLE","writeIntLE","readIntBE","writeIntBE","V2E32","pow","divmodInt64","hi32","lo32","roundedInt64","readUInt32LE","split","writeUInt32LE","readUInt32BE","writeUInt32BE","readInt32LE","writeInt32LE","readInt32BE","writeInt32BE","readFloatLE","writeFloatLE","readFloatBE","writeFloatBE","readDoubleLE","writeDoubleLE","readDoubleBE","writeDoubleBE","elementLayout","count","idx","i","push","elo","reduce","v","fields","decodePrefixes","Array","isArray","acc","undefined","fd","e","fsp","dest","firstOffset","lastOffset","lastWrote","fv","shift","layoutFor","offsetOf","discr","defaultLayout","discriminator","usesPrefixDiscriminator","registry","boundGetSourceVariant","defaultGetSourceVariant","bind","getSourceVariant","configGetSourceVariant","gsv","vlo","getVariant","tag","dlo","clo","contentOffset","addVariant","variant","vb","fixBitwiseResult","word","msb","_packedSetValue","_packedGetValue","addField","bf","addBoolean","fieldFor","container","totalBits","usedBits","sum","valueMask","start","wordMask","wordValue","slice","srcBuffer","write","toString","String","srcb","copy","maxSpan","n","isSafeInteger","bytes","lengths","isBytes","a","includes","h","outputLen","blockLen","exists","instance","checkFinished","destroyed","finished","output","out","min","globalThis","crypto","createView","arr","DataView","byteLength","rotr","Uint32Array","str","TextEncoder","toBytes","data","arrays","res","pad","set","Hash","clone","_cloneInto","hashCons","hashC","msg","update","digest","tmp","bytesLength","getRandomValues","Maj","c","HashMD","padOffset","isLE","pos","view","len","take","subarray","process","dataView","roundClean","digestInto","fill","setBigUint64","_32n","BigInt","_u32_max","wh","wl","l","setUint32","oview","outLen","state","get","destroy","to","U32_MASK64","fromBig","le","lst","Ah","Al","toBig","shrSH","_l","s","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","_h","rotr32L","rotlSH","rotlSL","rotlBH","rotlBL","add","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5H","Eh","add5L","El","SHA512_Kh","SHA512_Kl","map","SHA512_W_H","SHA512_W_L","SHA512","Fh","Fl","Gh","Gl","Hh","Hl","getUint32","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","CHIl","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","All","_1n","_2n","item","_","padStart","hex","hexToNumber","_0","_9","_A","_F","_a","_f","char","hl","al","array","ai","hi","n1","charCodeAt","n2","reverse","title","expectedLength","bitMask","u8n","u8fr","createHmacDrbg","hashLen","qByteLen","hmacFn","k","reset","reseed","seed","gen","sl","pred","validatorFns","bigint","val","function","boolean","string","stringOrUint8Array","field","object","Fp","isValid","hash","validateObject","validators","optValidators","checkField","fieldName","type","isOptional","checkVal","entries","_3n","_4n","_5n","_8n","result","num","power","modulo","x","invert","number","y","u","q","r","m","FpSqrt","P","p1div4","sqrt3mod4","root","eql","sqr","c1","sqrt5mod8","mul","nv","sub","ONE","tonelliShanks","legendreC","Q","S","Z","tonelliFast","Q1div2","tonelliSlow","neg","g","ZERO","t2","ge","FIELD_FIELDS","nLength","nBitLength","_nBitLength","nByteLength","ceil","Field","ORDER","bitLen","redef","BITS","BYTES","sqrtP","f","freeze","MASK","is0","isOdd","lhs","rhs","FpPow","p","d","div","sqrN","addN","subN","mulN","inv","sqrt","invertBatch","FpInvertBatch","nums","lastMultiplied","inverted","reduceRight","cmov","fromBytes","getFieldBytesLength","fieldOrder","bitLength","getMinHashLength","wNAF","constTimeNegate","condition","negate","opts","W","windows","windowSize","unsafeLadder","elm","double","precomputeWindow","points","base","window","precomputes","BASE","mask","maxNumber","shiftBy","wbits","offset1","offset2","abs","cond1","cond2","wNAFCached","precomputesMap","transform","_WINDOW_SIZE","comp","validateBasic","curve","validateField","Gx","Gy","VERIFY_DEFAULT","zip215","twistedEdwards","curveDef","CURVE","validateOpts","randomBytes","adjustScalarBytes","domain","uvRatio","mapToCurve","prehash","cHash","cofactor","modP","ctx","phflag","inBig","inRange","max","in0MaskRange","assertInRange","assertGE0","CURVE_ORDER","pointPrecomputes","Map","isPoint","other","Point","ex","ey","ez","et","toAffine","fromAffine","normalizeZ","toInv","_setWindowSize","delete","assertValidity","X","Y","T","X2","Y2","Z2","Z4","aX2","equals","X1","Y1","Z1","X1Z2","X2Z1","Y1Z2","Y2Z1","A","B","C","D","x1y1","E","G","F","H","X3","Y3","T3","Z3","T1","T2","subtract","wnaf","multiply","scalar","multiplyUnsafe","I","isSmallOrder","isTorsionFree","iz","z","ax","ay","zz","clearCofactor","fromHex","normed","lastByte","y2","isXOdd","isLastByteOdd","fromPrivateKey","privKey","getExtendedPublicKey","point","toRawBytes","toHex","modN","modN_LE","key","hashed","head","prefix","pointBytes","hashDomainToScalar","context","msgs","verifyOpts","getPublicKey","sign","options","R","verify","sig","publicKey","SB","error","ExtendedPoint","utils","randomPrivateKey","precompute","ED25519_P","ED25519_SQRT_M1","_10n","_20n","_40n","_80n","ed25519_pow_2_252_3","b2","b4","b5","b10","b20","b40","b80","b160","b240","b250","pow_p_5_8","v3","v7","vx2","root1","root2","useRoot1","useRoot2","noRoot","ed25519Defaults","ed25519","ed25519_domain","ELL2_C1","FpSqrtEven","SHA256_K","SHA256_IV","SHA256_W","SHA256","W15","W2","s0","s1","HMAC","_key","iHash","oHash","buf","getPrototypeOf","hmac","message","bytesToNumberBE","b2n","hexToBytes","h2b","DER","Err","DERErr","_parseInt","toSig","sBytes","rBytesLeft","hexFromSig","parseInt","shl","rhl","rl","weierstrassPoints","validatePointOpts","allowedPrivateKeyLengths","wrapPrivateKey","allowInfinityPoint","endo","beta","splitScalar","_c","_isCompressed","tail","weierstrassEquation","x2","x3","isWithinCurveOrder","assertGE","normPrivateKeyToScalar","assertPrjPoint","px","py","pz","privateKey","left","right","hasEvenY","U1","U2","b3","t0","t1","t3","t4","t5","k1neg","k1","k2neg","k2","k1p","k2p","fake","f1p","f2p","multiplyAndAddUnsafe","isCompressed","_bits","ProjectivePoint","weierstrass","bits2int","bits2int_modN","lowS","compressedLen","uncompressedLen","invN","cat","isValidFieldElement","sqrtError","suffix","numToNByteStr","isBiggerThanHalfOrder","slcNum","Signature","recovery","fromCompact","fromDER","addRecoveryBit","recoverPublicKey","msgHash","rec","radj","ir","u1","u2","hasHighS","normalizeS","toDERRawBytes","toDERHex","toCompactRawBytes","toCompactHex","isValidPrivateKey","mapHashToField","fieldLen","minLen","reduced","isProbPub","delta","ORDER_MASK","int2octets","prepSig","defaultSigOpts","some","extraEntropy","ent","h1int","seedArgs","k2sig","kBytes","ik","normS","defaultVerOpts","getSharedSecret","privateA","publicB","drbg","signature","sg","_sig","derError","is","getHash","secp256k1P","secp256k1N","divNearest","sqrtMod","_6n","_11n","_22n","_23n","_44n","_88n","b6","b9","b11","b22","b44","b88","b176","b220","b223","secp256k1","createCurve","defHash","a1","b1","a2","POW_2_128","c2","generateKeypair","privateScalar","secretKey","isOnCurve","toBuffer","isBuffer","Struct","properties","serialize","SOLANA_SCHEMA","deserialize","decodeUnchecked","deserializeUnchecked","_class","_Symbol$toStringTag","PUBLIC_KEY_LENGTH","uniquePublicKeyCounter","Symbol","toStringTag","PublicKey","_bn","isPublicKeyData","decoded","unique","eq","toBase58","toJSON","toArrayLike","zeroPad","alloc","createWithSeed","fromPublicKey","programId","concat","publicKeyBytes","createProgramAddressSync","seeds","forEach","createProgramAddress","findProgramAddressSync","address","nonce","seedsWithNonce","err","findProgramAddress","pubkeyData","default","kind","PACKET_DATA_SIZE","TransactionExpiredBlockheightExceededError","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","TransactionExpiredNonceInvalidError","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","readonly","index","keySegment","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","keys","meta","pubkey","rustString","rsl","_decode","_encode","rslShim","chars","getAlloc","getItemAlloc","decodeLength","size","elem","encodeLength","rem_len","CompiledKeys","payer","keyMetaMap","compile","getOrInsertDefault","keyMeta","isSigner","isWritable","isInvoked","payerKeyMeta","ix","accountMeta","getMessageComponents","mapEntries","writableSigners","filter","readonlySigners","writableNonSigners","readonlyNonSigners","header","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","payerAddress","extractTableLookup","lookupTable","writableIndexes","drainedWritableKeys","drainKeysFoundInLookupTable","addresses","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","lookupTableIndex","findIndex","entry","END_OF_BUFFER_ERROR_MESSAGE","guardedShift","byteArray","guardedSplice","args","splice","Message","accountKeys","recentBlockhash","indexToProgramIds","account","version","compiledInstructions","accounts","addressTableLookups","getAccountKeys","compiledKeys","payerKey","isAccountSigner","isAccountWritable","numSignedAccounts","isProgramId","has","programIds","nonProgramIds","numKeys","keyCount","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","signDataLayout","transaction","signData","accountCount","dataSlice","messageArgs","MessageV0","numAccountKeysFromLookups","lookup","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","tableLookup","tableAccount","find","lookupTableAccounts","extractResult","addressTableLookup","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","serializedMessageLength","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","encodedWritableIndexesLength","encodedReadonlyIndexesLength","maskedPrefix","addressTableLookupsCount","VersionedMessage","deserializeMessageVersion","DEFAULT_SIGNATURE","TransactionInstruction","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_message","_json","minContextSlot","blockhash","nonceInstruction","signers","items","compileMessage","JSON","stringify","console","warn","accountMetas","uniqueMetas","pubkeyString","uniqueIndex","sort","localeCompare","localeMatcher","usage","sensitivity","ignorePunctuation","numeric","caseFirst","feePayerIndex","payerMeta","unshift","signedKeys","unsignedKeys","indexOf","_compile","every","pair","serializeMessage","getEstimatedFee","connection","getFeeForMessage","setSigners","seen","Set","uniqueSigners","signer","_partialSign","partialSign","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","_getMessageSignednessErrors","errors","missing","invalid","config","sigErrors","errorMessage","join","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","TransactionMessage","decompile","numWritableSignedAccounts","numWritableUnsignedAccounts","compiledIx","compileToLegacyMessage","compileToV0Message","VersionedTransaction","defaultSignatures","encodedSignaturesLength","transactionLayout","serializedTransaction","serializedTransactionLength","signaturesLength","messageData","signerPubkeys","signerIndex","SYSVAR_CLOCK_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","async","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","status","confirmTransaction","abortSignal","nonceAccountPubkey","nonceValue","sleep","ms","Promise","resolve","setTimeout","encodeData","allocLength","layoutFields","decodeData$1","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","encodeDecode","bigIntLayout","toBigIntLE","bigInt","toBufferLE","SystemInstruction","decodeInstructionType","checkProgramId","typeIndex","ixType","SYSTEM_INSTRUCTION_LAYOUTS","decodeCreateAccount","checkKeyLength","lamports","space","Create","fromPubkey","newAccountPubkey","decodeTransfer","Transfer","toPubkey","decodeTransferWithSeed","TransferWithSeed","basePubkey","decodeAllocate","Allocate","accountPubkey","decodeAllocateWithSeed","AllocateWithSeed","decodeAssign","Assign","decodeAssignWithSeed","AssignWithSeed","decodeCreateWithSeed","CreateWithSeed","decodeNonceInitialize","authorized","InitializeNonceAccount","noncePubkey","authorizedPubkey","decodeNonceAdvance","AdvanceNonceAccount","decodeNonceWithdraw","WithdrawNonceAccount","decodeNonceAuthorize","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","UpgradeNonceAccount","createAccount","params","transfer","createAccountWithSeed","createNonceAccount","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","CHUNK_SIZE","Loader","getMinNumSignatures","chunkSize","load","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","owner","dataLayout","transactions","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","deployCommitment","finalizeSignature","getSlot","slot","round","MS_PER_SLOT","fetch","AddressLookupTableAccount","isActive","U64_MAX","deactivationSlot","accountData","decodeData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","PublicKeyFromString","RawAccountDataResult","BufferFromRawAccountData","createRpcResult","jsonrpc","id","code","UnknownRpcResult","jsonRpcResult","schema","jsonRpcResultAndContext","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetRecentPrioritizationFeesResult","epoch","effectiveSlot","amount","postBalance","commission","prioritizationFee","GetInflationRateResult","total","validator","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","GetLeaderScheduleResult","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","logs","rentEpoch","unitsConsumed","returnData","byIdentity","range","firstSlot","lastSlot","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","ParsedAccountDataResult","parsed","AccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","ProgramAccountInfoResult","active","inactive","memo","blockTime","subscription","SlotInfoResult","parent","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","VoteAccountInfoResult","gossip","tpu","rpc","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","lastVote","rootSlot","ConfirmationStatus","current","delinquent","SignatureStatusResponse","confirmations","confirmationStatus","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","source","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","PerfSampleResult","previousBlockhash","parentSlot","rewards","feeCalculator","lamportsPerSignature","numTransactions","numSlots","samplePeriodSecs","LogsResult","Keypair","keypair","_keypair","generate","fromSecretKey","skipValidation","computedPublicKey","ii","fromSeed","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableProgram","createLookupTable","lookupTableAddress","bumpSeed","recentSlot","freezeLookupTable","extendLookupTable","addr","deactivateLookupTable","closeLookupTable","recipient","ComputeBudgetInstruction","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","decodeRequestUnits","units","additionalFee","RequestUnits","decodeRequestHeapFrame","RequestHeapFrame","decodeSetComputeUnitLimit","SetComputeUnitLimit","decodeSetComputeUnitPrice","microLamports","SetComputeUnitPrice","ComputeBudgetProgram","requestUnits","requestHeapFrame","setComputeUnitLimit","setComputeUnitPrice","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","publicKeyCreate","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","recoveryId","createInstructionWithEthAddress","ethAddress","rawAddress","startsWith","substr","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","ecdsaSign","_class2","STAKE_CONFIG_ID","Lockup","unixTimestamp","custodian","STAKE_INSTRUCTION_LAYOUTS","Initialize","lockup","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","Staker","Withdrawer","StakeProgram","initialize","stakePubkey","maybeLockup","staker","withdrawer","delegate","authorize","stakeAuthorizationType","custodianPubkey","newAuthorized","authorizeWithSeed","authorityBase","authoritySeed","authorityOwner","splitInstruction","splitStakePubkey","rentExemptReserve","splitWithSeed","merge","sourceStakePubKey","withdraw","deactivate","VOTE_INSTRUCTION_LAYOUTS","InitializeAccount","voteInit","UpdateValidatorIdentity","voteAuthorizeWithSeedArgs","Voter","VoteProgram","initializeAccount","authorizedVoter","authorizedWithdrawer","voteAuthorizationType","currentAuthorityDerivedKeyBasePubkey","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","authorizedWithdrawerPubkey","safeWithdraw","currentVoteAccountBalance","rentExemptMinimum","updateValidatorIdentity","website","details","keybaseUsername","reversed","toBigIntBE","width","toBufferBE","TX_EMPTY_SIZE","TX_INPUT_BASE","TX_INPUT_PUBKEYHASH","TX_OUTPUT_BASE","TX_OUTPUT_PUBKEYHASH","OP_RETURN_OVERHEAD","inputBytes","input","script","outputBytes","dustThreshold","feeRate","transactionBytes","inputs","outputs","uintOrNaN","NaN","isFinite","sumOrNaN","BLANK_OUTPUT","module","finalize","bytesAccum","feeAfterExtraOutput","remainderAfterExtraOutput","sumForgiving","uuid","generateRequest","ClientBrowser","callServer","reviver","replacer","generator","notificationIdNull","request","method","callback","self","isBatch","hasCallback","response","_parseResponse","responseText","parse","isError","isNotError","rnds8","rng","msCrypto","validate","test","byteToHex","arguments","toLowerCase","v4","rnds","random","_interopRequireDefault","_regenerator","_asyncToGenerator2","_typeof2","_classCallCheck2","_createClass2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_eventemitter","_utils","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","Reflect","construct","sham","Proxy","valueOf","_createSuperInternal","Super","NewTarget","apply","__rest","t","getOwnPropertySymbols","propertyIsEnumerable","CommonClient","_EventEmitter","_unsubscribe","_subscribe","_listMethods","_login","_super","webSocketFactory","_this","generate_request_id","dataPack","_a$autoconnect","autoconnect","_a$reconnect","reconnect","_a$reconnect_interval","reconnect_interval","_a$max_reconnects","max_reconnects","rest_options","queue","rpc_id","ready","reconnect_timer_id","current_reconnects","DefaultDataPack","_connect","connect","socket","timeout","ws_opts","_this2","reject","send","promise","mark","_callee","resp","wrap","_callee$","_context","prev","next","sent","abrupt","stop","login","_x","_callee2","_callee2$","_context2","listMethods","notify","_this3","_callee3","event","_callee3$","_context3","subscribe","_x2","_callee4","_callee4$","_context4","unsubscribe","_x3","close","_this4","clearTimeout","addEventListener","emit","_ref","ArrayBuffer","notification","listeners","then","_ref2","reason","EventEmitter","_default","WebSocketBrowserImpl","protocols","WebSocket","onopen","onmessage","onerror","onclose","optionsOrCallback","cb","listener","createError","obj","__esModule","StructError","failure","failures","cached","rest","path","_cached","isObject","print","toFailure","branch","refinement","toFailures","isIterable","iterator","run","coerce","coercer","valid","ts","refiner","props","assert","tuples","tuple","shiftIterator","done","define","any","Element","literal","description","never","nullable","isNaN","optional","record","Key","Value","Elements","Never","Structs","first","unknown"],"sourceRoot":""}